
nucleo-l476-fix-basic-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08008144  08008144  00009144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c0  080083c0  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080083c0  080083c0  000093c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083c8  080083c8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c8  080083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083cc  080083cc  000093cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080083d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000068  08008438  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08008438  0000a514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a42  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ceb  00000000  00000000  00021ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000247c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c0  00000000  00000000  00025e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1eb  00000000  00000000  00027018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3a6  00000000  00000000  00051203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a71e  00000000  00000000  0006b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d94  00000000  00000000  00175d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0017caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800812c 	.word	0x0800812c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800812c 	.word	0x0800812c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09c      	sub	sp, #112	@ 0x70
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint32_t raw;
  char msg[100];
  uint16_t count = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint32_t freq = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f001 f99e 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f870 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 fb4a 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 fb2a 	bl	8000be4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000590:	f000 fac8 	bl	8000b24 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000594:	f000 fa50 	bl	8000a38 <MX_TIM16_Init>
  MX_ADC1_Init();
 8000598:	f000 f8b8 	bl	800070c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800059c:	f000 faf2 	bl	8000b84 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005a0:	f000 f92a 	bl	80007f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80005a4:	f000 f968 	bl	8000878 <MX_TIM3_Init>
  MX_TIM15_Init();
 80005a8:	f000 f9c2 	bl	8000930 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
//  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(USART3_IRQn);

  // pwm for vertical rotation stepper
  TIM16->CCR1 = 100;
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <main+0xcc>)
 80005ae:	2264      	movs	r2, #100	@ 0x64
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	4822      	ldr	r0, [pc, #136]	@ (8000640 <main+0xd0>)
 80005b6:	f004 fd9b 	bl	80050f0 <HAL_TIM_PWM_Start>
  // pwm for trigger pull stepper
  TIM3->CCR1 = 50;
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <main+0xd4>)
 80005bc:	2232      	movs	r2, #50	@ 0x32
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4821      	ldr	r0, [pc, #132]	@ (8000648 <main+0xd8>)
 80005c4:	f004 fd94 	bl	80050f0 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 100;
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <main+0xdc>)
 80005ca:	2264      	movs	r2, #100	@ 0x64
 80005cc:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80005ce:	2100      	movs	r1, #0
 80005d0:	481f      	ldr	r0, [pc, #124]	@ (8000650 <main+0xe0>)
 80005d2:	f004 fd8d 	bl	80050f0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 80005d6:	481f      	ldr	r0, [pc, #124]	@ (8000654 <main+0xe4>)
 80005d8:	f001 fd46 	bl	8002068 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005e0:	481c      	ldr	r0, [pc, #112]	@ (8000654 <main+0xe4>)
 80005e2:	f001 fdfb 	bl	80021dc <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80005e6:	481b      	ldr	r0, [pc, #108]	@ (8000654 <main+0xe4>)
 80005e8:	f001 fed0 	bl	800238c <HAL_ADC_GetValue>
 80005ec:	6678      	str	r0, [r7, #100]	@ 0x64

//	HAL_GPIO_WritePin(GPIOB, 0, GPIO_PIN_RESET);


	sprintf(msg, "%hu hello\r\n", raw);
 80005ee:	463b      	mov	r3, r7
 80005f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80005f2:	4919      	ldr	r1, [pc, #100]	@ (8000658 <main+0xe8>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f006 fb39 	bl	8006c6c <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	memset(rcv_buf, 0, sizeof(rcv_buf));
 80005fa:	2240      	movs	r2, #64	@ 0x40
 80005fc:	2100      	movs	r1, #0
 80005fe:	4817      	ldr	r0, [pc, #92]	@ (800065c <main+0xec>)
 8000600:	f006 fcf6 	bl	8006ff0 <memset>

	HAL_UART_Receive(&huart3, rcv_buf, 11, 100);
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	220b      	movs	r2, #11
 8000608:	4914      	ldr	r1, [pc, #80]	@ (800065c <main+0xec>)
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <main+0xf0>)
 800060c:	f005 fd93 	bl	8006136 <HAL_UART_Receive>
	rcv_buf[11] = '\0';
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <main+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	72da      	strb	r2, [r3, #11]
	parse_cmd((char *)rcv_buf);
 8000616:	4811      	ldr	r0, [pc, #68]	@ (800065c <main+0xec>)
 8000618:	f000 fc66 	bl	8000ee8 <parse_cmd>


//	HAL_UART_Receive_IT(&huart3, rcv_buf, sizeof(rcv_buf));
	sprintf(msg, "%s \r\n", (char *)rcv_buf);
 800061c:	463b      	mov	r3, r7
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <main+0xec>)
 8000620:	4910      	ldr	r1, [pc, #64]	@ (8000664 <main+0xf4>)
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fb22 	bl	8006c6c <siprintf>

//	sprintf(msg, "%u\r\n", freq);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//
//	SetPWMFrequency(&htim16, TIM_CHANNEL_1, freq);
	count++;
 8000628:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800062c:	3301      	adds	r3, #1
 800062e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
//	HAL_Delay(10);
	HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 f9c0 	bl	80019b8 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8000638:	bf00      	nop
 800063a:	e7cc      	b.n	80005d6 <main+0x66>
 800063c:	40014400 	.word	0x40014400
 8000640:	200001d4 	.word	0x200001d4
 8000644:	40000400 	.word	0x40000400
 8000648:	2000013c 	.word	0x2000013c
 800064c:	40014000 	.word	0x40014000
 8000650:	20000188 	.word	0x20000188
 8000654:	20000084 	.word	0x20000084
 8000658:	08008144 	.word	0x08008144
 800065c:	20000378 	.word	0x20000378
 8000660:	200002f0 	.word	0x200002f0
 8000664:	08008150 	.word	0x08008150

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	@ 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	@ 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 fcba 	bl	8006ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068e:	f003 f96f 	bl	8003970 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 fd3c 	bl	8001114 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f9a6 	bl	8003a1c <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006d6:	f000 fd1d 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fd6e 	bl	80041d4 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fe:	f000 fd09 	bl	8001114 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3758      	adds	r7, #88	@ 0x58
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800072e:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000730:	4a2f      	ldr	r2, [pc, #188]	@ (80007f0 <MX_ADC1_Init+0xe4>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000734:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800074e:	2204      	movs	r2, #4
 8000750:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078e:	4817      	ldr	r0, [pc, #92]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000790:	f001 fb1a 	bl	8001dc8 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800079a:	f000 fcbb 	bl	8001114 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4810      	ldr	r0, [pc, #64]	@ (80007ec <MX_ADC1_Init+0xe0>)
 80007aa:	f002 fa9b 	bl	8002ce4 <HAL_ADCEx_MultiModeConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b4:	f000 fcae 	bl	8001114 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_ADC1_Init+0xe8>)
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2306      	movs	r3, #6
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c4:	237f      	movs	r3, #127	@ 0x7f
 80007c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c8:	2304      	movs	r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_ADC1_Init+0xe0>)
 80007d6:	f001 fde7 	bl	80023a8 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007e0:	f000 fc98 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	@ 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	50040000 	.word	0x50040000
 80007f4:	19200040 	.word	0x19200040

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C1_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_I2C1_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C1_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_I2C1_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <MX_I2C1_Init+0x74>)
 8000834:	f002 ff5c 	bl	80036f0 <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 fc69 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_I2C1_Init+0x74>)
 8000846:	f002 ffee 	bl	8003826 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fc60 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2C1_Init+0x74>)
 8000858:	f003 f830 	bl	80038bc <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fc57 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000e8 	.word	0x200000e8
 8000870:	40005400 	.word	0x40005400
 8000874:	10909cec 	.word	0x10909cec

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <MX_TIM3_Init+0xb0>)
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_TIM3_Init+0xb4>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008a4:	f240 321f 	movw	r2, #799	@ 0x31f
 80008a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008b2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80008b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008be:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c4:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008c6:	f004 fbbc 	bl	8005042 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 fc20 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008e4:	f005 fa4a 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80008ee:	f000 fc11 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	@ 0x60
 80008f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM3_Init+0xb0>)
 800090a:	f004 fd8d 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000914:	f000 fbfe 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM3_Init+0xb0>)
 800091a:	f000 fd71 	bl	8001400 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000013c 	.word	0x2000013c
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	@ 0x58
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	222c      	movs	r2, #44	@ 0x2c
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f006 fb47 	bl	8006ff0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000962:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000964:	4a33      	ldr	r2, [pc, #204]	@ (8000a34 <MX_TIM15_Init+0x104>)
 8000966:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000968:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <MX_TIM15_Init+0x100>)
 800096a:	224f      	movs	r2, #79	@ 0x4f
 800096c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8000974:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000976:	22c7      	movs	r2, #199	@ 0xc7
 8000978:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_TIM15_Init+0x100>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800098c:	4828      	ldr	r0, [pc, #160]	@ (8000a30 <MX_TIM15_Init+0x100>)
 800098e:	f004 fb58 	bl	8005042 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 8000998:	f000 fbbc 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009a8:	4619      	mov	r1, r3
 80009aa:	4821      	ldr	r0, [pc, #132]	@ (8000a30 <MX_TIM15_Init+0x100>)
 80009ac:	f005 f9e6 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80009b6:	f000 fbad 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <MX_TIM15_Init+0x100>)
 80009e0:	f004 fd22 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 80009ea:	f000 fb93 	bl	8001114 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000a12:	f005 fa3b 	bl	8005e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM15_Init+0xf0>
  {
    Error_Handler();
 8000a1c:	f000 fb7a 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000a22:	f000 fced 	bl	8001400 <HAL_TIM_MspPostInit>

}
 8000a26:	bf00      	nop
 8000a28:	3758      	adds	r7, #88	@ 0x58
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000188 	.word	0x20000188
 8000a34:	40014000 	.word	0x40014000

08000a38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	@ 0x48
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	222c      	movs	r2, #44	@ 0x2c
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 fac9 	bl	8006ff0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a60:	4a2f      	ldr	r2, [pc, #188]	@ (8000b20 <MX_TIM16_Init+0xe8>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a66:	224f      	movs	r2, #79	@ 0x4f
 8000a68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 200-1;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a72:	22c7      	movs	r2, #199	@ 0xc7
 8000a74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a88:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a8a:	f004 fa83 	bl	8004f94 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 fb3e 	bl	8001114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a98:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a9a:	f004 fad2 	bl	8005042 <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 fb36 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa8:	2360      	movs	r3, #96	@ 0x60
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000ace:	f004 fcab 	bl	8005428 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000ad8:	f000 fb1c 	bl	8001114 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000b00:	f005 f9c4 	bl	8005e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8000b0a:	f000 fb03 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b0e:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000b10:	f000 fc76 	bl	8001400 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3748      	adds	r7, #72	@ 0x48
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001d4 	.word	0x200001d4
 8000b20:	40014400 	.word	0x40014400

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <MX_USART2_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b68:	f005 fa0e 	bl	8005f88 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 facf 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000268 	.word	0x20000268
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_USART3_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc8:	f005 f9de 	bl	8005f88 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 fa9f 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002f0 	.word	0x200002f0
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_DMA_Init+0x38>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bee:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <MX_DMA_Init+0x38>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_DMA_Init+0x38>)
 8000bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200d      	movs	r0, #13
 8000c08:	f002 f9f7 	bl	8002ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f002 fa10 	bl	8003032 <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b3e      	ldr	r3, [pc, #248]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c42:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a37      	ldr	r2, [pc, #220]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	21a0      	movs	r1, #160	@ 0xa0
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9e:	f002 fcf5 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000ca8:	f002 fcf0 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	@ 0x40
 8000cb0:	4821      	ldr	r0, [pc, #132]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000cb2:	f002 fceb 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481a      	ldr	r0, [pc, #104]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000cce:	f002 fb33 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000cd2:	23a0      	movs	r3, #160	@ 0xa0
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cec:	f002 fb24 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000d08:	f002 fb16 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d0c:	2340      	movs	r3, #64	@ 0x40
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000d24:	f002 fb08 	bl	8003338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800

08000d3c <SetPWMFrequency>:
//}



void SetPWMFrequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a0      	sub	sp, #128	@ 0x80
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq(); // Get the timer clock frequency
 8000d48:	f003 fbdc 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8000d4c:	67f8      	str	r0, [r7, #124]	@ 0x7c
//    uint32_t prescaler = 0;
    uint32_t period = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	67bb      	str	r3, [r7, #120]	@ 0x78

    if (htim == &htim15) {
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4a44      	ldr	r2, [pc, #272]	@ (8000e68 <SetPWMFrequency+0x12c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d162      	bne.n	8000e20 <SetPWMFrequency+0xe4>
    	if (dirChanged_h) {
 8000d5a:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <SetPWMFrequency+0x130>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03d      	beq.n	8000dde <SetPWMFrequency+0xa2>
        	if (frequency + prev_freq_h >= MAX_FREQ_STEP_H - 500) { // used -400
 8000d62:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d922      	bls.n	8000db8 <SetPWMFrequency+0x7c>
        		if (prev_freq_h < SMALL_FREQ_STEP_H) {
 8000d72:	4b3f      	ldr	r3, [pc, #252]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d7a:	d217      	bcs.n	8000dac <SetPWMFrequency+0x70>
        			if (curDirState_h == GPIO_PIN_RESET) {
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <SetPWMFrequency+0x138>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <SetPWMFrequency+0x50>
        				curDirState_h = GPIO_PIN_SET;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <SetPWMFrequency+0x138>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e002      	b.n	8000d92 <SetPWMFrequency+0x56>
        			} else {
        				curDirState_h = GPIO_PIN_RESET;
 8000d8c:	4b39      	ldr	r3, [pc, #228]	@ (8000e74 <SetPWMFrequency+0x138>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
        			}
        			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000d92:	2101      	movs	r1, #1
 8000d94:	4838      	ldr	r0, [pc, #224]	@ (8000e78 <SetPWMFrequency+0x13c>)
 8000d96:	f002 fc91 	bl	80036bc <HAL_GPIO_TogglePin>
        			dirChanged_h = false;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <SetPWMFrequency+0x130>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
        			frequency = SMALL_FREQ_STEP_H - prev_freq_h;
 8000da0:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f5c3 7316 	rsb	r3, r3, #600	@ 0x258
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	e036      	b.n	8000e1a <SetPWMFrequency+0xde>
        		} else {
        			frequency = prev_freq_h - SMALL_FREQ_STEP_H;
 8000dac:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e030      	b.n	8000e1a <SetPWMFrequency+0xde>
        		}

        	} else {
    			if (curDirState_h == GPIO_PIN_RESET) {
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <SetPWMFrequency+0x138>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d103      	bne.n	8000dc8 <SetPWMFrequency+0x8c>
    				curDirState_h = GPIO_PIN_SET;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <SetPWMFrequency+0x138>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e002      	b.n	8000dce <SetPWMFrequency+0x92>
    			} else {
    				curDirState_h = GPIO_PIN_RESET;
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <SetPWMFrequency+0x138>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
    			}
    			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4829      	ldr	r0, [pc, #164]	@ (8000e78 <SetPWMFrequency+0x13c>)
 8000dd2:	f002 fc73 	bl	80036bc <HAL_GPIO_TogglePin>
    			dirChanged_h = false;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <SetPWMFrequency+0x130>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e01d      	b.n	8000e1a <SetPWMFrequency+0xde>


        	}
    	} else if (frequency >= prev_freq_h + MAX_FREQ_STEP_H) {
 8000dde:	4b24      	ldr	r3, [pc, #144]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d305      	bcc.n	8000df8 <SetPWMFrequency+0xbc>
//        	frequency = (frequency + prev_freq_h)/2;
        	// 2500, 500 works well for 20000 Hz
    			// also 1000, 700
        	// 2000, 100-150 works well for 25000 Hz
        	frequency = prev_freq_h + SMALL_FREQ_STEP_H;
 8000dec:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e010      	b.n	8000e1a <SetPWMFrequency+0xde>
        }
        else if (prev_freq_h >= MAX_FREQ_STEP_H && frequency <= prev_freq_h - MAX_FREQ_STEP_H) {
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e00:	d30b      	bcc.n	8000e1a <SetPWMFrequency+0xde>
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d804      	bhi.n	8000e1a <SetPWMFrequency+0xde>
        	frequency = prev_freq_h - SMALL_FREQ_STEP_H;
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000e18:	607b      	str	r3, [r7, #4]
        }
        prev_freq_h = frequency;
 8000e1a:	4a15      	ldr	r2, [pc, #84]	@ (8000e70 <SetPWMFrequency+0x134>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6013      	str	r3, [r2, #0]
//        period = (timer_clock / (frequency * (prescaler + 1))) - 1;
//        if (period <= 0xFFFF) {
//            break;
//        }
//    }
    if (frequency==0) HAL_TIM_PWM_Stop(htim, channel);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d104      	bne.n	8000e30 <SetPWMFrequency+0xf4>
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f004 fa67 	bl	80052fc <HAL_TIM_PWM_Stop>
//    HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
    // NOTE: NOT SURE IF THIS DELAY SHOULD BE IN HERE YET
//    HAL_Delay(10);
//    HAL_Delay(150);

}
 8000e2e:	e017      	b.n	8000e60 <SetPWMFrequency+0x124>
    	period = (timer_clock) / (frequency * (79 + 1)) - 1;
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e42:	3b01      	subs	r3, #1
 8000e44:	67bb      	str	r3, [r7, #120]	@ 0x78
        htim->Instance->ARR = period;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
        htim->Instance->CCR1 = period/2;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e54:	0852      	lsrs	r2, r2, #1
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(htim, channel);
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f004 f948 	bl	80050f0 <HAL_TIM_PWM_Start>
}
 8000e60:	bf00      	nop
 8000e62:	3780      	adds	r7, #128	@ 0x80
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000188 	.word	0x20000188
 8000e6c:	200003ba 	.word	0x200003ba
 8000e70:	200003bc 	.word	0x200003bc
 8000e74:	200003b9 	.word	0x200003b9
 8000e78:	48000400 	.word	0x48000400

08000e7c <pullTrigger>:

void pullTrigger(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	@ 0x70
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

	TIM3->CCR1 = 250;
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <pullTrigger+0x60>)
 8000e88:	22fa      	movs	r2, #250	@ 0xfa
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(htim, channel);
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f004 f92e 	bl	80050f0 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e98:	f000 fd8e 	bl	80019b8 <HAL_Delay>
	TIM3->CCR1 = 50;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <pullTrigger+0x60>)
 8000e9e:	2232      	movs	r2, #50	@ 0x32
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(htim, channel);
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f004 f923 	bl	80050f0 <HAL_TIM_PWM_Start>

    char msg_buf[100];
    sprintf(msg_buf, "Trigger pulled");
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <pullTrigger+0x64>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fedb 	bl	8006c6c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f988 	bl	80001d0 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f107 010c 	add.w	r1, r7, #12
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <pullTrigger+0x68>)
 8000ece:	f005 f8a9 	bl	8006024 <HAL_UART_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3770      	adds	r7, #112	@ 0x70
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	08008158 	.word	0x08008158
 8000ee4:	20000268 	.word	0x20000268

08000ee8 <parse_cmd>:


void parse_cmd(char * in_buf) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0a4      	sub	sp, #144	@ 0x90
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	 Kind of difficult to debug with the debugger because it messes with the data
	 transmission timing.

	 Direction shift is also not working for some reason, so I need to figure that out.
	 */
	if (strlen(in_buf)<5) return;
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff f96d 	bl	80001d0 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	f240 80e7 	bls.w	80010cc <parse_cmd+0x1e4>
	char buf[12];
	strcpy(buf, in_buf);
 8000efe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 f8a8 	bl	800705a <strcpy>
//		for (int i=0; i<5; i++) {
//			if (buf[i]==47) return;
//		}
//	}
	char msg_buf[100];
	sprintf(msg_buf, "buf: %s\r\n", buf);
 8000f0a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4973      	ldr	r1, [pc, #460]	@ (80010e0 <parse_cmd+0x1f8>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f005 fea9 	bl	8006c6c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f956 	bl	80001d0 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f107 0108 	add.w	r1, r7, #8
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f30:	486c      	ldr	r0, [pc, #432]	@ (80010e4 <parse_cmd+0x1fc>)
 8000f32:	f005 f877 	bl	8006024 <HAL_UART_Transmit>



	char *token = strtok(buf, ",");
 8000f36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f3a:	496b      	ldr	r1, [pc, #428]	@ (80010e8 <parse_cmd+0x200>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fffb 	bl	8006f38 <strtok>
 8000f42:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int leftJoystickX = atoi(token);
 8000f46:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f4a:	f005 fe8a 	bl	8006c62 <atoi>
 8000f4e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (strlen(token)>1 && leftJoystickX==0) return;
 8000f52:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f56:	f7ff f93b 	bl	80001d0 <strlen>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d904      	bls.n	8000f6a <parse_cmd+0x82>
 8000f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80b3 	beq.w	80010d0 <parse_cmd+0x1e8>
//	if (strlen(token)>1 && leftJoystickX==0) return;
//	sprintf(msg_buf, "token: %s\r\n", token);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
	token = strtok(NULL, ",");
 8000f6a:	495f      	ldr	r1, [pc, #380]	@ (80010e8 <parse_cmd+0x200>)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f005 ffe3 	bl	8006f38 <strtok>
 8000f72:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
//	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
	int leftJoystickY = atoi(token);
 8000f76:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f7a:	f005 fe72 	bl	8006c62 <atoi>
 8000f7e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	if (strlen(token)>1 && leftJoystickY==0) return;
 8000f82:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f86:	f7ff f923 	bl	80001d0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d904      	bls.n	8000f9a <parse_cmd+0xb2>
 8000f90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 809d 	beq.w	80010d4 <parse_cmd+0x1ec>
//	sprintf(msg_buf, "left joystick y: %d\r\n", leftJoystickY);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
	token = strtok(NULL, "/");
 8000f9a:	4954      	ldr	r1, [pc, #336]	@ (80010ec <parse_cmd+0x204>)
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f005 ffcb 	bl	8006f38 <strtok>
 8000fa2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int triggerPulled = atoi(token);
 8000fa6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000faa:	f005 fe5a 	bl	8006c62 <atoi>
 8000fae:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	if (token==NULL) return;
 8000fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 808e 	beq.w	80010d8 <parse_cmd+0x1f0>
	sprintf(msg_buf, "token: %s\r\n", token);
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000fc4:	494a      	ldr	r1, [pc, #296]	@ (80010f0 <parse_cmd+0x208>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fe50 	bl	8006c6c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f8fd 	bl	80001d0 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f107 0108 	add.w	r1, r7, #8
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe2:	4840      	ldr	r0, [pc, #256]	@ (80010e4 <parse_cmd+0x1fc>)
 8000fe4:	f005 f81e 	bl	8006024 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);

//	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
//	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);

	if (curDirState_v == GPIO_PIN_SET && leftJoystickY<0) {
 8000fe8:	4b42      	ldr	r3, [pc, #264]	@ (80010f4 <parse_cmd+0x20c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10b      	bne.n	8001008 <parse_cmd+0x120>
 8000ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da07      	bge.n	8001008 <parse_cmd+0x120>
	    // Pin is high
		HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_6);
 8000ff8:	2140      	movs	r1, #64	@ 0x40
 8000ffa:	483f      	ldr	r0, [pc, #252]	@ (80010f8 <parse_cmd+0x210>)
 8000ffc:	f002 fb5e 	bl	80036bc <HAL_GPIO_TogglePin>
		curDirState_v = GPIO_PIN_RESET;
 8001000:	4b3c      	ldr	r3, [pc, #240]	@ (80010f4 <parse_cmd+0x20c>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e00e      	b.n	8001026 <parse_cmd+0x13e>
	} else if (curDirState_v == GPIO_PIN_RESET && leftJoystickY>0){
 8001008:	4b3a      	ldr	r3, [pc, #232]	@ (80010f4 <parse_cmd+0x20c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10a      	bne.n	8001026 <parse_cmd+0x13e>
 8001010:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd06      	ble.n	8001026 <parse_cmd+0x13e>
	    // Pin is low
		HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_6);
 8001018:	2140      	movs	r1, #64	@ 0x40
 800101a:	4837      	ldr	r0, [pc, #220]	@ (80010f8 <parse_cmd+0x210>)
 800101c:	f002 fb4e 	bl	80036bc <HAL_GPIO_TogglePin>
		curDirState_v = GPIO_PIN_SET;
 8001020:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <parse_cmd+0x20c>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
	}

	if (curDirState_h == GPIO_PIN_SET && leftJoystickX<0) {
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <parse_cmd+0x214>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d107      	bne.n	800103e <parse_cmd+0x156>
 800102e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001032:	2b00      	cmp	r3, #0
 8001034:	da03      	bge.n	800103e <parse_cmd+0x156>
		// Pin is high
//		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
//		curDirState_h = GPIO_PIN_RESET;
		dirChanged_h = true;
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <parse_cmd+0x218>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e00a      	b.n	8001054 <parse_cmd+0x16c>
	} else if (curDirState_h == GPIO_PIN_RESET && leftJoystickX>0){
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <parse_cmd+0x214>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <parse_cmd+0x16c>
 8001046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800104a:	2b00      	cmp	r3, #0
 800104c:	dd02      	ble.n	8001054 <parse_cmd+0x16c>
		// Pin is low
//		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
//		curDirState_h = GPIO_PIN_SET;
		dirChanged_h = true;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <parse_cmd+0x218>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
//		prev_leftJoystickX = leftJoystickX;
//	}



	if (leftJoystickY<0) {
 8001054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001058:	2b00      	cmp	r3, #0
 800105a:	da04      	bge.n	8001066 <parse_cmd+0x17e>
		leftJoystickY = -leftJoystickY;
 800105c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001060:	425b      	negs	r3, r3
 8001062:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	if (leftJoystickX<0) {
 8001066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800106a:	2b00      	cmp	r3, #0
 800106c:	da04      	bge.n	8001078 <parse_cmd+0x190>
		leftJoystickX = -leftJoystickX;
 800106e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001072:	425b      	negs	r3, r3
 8001074:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	uint32_t frequency_v = ((uint32_t)(leftJoystickY)*MAX_FREQ_V)/128; // note: max is 3000
 8001078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800107c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	09db      	lsrs	r3, r3, #7
 8001086:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint32_t frequency_h = ((uint32_t) leftJoystickX*MAX_FREQ_H)/128;
 8001088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800108c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	09db      	lsrs	r3, r3, #7
 8001096:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (triggerPulled==1) pullTrigger(&htim3, TIM_CHANNEL_1);
 8001098:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800109c:	2b01      	cmp	r3, #1
 800109e:	d103      	bne.n	80010a8 <parse_cmd+0x1c0>
 80010a0:	2100      	movs	r1, #0
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <parse_cmd+0x21c>)
 80010a4:	f7ff feea 	bl	8000e7c <pullTrigger>
//	if (frequency==0) frequency = 1;
	sprintf(msg_buf, "freq: %lu\r\n", frequency_v);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80010ae:	4916      	ldr	r1, [pc, #88]	@ (8001108 <parse_cmd+0x220>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 fddb 	bl	8006c6c <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
	SetPWMFrequency(&htim16, TIM_CHANNEL_1, frequency_v);
 80010b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80010b8:	2100      	movs	r1, #0
 80010ba:	4814      	ldr	r0, [pc, #80]	@ (800110c <parse_cmd+0x224>)
 80010bc:	f7ff fe3e 	bl	8000d3c <SetPWMFrequency>
	SetPWMFrequency(&htim15, TIM_CHANNEL_1, frequency_h);
 80010c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80010c2:	2100      	movs	r1, #0
 80010c4:	4812      	ldr	r0, [pc, #72]	@ (8001110 <parse_cmd+0x228>)
 80010c6:	f7ff fe39 	bl	8000d3c <SetPWMFrequency>
 80010ca:	e006      	b.n	80010da <parse_cmd+0x1f2>
	if (strlen(in_buf)<5) return;
 80010cc:	bf00      	nop
 80010ce:	e004      	b.n	80010da <parse_cmd+0x1f2>
	if (strlen(token)>1 && leftJoystickX==0) return;
 80010d0:	bf00      	nop
 80010d2:	e002      	b.n	80010da <parse_cmd+0x1f2>
	if (strlen(token)>1 && leftJoystickY==0) return;
 80010d4:	bf00      	nop
 80010d6:	e000      	b.n	80010da <parse_cmd+0x1f2>
	if (token==NULL) return;
 80010d8:	bf00      	nop
//		}
//	}
//	char msg_buf[100];
//	sprintf(msg_buf, "second cmd: %s", cmds[1]);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, 20, HAL_MAX_DELAY);
}
 80010da:	3790      	adds	r7, #144	@ 0x90
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08008168 	.word	0x08008168
 80010e4:	20000268 	.word	0x20000268
 80010e8:	08008174 	.word	0x08008174
 80010ec:	08008178 	.word	0x08008178
 80010f0:	0800817c 	.word	0x0800817c
 80010f4:	200003b8 	.word	0x200003b8
 80010f8:	48000800 	.word	0x48000800
 80010fc:	200003b9 	.word	0x200003b9
 8001100:	200003ba 	.word	0x200003ba
 8001104:	2000013c 	.word	0x2000013c
 8001108:	08008188 	.word	0x08008188
 800110c:	200001d4 	.word	0x200001d4
 8001110:	20000188 	.word	0x20000188

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <Error_Handler+0x8>

08001120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ac      	sub	sp, #176	@ 0xb0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2288      	movs	r2, #136	@ 0x88
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f005 ff31 	bl	8006ff0 <memset>
  if(hadc->Instance==ADC1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a27      	ldr	r2, [pc, #156]	@ (8001230 <HAL_ADC_MspInit+0xc8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d147      	bne.n	8001228 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001198:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800119c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800119e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011ae:	2308      	movs	r3, #8
 80011b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fa27 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011d4:	f7ff ff9e 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_ADC_MspInit+0xcc>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <HAL_ADC_MspInit+0xcc>)
 80011de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HAL_ADC_MspInit+0xcc>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_ADC_MspInit+0xcc>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <HAL_ADC_MspInit+0xcc>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_ADC_MspInit+0xcc>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800120e:	230b      	movs	r3, #11
 8001210:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f002 f888 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	37b0      	adds	r7, #176	@ 0xb0
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	50040000 	.word	0x50040000
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ac      	sub	sp, #176	@ 0xb0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2288      	movs	r2, #136	@ 0x88
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f005 fec9 	bl	8006ff0 <memset>
  if(hi2c->Instance==I2C1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <HAL_I2C_MspInit+0xb0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d13a      	bne.n	80012de <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001268:	2340      	movs	r3, #64	@ 0x40
 800126a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800126c:	2300      	movs	r3, #0
 800126e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f9d1 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001280:	f7ff ff48 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_I2C_MspInit+0xb4>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <HAL_I2C_MspInit+0xb4>)
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <HAL_I2C_MspInit+0xb4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129c:	23c0      	movs	r3, #192	@ 0xc0
 800129e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a2:	2312      	movs	r3, #18
 80012a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <HAL_I2C_MspInit+0xb8>)
 80012c2:	f002 f839 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_I2C_MspInit+0xb4>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_I2C_MspInit+0xb4>)
 80012cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_I2C_MspInit+0xb4>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	37b0      	adds	r7, #176	@ 0xb0
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <HAL_TIM_PWM_MspInit+0x5c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10c      	bne.n	8001320 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_TIM_PWM_MspInit+0x60>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_TIM_PWM_MspInit+0x60>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_TIM_PWM_MspInit+0x60>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800131e:	e010      	b.n	8001342 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0c      	ldr	r2, [pc, #48]	@ (8001358 <HAL_TIM_PWM_MspInit+0x64>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_TIM_PWM_MspInit+0x60>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <HAL_TIM_PWM_MspInit+0x60>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001334:	6613      	str	r3, [r2, #96]	@ 0x60
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_TIM_PWM_MspInit+0x60>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40000400 	.word	0x40000400
 8001354:	40021000 	.word	0x40021000
 8001358:	40014000 	.word	0x40014000

0800135c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_TIM_Base_MspInit+0x94>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d13c      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_TIM_Base_MspInit+0x98>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <HAL_TIM_Base_MspInit+0x98>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	6613      	str	r3, [r2, #96]	@ 0x60
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <HAL_TIM_Base_MspInit+0x98>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 8001388:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <HAL_TIM_Base_MspInit+0xa0>)
 800138a:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 800138e:	2204      	movs	r2, #4
 8001390:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 8001394:	2210      	movs	r2, #16
 8001396:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013a0:	2280      	movs	r2, #128	@ 0x80
 80013a2:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013aa:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b2:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013c2:	f001 fe51 	bl	8003068 <HAL_DMA_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80013cc:	f7ff fea2 	bl	8001114 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013e0:	621a      	str	r2, [r3, #32]
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <HAL_TIM_Base_MspInit+0x9c>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40014400 	.word	0x40014400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	20000220 	.word	0x20000220
 80013fc:	40020030 	.word	0x40020030

08001400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a34      	ldr	r2, [pc, #208]	@ (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d11c      	bne.n	800145c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b34      	ldr	r3, [pc, #208]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a33      	ldr	r2, [pc, #204]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800143a:	2310      	movs	r3, #16
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800144a:	2302      	movs	r3, #2
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4828      	ldr	r0, [pc, #160]	@ (80014f8 <HAL_TIM_MspPostInit+0xf8>)
 8001456:	f001 ff6f 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800145a:	e044      	b.n	80014e6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM15)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a26      	ldr	r2, [pc, #152]	@ (80014fc <HAL_TIM_MspPostInit+0xfc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d11d      	bne.n	80014a2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a22      	ldr	r2, [pc, #136]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800147e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001490:	230e      	movs	r3, #14
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <HAL_TIM_MspPostInit+0xf8>)
 800149c:	f001 ff4c 	bl	8003338 <HAL_GPIO_Init>
}
 80014a0:	e021      	b.n	80014e6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM16)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a16      	ldr	r2, [pc, #88]	@ (8001500 <HAL_TIM_MspPostInit+0x100>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d11c      	bne.n	80014e6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80014d4:	230e      	movs	r3, #14
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f001 ff29 	bl	8003338 <HAL_GPIO_Init>
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	@ 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	40014000 	.word	0x40014000
 8001500:	40014400 	.word	0x40014400

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0ae      	sub	sp, #184	@ 0xb8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2288      	movs	r2, #136	@ 0x88
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f005 fd63 	bl	8006ff0 <memset>
  if(huart->Instance==USART2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a42      	ldr	r2, [pc, #264]	@ (8001638 <HAL_UART_MspInit+0x134>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d13c      	bne.n	80015ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001538:	2300      	movs	r3, #0
 800153a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4618      	mov	r0, r3
 8001542:	f003 f86b 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800154c:	f7ff fde2 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001550:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <HAL_UART_MspInit+0x138>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	4a39      	ldr	r2, [pc, #228]	@ (800163c <HAL_UART_MspInit+0x138>)
 8001556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155a:	6593      	str	r3, [r2, #88]	@ 0x58
 800155c:	4b37      	ldr	r3, [pc, #220]	@ (800163c <HAL_UART_MspInit+0x138>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b34      	ldr	r3, [pc, #208]	@ (800163c <HAL_UART_MspInit+0x138>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156c:	4a33      	ldr	r2, [pc, #204]	@ (800163c <HAL_UART_MspInit+0x138>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001574:	4b31      	ldr	r3, [pc, #196]	@ (800163c <HAL_UART_MspInit+0x138>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001580:	230c      	movs	r3, #12
 8001582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001598:	2307      	movs	r3, #7
 800159a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a8:	f001 fec6 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ac:	e03f      	b.n	800162e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a23      	ldr	r2, [pc, #140]	@ (8001640 <HAL_UART_MspInit+0x13c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d13a      	bne.n	800162e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015b8:	2304      	movs	r3, #4
 80015ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f829 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80015d0:	f7ff fda0 	bl	8001114 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_UART_MspInit+0x138>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_UART_MspInit+0x138>)
 80015da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015de:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_UART_MspInit+0x138>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <HAL_UART_MspInit+0x138>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a12      	ldr	r2, [pc, #72]	@ (800163c <HAL_UART_MspInit+0x138>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_UART_MspInit+0x138>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001604:	2330      	movs	r3, #48	@ 0x30
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800161c:	2307      	movs	r3, #7
 800161e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001626:	4619      	mov	r1, r3
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <HAL_UART_MspInit+0x140>)
 800162a:	f001 fe85 	bl	8003338 <HAL_GPIO_Init>
}
 800162e:	bf00      	nop
 8001630:	37b8      	adds	r7, #184	@ 0xb8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000
 8001640:	40004800 	.word	0x40004800
 8001644:	48000800 	.word	0x48000800

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <NMI_Handler+0x4>

08001650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <UsageFault_Handler+0x4>

08001670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f000 f96b 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <DMA1_Channel3_IRQHandler+0x10>)
 80016ae:	f001 fd93 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000220 	.word	0x20000220

080016bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return 1;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_kill>:

int _kill(int pid, int sig)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d6:	f005 fc93 	bl	8007000 <__errno>
 80016da:	4603      	mov	r3, r0
 80016dc:	2216      	movs	r2, #22
 80016de:	601a      	str	r2, [r3, #0]
  return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_exit>:

void _exit (int status)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffe7 	bl	80016cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80016fe:	bf00      	nop
 8001700:	e7fd      	b.n	80016fe <_exit+0x12>

08001702 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e00a      	b.n	800172a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001714:	f3af 8000 	nop.w
 8001718:	4601      	mov	r1, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	b2ca      	uxtb	r2, r1
 8001722:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf0      	blt.n	8001714 <_read+0x12>
  }

  return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e009      	b.n	8001762 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	dbf1      	blt.n	800174e <_write+0x12>
  }
  return len;
 800176a:	687b      	ldr	r3, [r7, #4]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_close>:

int _close(int file)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800179c:	605a      	str	r2, [r3, #4]
  return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_isatty>:

int _isatty(int file)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f005 fbf8 	bl	8007000 <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20018000 	.word	0x20018000
 800183c:	00000400 	.word	0x00000400
 8001840:	200003c0 	.word	0x200003c0
 8001844:	20000518 	.word	0x20000518

08001848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001870:	f7ff ffea 	bl	8001848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	@ (80018ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <LoopForever+0xe>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	@ (80018b8 <LoopForever+0x16>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f005 fbb7 	bl	800700c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7fe fe67 	bl	8000570 <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018b0:	080083d0 	.word	0x080083d0
  ldr r2, =_sbss
 80018b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018b8:	20000514 	.word	0x20000514

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <HAL_Init+0x3c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_Init+0x3c>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d6:	2003      	movs	r0, #3
 80018d8:	f001 fb84 	bl	8002fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 f80f 	bl	8001900 <HAL_InitTick>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	e001      	b.n	80018f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ee:	f7ff fc17 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f2:	79fb      	ldrb	r3, [r7, #7]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_InitTick+0x6c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_InitTick+0x70>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <HAL_InitTick+0x6c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fb8f 	bl	800304e <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d809      	bhi.n	8001950 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001944:	f001 fb59 	bl	8002ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001948:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_InitTick+0x74>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e007      	b.n	8001960 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e004      	b.n	8001960 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e001      	b.n	8001960 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	@ (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	200003c4 	.word	0x200003c4

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200003c4 	.word	0x200003c4

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008

08001a00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3360      	adds	r3, #96	@ 0x60
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <LL_ADC_SetOffset+0x44>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001aa0:	bf00      	nop
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	03fff000 	.word	0x03fff000

08001ab0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3360      	adds	r3, #96	@ 0x60
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3360      	adds	r3, #96	@ 0x60
 8001aec:	461a      	mov	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3330      	adds	r3, #48	@ 0x30
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	211f      	movs	r1, #31
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	f003 011f 	and.w	r1, r3, #31
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3314      	adds	r3, #20
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0e5b      	lsrs	r3, r3, #25
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0d1b      	lsrs	r3, r3, #20
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2107      	movs	r1, #7
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0d1b      	lsrs	r3, r3, #20
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0318 	and.w	r3, r3, #24
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c0c:	40d9      	lsrs	r1, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	400b      	ands	r3, r1
 8001c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c16:	431a      	orrs	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	0007ffff 	.word	0x0007ffff

08001c30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6093      	str	r3, [r2, #8]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cf0:	d101      	bne.n	8001cf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <LL_ADC_IsEnabled+0x18>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <LL_ADC_IsEnabled+0x1a>
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d66:	f043 0204 	orr.w	r2, r3, #4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d101      	bne.n	8001db8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e130      	b.n	8002044 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff f9b9 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff3f 	bl	8001c8c <LL_ADC_IsDeepPowerDownEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff25 	bl	8001c68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff5a 	bl	8001cdc <LL_ADC_IsInternalRegulatorEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d115      	bne.n	8001e5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff3e 	bl	8001cb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e38:	4b84      	ldr	r3, [pc, #528]	@ (800204c <HAL_ADC_Init+0x284>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	4a84      	ldr	r2, [pc, #528]	@ (8002050 <HAL_ADC_Init+0x288>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff3c 	bl	8001cdc <LL_ADC_IsInternalRegulatorEnabled>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6e:	f043 0210 	orr.w	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff75 	bl	8001d7a <LL_ADC_REG_IsConversionOngoing>
 8001e90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 80c9 	bne.w	8002032 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80c5 	bne.w	8002032 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d115      	bne.n	8001ef4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ec8:	4862      	ldr	r0, [pc, #392]	@ (8002054 <HAL_ADC_Init+0x28c>)
 8001eca:	f7ff ff2f 	bl	8001d2c <LL_ADC_IsEnabled>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	4861      	ldr	r0, [pc, #388]	@ (8002058 <HAL_ADC_Init+0x290>)
 8001ed2:	f7ff ff2b 	bl	8001d2c <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	431c      	orrs	r4, r3
 8001eda:	4860      	ldr	r0, [pc, #384]	@ (800205c <HAL_ADC_Init+0x294>)
 8001edc:	f7ff ff26 	bl	8001d2c <LL_ADC_IsEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	485c      	ldr	r0, [pc, #368]	@ (8002060 <HAL_ADC_Init+0x298>)
 8001ef0:	f7ff fd86 	bl	8001a00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7e5b      	ldrb	r3, [r3, #25]
 8001ef8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	3b01      	subs	r3, #1
 8001f28:	045b      	lsls	r3, r3, #17
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_ADC_Init+0x29c>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff1b 	bl	8001da0 <LL_ADC_INJ_IsConversionOngoing>
 8001f6a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d13d      	bne.n	8001fee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d13a      	bne.n	8001fee <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f84:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f94:	f023 0302 	bic.w	r3, r3, #2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d118      	bne.n	8001fde <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	e007      	b.n	8001fee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10c      	bne.n	8002010 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f023 010f 	bic.w	r1, r3, #15
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
 800200e:	e007      	b.n	8002020 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020f 	bic.w	r2, r2, #15
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	f023 0303 	bic.w	r3, r3, #3
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002042:	7ffb      	ldrb	r3, [r7, #31]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3724      	adds	r7, #36	@ 0x24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	20000000 	.word	0x20000000
 8002050:	053e2d63 	.word	0x053e2d63
 8002054:	50040000 	.word	0x50040000
 8002058:	50040100 	.word	0x50040100
 800205c:	50040200 	.word	0x50040200
 8002060:	50040300 	.word	0x50040300
 8002064:	fff0c007 	.word	0xfff0c007

08002068 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002070:	4857      	ldr	r0, [pc, #348]	@ (80021d0 <HAL_ADC_Start+0x168>)
 8002072:	f7ff fddd 	bl	8001c30 <LL_ADC_GetMultimode>
 8002076:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fe7c 	bl	8001d7a <LL_ADC_REG_IsConversionOngoing>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 809c 	bne.w	80021c2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_Start+0x30>
 8002094:	2302      	movs	r3, #2
 8002096:	e097      	b.n	80021c8 <HAL_ADC_Start+0x160>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fd73 	bl	8002b8c <ADC_Enable>
 80020a6:	4603      	mov	r3, r0
 80020a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f040 8083 	bne.w	80021b8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a42      	ldr	r2, [pc, #264]	@ (80021d4 <HAL_ADC_Start+0x16c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d002      	beq.n	80020d6 <HAL_ADC_Start+0x6e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e000      	b.n	80020d8 <HAL_ADC_Start+0x70>
 80020d6:	4b40      	ldr	r3, [pc, #256]	@ (80021d8 <HAL_ADC_Start+0x170>)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d002      	beq.n	80020e6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020fe:	d106      	bne.n	800210e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	f023 0206 	bic.w	r2, r3, #6
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	@ 0x58
 800210c:	e002      	b.n	8002114 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	221c      	movs	r2, #28
 800211a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <HAL_ADC_Start+0x16c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d002      	beq.n	8002134 <HAL_ADC_Start+0xcc>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e000      	b.n	8002136 <HAL_ADC_Start+0xce>
 8002134:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_ADC_Start+0x170>)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4293      	cmp	r3, r2
 800213c:	d008      	beq.n	8002150 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d002      	beq.n	8002150 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d114      	bne.n	800217a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002166:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fded 	bl	8001d52 <LL_ADC_REG_StartConversion>
 8002178:	e025      	b.n	80021c6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <HAL_ADC_Start+0x16c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d002      	beq.n	8002196 <HAL_ADC_Start+0x12e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	e000      	b.n	8002198 <HAL_ADC_Start+0x130>
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_ADC_Start+0x170>)
 8002198:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00f      	beq.n	80021c6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80021b6:	e006      	b.n	80021c6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021c0:	e001      	b.n	80021c6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	50040300 	.word	0x50040300
 80021d4:	50040100 	.word	0x50040100
 80021d8:	50040000 	.word	0x50040000

080021dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e6:	4866      	ldr	r0, [pc, #408]	@ (8002380 <HAL_ADC_PollForConversion+0x1a4>)
 80021e8:	f7ff fd22 	bl	8001c30 <LL_ADC_GetMultimode>
 80021ec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d102      	bne.n	80021fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021f6:	2308      	movs	r3, #8
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e02a      	b.n	8002252 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d002      	beq.n	800220e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b09      	cmp	r3, #9
 800220c:	d111      	bne.n	8002232 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0a4      	b.n	8002376 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800222c:	2304      	movs	r3, #4
 800222e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002230:	e00f      	b.n	8002252 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002232:	4853      	ldr	r0, [pc, #332]	@ (8002380 <HAL_ADC_PollForConversion+0x1a4>)
 8002234:	f7ff fd0a 	bl	8001c4c <LL_ADC_GetMultiDMATransfer>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e093      	b.n	8002376 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800224e:	2304      	movs	r3, #4
 8002250:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002252:	f7ff fba5 	bl	80019a0 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002258:	e021      	b.n	800229e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002260:	d01d      	beq.n	800229e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002262:	f7ff fb9d 	bl	80019a0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <HAL_ADC_PollForConversion+0x9c>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d112      	bne.n	800229e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	f043 0204 	orr.w	r2, r3, #4
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e06b      	b.n	8002376 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0d6      	beq.n	800225a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc28 	bl	8001b12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01c      	beq.n	8002302 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e5b      	ldrb	r3, [r3, #25]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d118      	bne.n	8002302 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d111      	bne.n	8002302 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1f      	ldr	r2, [pc, #124]	@ (8002384 <HAL_ADC_PollForConversion+0x1a8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d002      	beq.n	8002312 <HAL_ADC_PollForConversion+0x136>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	e000      	b.n	8002314 <HAL_ADC_PollForConversion+0x138>
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_ADC_PollForConversion+0x1ac>)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	4293      	cmp	r3, r2
 800231a:	d008      	beq.n	800232e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b05      	cmp	r3, #5
 8002326:	d002      	beq.n	800232e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d104      	bne.n	8002338 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e00c      	b.n	8002352 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	@ (8002384 <HAL_ADC_PollForConversion+0x1a8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d002      	beq.n	8002348 <HAL_ADC_PollForConversion+0x16c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e000      	b.n	800234a <HAL_ADC_PollForConversion+0x16e>
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_ADC_PollForConversion+0x1ac>)
 800234a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d104      	bne.n	8002362 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e008      	b.n	8002374 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d103      	bne.n	8002374 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	220c      	movs	r2, #12
 8002372:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	50040300 	.word	0x50040300
 8002384:	50040100 	.word	0x50040100
 8002388:	50040000 	.word	0x50040000

0800238c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0b6      	sub	sp, #216	@ 0xd8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x22>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e3c9      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x7b6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fccf 	bl	8001d7a <LL_ADC_REG_IsConversionOngoing>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 83aa 	bne.w	8002b38 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d824      	bhi.n	800243e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	3b02      	subs	r3, #2
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d81b      	bhi.n	8002436 <HAL_ADC_ConfigChannel+0x8e>
 80023fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002404 <HAL_ADC_ConfigChannel+0x5c>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002415 	.word	0x08002415
 8002408:	0800241d 	.word	0x0800241d
 800240c:	08002425 	.word	0x08002425
 8002410:	0800242d 	.word	0x0800242d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002414:	230c      	movs	r3, #12
 8002416:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800241a:	e010      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800241c:	2312      	movs	r3, #18
 800241e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002422:	e00c      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002424:	2318      	movs	r3, #24
 8002426:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800242a:	e008      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800242c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002436:	2306      	movs	r3, #6
 8002438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800243c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800244c:	f7ff fb74 	bl	8001b38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fc90 	bl	8001d7a <LL_ADC_REG_IsConversionOngoing>
 800245a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fc9c 	bl	8001da0 <LL_ADC_INJ_IsConversionOngoing>
 8002468:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 81a4 	bne.w	80027be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 819f 	bne.w	80027be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	461a      	mov	r2, r3
 800248e:	f7ff fb7f 	bl	8001b90 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d00a      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6919      	ldr	r1, [r3, #16]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c4:	f7ff fad0 	bl	8001a68 <LL_ADC_SetOffset>
 80024c8:	e179      	b.n	80027be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff faed 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x14e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fae2 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	e01e      	b.n	8002534 <HAL_ADC_ConfigChannel+0x18c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fad7 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002518:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800251c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e004      	b.n	8002532 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1a4>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	e018      	b.n	800257e <HAL_ADC_ConfigChannel+0x1d6>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e004      	b.n	800257e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800257e:	429a      	cmp	r2, r3
 8002580:	d106      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff faa6 	bl	8001adc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fa8a 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x214>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2101      	movs	r1, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fa7f 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 021f 	and.w	r2, r3, #31
 80025ba:	e01e      	b.n	80025fa <HAL_ADC_ConfigChannel+0x252>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fa74 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e004      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x26a>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	e018      	b.n	8002644 <HAL_ADC_ConfigChannel+0x29c>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002626:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800262a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800262e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e004      	b.n	8002644 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800263a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fa43 	bl	8001adc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2102      	movs	r1, #2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fa27 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x2da>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2102      	movs	r1, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fa1c 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	e01e      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x318>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2102      	movs	r1, #2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa11 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e004      	b.n	80026be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80026b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x330>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	e014      	b.n	8002702 <HAL_ADC_ConfigChannel+0x35a>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2102      	movs	r1, #2
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f9e4 	bl	8001adc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2103      	movs	r1, #3
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f9c8 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x398>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2103      	movs	r1, #3
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff f9bd 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	e017      	b.n	8002770 <HAL_ADC_ConfigChannel+0x3c8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2103      	movs	r1, #3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f9b2 	bl	8001ab0 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800275a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x3e0>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	e011      	b.n	80027ac <HAL_ADC_ConfigChannel+0x404>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800279a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80027a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f98f 	bl	8001adc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fab2 	bl	8001d2c <LL_ADC_IsEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8140 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	461a      	mov	r2, r3
 80027de:	f7ff fa03 	bl	8001be8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002a24 <HAL_ADC_ConfigChannel+0x67c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	f040 8131 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x46e>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0e9b      	lsrs	r3, r3, #26
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b09      	cmp	r3, #9
 800280c:	bf94      	ite	ls
 800280e:	2301      	movls	r3, #1
 8002810:	2300      	movhi	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e019      	b.n	800284a <HAL_ADC_ConfigChannel+0x4a2>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002826:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2b09      	cmp	r3, #9
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284a:	2b00      	cmp	r3, #0
 800284c:	d079      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_ADC_ConfigChannel+0x4c2>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	3301      	adds	r3, #1
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002868:	e015      	b.n	8002896 <HAL_ADC_ConfigChannel+0x4ee>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800287c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	069b      	lsls	r3, r3, #26
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x50e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	e017      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x53e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80028d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_ADC_ConfigChannel+0x564>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	e018      	b.n	800293e <HAL_ADC_ConfigChannel+0x596>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e003      	b.n	8002930 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293e:	430b      	orrs	r3, r1
 8002940:	e081      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_ADC_ConfigChannel+0x5b6>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800295c:	e015      	b.n	800298a <HAL_ADC_ConfigChannel+0x5e2>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x602>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	e017      	b.n	80029da <HAL_ADC_ConfigChannel+0x632>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	61bb      	str	r3, [r7, #24]
  return result;
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	ea42 0103 	orr.w	r1, r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x65e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	051b      	lsls	r3, r3, #20
 8002a00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x69c>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  return result;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e006      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x688>
 8002a22:	bf00      	nop
 8002a24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b1e      	subs	r3, #30
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff f8a0 	bl	8001b90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d07a      	beq.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5c:	4843      	ldr	r0, [pc, #268]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a5e:	f7fe fff5 	bl	8001a4c <LL_ADC_GetCommonPathInternalCh>
 8002a62:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a41      	ldr	r2, [pc, #260]	@ (8002b70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d12c      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d126      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x6e8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d15d      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4834      	ldr	r0, [pc, #208]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a9c:	f7fe ffc3 	bl	8001a26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aa0:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac8:	e040      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2d      	ldr	r2, [pc, #180]	@ (8002b84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d118      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d112      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x74c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d12d      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	4619      	mov	r1, r3
 8002afe:	481b      	ldr	r0, [pc, #108]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002b00:	f7fe ff91 	bl	8001a26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b04:	e024      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d120      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d115      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480e      	ldr	r0, [pc, #56]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002b32:	f7fe ff78 	bl	8001a26 <LL_ADC_SetCommonPathInternalCh>
 8002b36:	e00c      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b4a:	e002      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	37d8      	adds	r7, #216	@ 0xd8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	80080000 	.word	0x80080000
 8002b6c:	50040300 	.word	0x50040300
 8002b70:	c7520000 	.word	0xc7520000
 8002b74:	50040000 	.word	0x50040000
 8002b78:	50040200 	.word	0x50040200
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	053e2d63 	.word	0x053e2d63
 8002b84:	cb840000 	.word	0xcb840000
 8002b88:	80000001 	.word	0x80000001

08002b8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f8c5 	bl	8001d2c <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d169      	bne.n	8002c7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b36      	ldr	r3, [pc, #216]	@ (8002c88 <ADC_Enable+0xfc>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e055      	b.n	8002c7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f894 	bl	8001d04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bdc:	482b      	ldr	r0, [pc, #172]	@ (8002c8c <ADC_Enable+0x100>)
 8002bde:	f7fe ff35 	bl	8001a4c <LL_ADC_GetCommonPathInternalCh>
 8002be2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bec:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <ADC_Enable+0x104>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	4a28      	ldr	r2, [pc, #160]	@ (8002c94 <ADC_Enable+0x108>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c06:	e002      	b.n	8002c0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fec4 	bl	80019a0 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1a:	e028      	b.n	8002c6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f883 	bl	8001d2c <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f867 	bl	8001d04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c36:	f7fe feb3 	bl	80019a0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d914      	bls.n	8002c6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d00d      	beq.n	8002c6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e007      	b.n	8002c7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d1cf      	bne.n	8002c1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	8000003f 	.word	0x8000003f
 8002c8c:	50040300 	.word	0x50040300
 8002c90:	20000000 	.word	0x20000000
 8002c94:	053e2d63 	.word	0x053e2d63

08002c98 <LL_ADC_IsEnabled>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <LL_ADC_IsEnabled+0x18>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <LL_ADC_IsEnabled+0x1a>
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_REG_IsConversionOngoing>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d101      	bne.n	8002cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b09f      	sub	sp, #124	@ 0x7c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e093      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a47      	ldr	r2, [pc, #284]	@ (8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d1c:	4b46      	ldr	r3, [pc, #280]	@ (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	e001      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e072      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ffb9 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002d4c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ffb3 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d154      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d151      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d64:	4b35      	ldr	r3, [pc, #212]	@ (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d66:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d02c      	beq.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d82:	035b      	lsls	r3, r3, #13
 8002d84:	430b      	orrs	r3, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8c:	4829      	ldr	r0, [pc, #164]	@ (8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d8e:	f7ff ff83 	bl	8002c98 <LL_ADC_IsEnabled>
 8002d92:	4604      	mov	r4, r0
 8002d94:	4828      	ldr	r0, [pc, #160]	@ (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d96:	f7ff ff7f 	bl	8002c98 <LL_ADC_IsEnabled>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	431c      	orrs	r4, r3
 8002d9e:	4828      	ldr	r0, [pc, #160]	@ (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002da0:	f7ff ff7a 	bl	8002c98 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d137      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002db4:	f023 030f 	bic.w	r3, r3, #15
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	6811      	ldr	r1, [r2, #0]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc8:	e028      	b.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd6:	4817      	ldr	r0, [pc, #92]	@ (8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dd8:	f7ff ff5e 	bl	8002c98 <LL_ADC_IsEnabled>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	4816      	ldr	r0, [pc, #88]	@ (8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002de0:	f7ff ff5a 	bl	8002c98 <LL_ADC_IsEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	431c      	orrs	r4, r3
 8002de8:	4815      	ldr	r0, [pc, #84]	@ (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dea:	f7ff ff55 	bl	8002c98 <LL_ADC_IsEnabled>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4323      	orrs	r3, r4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d112      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dfe:	f023 030f 	bic.w	r3, r3, #15
 8002e02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e06:	e009      	b.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e1a:	e000      	b.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	377c      	adds	r7, #124	@ 0x7c
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	50040000 	.word	0x50040000
 8002e38:	50040100 	.word	0x50040100
 8002e3c:	50040300 	.word	0x50040300
 8002e40:	50040200 	.word	0x50040200

08002e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <__NVIC_EnableIRQ+0x38>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0a      	blt.n	8002f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	490c      	ldr	r1, [pc, #48]	@ (8002f30 <__NVIC_SetPriority+0x4c>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	440b      	add	r3, r1
 8002f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f0c:	e00a      	b.n	8002f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4908      	ldr	r1, [pc, #32]	@ (8002f34 <__NVIC_SetPriority+0x50>)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	761a      	strb	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf28      	it	cs
 8002f56:	2304      	movcs	r3, #4
 8002f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b03      	subs	r3, #3
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	4313      	orrs	r3, r2
         );
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	@ 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb0:	d301      	bcc.n	8002fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00f      	b.n	8002fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <SysTick_Config+0x40>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fc4:	f7ff ff8e 	bl	8002ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <SysTick_Config+0x40>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fce:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <SysTick_Config+0x40>)
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000e010 	.word	0xe000e010

08002fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff29 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800300c:	f7ff ff3e 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8003010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff ff8e 	bl	8002f38 <NVIC_EncodePriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff5d 	bl	8002ee4 <__NVIC_SetPriority>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff31 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ffa2 	bl	8002fa0 <SysTick_Config>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e098      	b.n	80031ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	4b4d      	ldr	r3, [pc, #308]	@ (80031b8 <HAL_DMA_Init+0x150>)
 8003082:	429a      	cmp	r2, r3
 8003084:	d80f      	bhi.n	80030a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4b4b      	ldr	r3, [pc, #300]	@ (80031bc <HAL_DMA_Init+0x154>)
 800308e:	4413      	add	r3, r2
 8003090:	4a4b      	ldr	r2, [pc, #300]	@ (80031c0 <HAL_DMA_Init+0x158>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a48      	ldr	r2, [pc, #288]	@ (80031c4 <HAL_DMA_Init+0x15c>)
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030a4:	e00e      	b.n	80030c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b46      	ldr	r3, [pc, #280]	@ (80031c8 <HAL_DMA_Init+0x160>)
 80030ae:	4413      	add	r3, r2
 80030b0:	4a43      	ldr	r2, [pc, #268]	@ (80031c0 <HAL_DMA_Init+0x158>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	009a      	lsls	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a42      	ldr	r2, [pc, #264]	@ (80031cc <HAL_DMA_Init+0x164>)
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80030da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800311e:	d039      	beq.n	8003194 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	4a27      	ldr	r2, [pc, #156]	@ (80031c4 <HAL_DMA_Init+0x15c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d11a      	bne.n	8003160 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800312a:	4b29      	ldr	r3, [pc, #164]	@ (80031d0 <HAL_DMA_Init+0x168>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f003 031c 	and.w	r3, r3, #28
 8003136:	210f      	movs	r1, #15
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	4924      	ldr	r1, [pc, #144]	@ (80031d0 <HAL_DMA_Init+0x168>)
 8003140:	4013      	ands	r3, r2
 8003142:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003144:	4b22      	ldr	r3, [pc, #136]	@ (80031d0 <HAL_DMA_Init+0x168>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003150:	f003 031c 	and.w	r3, r3, #28
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	491d      	ldr	r1, [pc, #116]	@ (80031d0 <HAL_DMA_Init+0x168>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
 800315e:	e019      	b.n	8003194 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003160:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_DMA_Init+0x16c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003168:	f003 031c 	and.w	r3, r3, #28
 800316c:	210f      	movs	r1, #15
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	4917      	ldr	r1, [pc, #92]	@ (80031d4 <HAL_DMA_Init+0x16c>)
 8003176:	4013      	ands	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800317a:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <HAL_DMA_Init+0x16c>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	f003 031c 	and.w	r3, r3, #28
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	4911      	ldr	r1, [pc, #68]	@ (80031d4 <HAL_DMA_Init+0x16c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40020407 	.word	0x40020407
 80031bc:	bffdfff8 	.word	0xbffdfff8
 80031c0:	cccccccd 	.word	0xcccccccd
 80031c4:	40020000 	.word	0x40020000
 80031c8:	bffdfbf8 	.word	0xbffdfbf8
 80031cc:	40020400 	.word	0x40020400
 80031d0:	400200a8 	.word	0x400200a8
 80031d4:	400204a8 	.word	0x400204a8

080031d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f4:	f003 031c 	and.w	r3, r3, #28
 80031f8:	2204      	movs	r2, #4
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d026      	beq.n	8003252 <HAL_DMA_IRQHandler+0x7a>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d107      	bne.n	800322c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003230:	f003 021c 	and.w	r2, r3, #28
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2104      	movs	r1, #4
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	2b00      	cmp	r3, #0
 8003246:	d071      	beq.n	800332c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003250:	e06c      	b.n	800332c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	f003 031c 	and.w	r3, r3, #28
 800325a:	2202      	movs	r2, #2
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02e      	beq.n	80032c4 <HAL_DMA_IRQHandler+0xec>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d029      	beq.n	80032c4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 020a 	bic.w	r2, r2, #10
 800328c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f003 021c 	and.w	r2, r3, #28
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2102      	movs	r1, #2
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d038      	beq.n	800332c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032c2:	e033      	b.n	800332c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f003 031c 	and.w	r3, r3, #28
 80032cc:	2208      	movs	r2, #8
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02a      	beq.n	800332e <HAL_DMA_IRQHandler+0x156>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d025      	beq.n	800332e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 020e 	bic.w	r2, r2, #14
 80032f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	f003 021c 	and.w	r2, r3, #28
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800332c:	bf00      	nop
 800332e:	bf00      	nop
}
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003346:	e17f      	b.n	8003648 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8171 	beq.w	8003642 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_GPIO_Init+0x40>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d118      	bne.n	8003418 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	f003 0201 	and.w	r2, r3, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b03      	cmp	r3, #3
 8003422:	d017      	beq.n	8003454 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d123      	bne.n	80034a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	6939      	ldr	r1, [r7, #16]
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80ac 	beq.w	8003642 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003668 <HAL_GPIO_Init+0x330>)
 80034ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003668 <HAL_GPIO_Init+0x330>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80034f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003668 <HAL_GPIO_Init+0x330>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003502:	4a5a      	ldr	r2, [pc, #360]	@ (800366c <HAL_GPIO_Init+0x334>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x242>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4f      	ldr	r2, [pc, #316]	@ (8003670 <HAL_GPIO_Init+0x338>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x23e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4e      	ldr	r2, [pc, #312]	@ (8003674 <HAL_GPIO_Init+0x33c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x23a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4d      	ldr	r2, [pc, #308]	@ (8003678 <HAL_GPIO_Init+0x340>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x236>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4c      	ldr	r2, [pc, #304]	@ (800367c <HAL_GPIO_Init+0x344>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x232>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4b      	ldr	r2, [pc, #300]	@ (8003680 <HAL_GPIO_Init+0x348>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x22e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4a      	ldr	r2, [pc, #296]	@ (8003684 <HAL_GPIO_Init+0x34c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x22a>
 800355e:	2306      	movs	r3, #6
 8003560:	e00c      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003562:	2307      	movs	r3, #7
 8003564:	e00a      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003566:	2305      	movs	r3, #5
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x244>
 800356a:	2304      	movs	r3, #4
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x244>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x244>
 800357a:	2300      	movs	r3, #0
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358c:	4937      	ldr	r1, [pc, #220]	@ (800366c <HAL_GPIO_Init+0x334>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800359a:	4b3b      	ldr	r3, [pc, #236]	@ (8003688 <HAL_GPIO_Init+0x350>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035be:	4a32      	ldr	r2, [pc, #200]	@ (8003688 <HAL_GPIO_Init+0x350>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c4:	4b30      	ldr	r3, [pc, #192]	@ (8003688 <HAL_GPIO_Init+0x350>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e8:	4a27      	ldr	r2, [pc, #156]	@ (8003688 <HAL_GPIO_Init+0x350>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ee:	4b26      	ldr	r3, [pc, #152]	@ (8003688 <HAL_GPIO_Init+0x350>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003612:	4a1d      	ldr	r2, [pc, #116]	@ (8003688 <HAL_GPIO_Init+0x350>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_GPIO_Init+0x350>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363c:	4a12      	ldr	r2, [pc, #72]	@ (8003688 <HAL_GPIO_Init+0x350>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	f47f ae78 	bne.w	8003348 <HAL_GPIO_Init+0x10>
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	48001000 	.word	0x48001000
 8003680:	48001400 	.word	0x48001400
 8003684:	48001800 	.word	0x48001800
 8003688:	40010400 	.word	0x40010400

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43d9      	mvns	r1, r3
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	400b      	ands	r3, r1
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e08d      	b.n	800381e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fd8e 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	@ 0x24
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003740:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003750:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e006      	b.n	8003778 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003776:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d108      	bne.n	8003792 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	e007      	b.n	80037a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	d138      	bne.n	80038ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003846:	2302      	movs	r3, #2
 8003848:	e032      	b.n	80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2224      	movs	r2, #36	@ 0x24
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003878:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d139      	bne.n	8003946 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038dc:	2302      	movs	r3, #2
 80038de:	e033      	b.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800390e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <HAL_PWREx_GetVoltageRange+0x18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40007000 	.word	0x40007000

08003970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397e:	d130      	bne.n	80039e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003980:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800398c:	d038      	beq.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800398e:	4b20      	ldr	r3, [pc, #128]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003996:	4a1e      	ldr	r2, [pc, #120]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003998:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800399e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2232      	movs	r2, #50	@ 0x32
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0c9b      	lsrs	r3, r3, #18
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b4:	e002      	b.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c8:	d102      	bne.n	80039d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f2      	bne.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039dc:	d110      	bne.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e00f      	b.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ee:	d007      	beq.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039f8:	4a05      	ldr	r2, [pc, #20]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40007000 	.word	0x40007000
 8003a14:	20000000 	.word	0x20000000
 8003a18:	431bde83 	.word	0x431bde83

08003a1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e3ca      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2e:	4b97      	ldr	r3, [pc, #604]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a38:	4b94      	ldr	r3, [pc, #592]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80e4 	beq.w	8003c18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4a>
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b0c      	cmp	r3, #12
 8003a5a:	f040 808b 	bne.w	8003b74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f040 8087 	bne.w	8003b74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a66:	4b89      	ldr	r3, [pc, #548]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e3a2      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	4b82      	ldr	r3, [pc, #520]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_RCC_OscConfig+0x7c>
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_OscConfig+0x88>
 8003a98:	4b7c      	ldr	r3, [pc, #496]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d223      	bcs.n	8003af0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fd55 	bl	800455c <RCC_SetFlashLatencyFromMSIRange>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e383      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003abc:	4b73      	ldr	r3, [pc, #460]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a72      	ldr	r2, [pc, #456]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b70      	ldr	r3, [pc, #448]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	496d      	ldr	r1, [pc, #436]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ada:	4b6c      	ldr	r3, [pc, #432]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	4968      	ldr	r1, [pc, #416]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 8003aee:	e025      	b.n	8003b3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af0:	4b66      	ldr	r3, [pc, #408]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a65      	ldr	r2, [pc, #404]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003af6:	f043 0308 	orr.w	r3, r3, #8
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b63      	ldr	r3, [pc, #396]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4960      	ldr	r1, [pc, #384]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	495b      	ldr	r1, [pc, #364]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fd15 	bl	800455c <RCC_SetFlashLatencyFromMSIRange>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e343      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3c:	f000 fc4a 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b52      	ldr	r3, [pc, #328]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4950      	ldr	r1, [pc, #320]	@ (8003c90 <HAL_RCC_OscConfig+0x274>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	4a4e      	ldr	r2, [pc, #312]	@ (8003c94 <HAL_RCC_OscConfig+0x278>)
 8003b5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fecd 	bl	8001900 <HAL_InitTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d052      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	e327      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d032      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b7c:	4b43      	ldr	r3, [pc, #268]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a42      	ldr	r2, [pc, #264]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b88:	f7fd ff0a 	bl	80019a0 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b90:	f7fd ff06 	bl	80019a0 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e310      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bae:	4b37      	ldr	r3, [pc, #220]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a36      	ldr	r2, [pc, #216]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bb4:	f043 0308 	orr.w	r3, r3, #8
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b34      	ldr	r3, [pc, #208]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4931      	ldr	r1, [pc, #196]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	492c      	ldr	r1, [pc, #176]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
 8003be0:	e01a      	b.n	8003c18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003be2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a29      	ldr	r2, [pc, #164]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bee:	f7fd fed7 	bl	80019a0 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fed3 	bl	80019a0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e2dd      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c08:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x1da>
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d074      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x21a>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d10e      	bne.n	8003c4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c36:	4b15      	ldr	r3, [pc, #84]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d064      	beq.n	8003d0c <HAL_RCC_OscConfig+0x2f0>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d160      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e2ba      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x24a>
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	e026      	b.n	8003cb4 <HAL_RCC_OscConfig+0x298>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c6e:	d115      	bne.n	8003c9c <HAL_RCC_OscConfig+0x280>
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a05      	ldr	r2, [pc, #20]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b03      	ldr	r3, [pc, #12]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a02      	ldr	r2, [pc, #8]	@ (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e014      	b.n	8003cb4 <HAL_RCC_OscConfig+0x298>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08008194 	.word	0x08008194
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a9f      	ldr	r2, [pc, #636]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	4b9d      	ldr	r3, [pc, #628]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a9c      	ldr	r2, [pc, #624]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fe70 	bl	80019a0 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fe6c 	bl	80019a0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e276      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd6:	4b92      	ldr	r3, [pc, #584]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x2a8>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fe5c 	bl	80019a0 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fd fe58 	bl	80019a0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	@ 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e262      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cfe:	4b88      	ldr	r3, [pc, #544]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x2d0>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d060      	beq.n	8003ddc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_OscConfig+0x310>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b0c      	cmp	r3, #12
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d116      	bne.n	8003d5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_OscConfig+0x328>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e23f      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d44:	4b76      	ldr	r3, [pc, #472]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	4973      	ldr	r1, [pc, #460]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d58:	e040      	b.n	8003ddc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d023      	beq.n	8003daa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d62:	4b6f      	ldr	r3, [pc, #444]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6e      	ldr	r2, [pc, #440]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fe17 	bl	80019a0 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd fe13 	bl	80019a0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e21d      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d88:	4b65      	ldr	r3, [pc, #404]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4b62      	ldr	r3, [pc, #392]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	495f      	ldr	r1, [pc, #380]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
 8003da8:	e018      	b.n	8003ddc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003daa:	4b5d      	ldr	r3, [pc, #372]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5c      	ldr	r2, [pc, #368]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd fdf3 	bl	80019a0 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fdef 	bl	80019a0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1f9      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd0:	4b53      	ldr	r3, [pc, #332]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d03c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01c      	beq.n	8003e2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df6:	4a4a      	ldr	r2, [pc, #296]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fd fdce 	bl	80019a0 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fd fdca 	bl	80019a0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e1d4      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e1a:	4b41      	ldr	r3, [pc, #260]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0ef      	beq.n	8003e08 <HAL_RCC_OscConfig+0x3ec>
 8003e28:	e01b      	b.n	8003e62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e30:	4a3b      	ldr	r2, [pc, #236]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fdb1 	bl	80019a0 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fd fdad 	bl	80019a0 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1b7      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e54:	4b32      	ldr	r3, [pc, #200]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ef      	bne.n	8003e42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80a6 	beq.w	8003fbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e74:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b27      	ldr	r3, [pc, #156]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	4a26      	ldr	r2, [pc, #152]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e8c:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9c:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <HAL_RCC_OscConfig+0x508>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d118      	bne.n	8003eda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_RCC_OscConfig+0x508>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <HAL_RCC_OscConfig+0x508>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb4:	f7fd fd74 	bl	80019a0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebc:	f7fd fd70 	bl	80019a0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e17a      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ece:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_RCC_OscConfig+0x508>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x4d8>
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ef2:	e029      	b.n	8003f48 <HAL_RCC_OscConfig+0x52c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d115      	bne.n	8003f28 <HAL_RCC_OscConfig+0x50c>
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	4a07      	ldr	r2, [pc, #28]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f0c:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f12:	4a03      	ldr	r2, [pc, #12]	@ (8003f20 <HAL_RCC_OscConfig+0x504>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f1c:	e014      	b.n	8003f48 <HAL_RCC_OscConfig+0x52c>
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40007000 	.word	0x40007000
 8003f28:	4b9c      	ldr	r3, [pc, #624]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	4a9b      	ldr	r2, [pc, #620]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f38:	4b98      	ldr	r3, [pc, #608]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	4a97      	ldr	r2, [pc, #604]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d016      	beq.n	8003f7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fd fd26 	bl	80019a0 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fd fd22 	bl	80019a0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e12a      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0ed      	beq.n	8003f58 <HAL_RCC_OscConfig+0x53c>
 8003f7c:	e015      	b.n	8003faa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fd0f 	bl	80019a0 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fd fd0b 	bl	80019a0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e113      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f9c:	4b7f      	ldr	r3, [pc, #508]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ed      	bne.n	8003f86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b7a      	ldr	r3, [pc, #488]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	4a79      	ldr	r2, [pc, #484]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80fe 	beq.w	80041c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	f040 80d0 	bne.w	8004170 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fd0:	4b72      	ldr	r3, [pc, #456]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0203 	and.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d130      	bne.n	8004046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d127      	bne.n	8004046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004000:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d11f      	bne.n	8004046 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004010:	2a07      	cmp	r2, #7
 8004012:	bf14      	ite	ne
 8004014:	2201      	movne	r2, #1
 8004016:	2200      	moveq	r2, #0
 8004018:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401a:	4293      	cmp	r3, r2
 800401c:	d113      	bne.n	8004046 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d109      	bne.n	8004046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	3b01      	subs	r3, #1
 8004040:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004042:	429a      	cmp	r2, r3
 8004044:	d06e      	beq.n	8004124 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d069      	beq.n	8004120 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800404c:	4b53      	ldr	r3, [pc, #332]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004058:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0ad      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004068:	4b4c      	ldr	r3, [pc, #304]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a4b      	ldr	r2, [pc, #300]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004074:	f7fd fc94 	bl	80019a0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd fc90 	bl	80019a0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e09a      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408e:	4b43      	ldr	r3, [pc, #268]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800409a:	4b40      	ldr	r3, [pc, #256]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	4b40      	ldr	r3, [pc, #256]	@ (80041a0 <HAL_RCC_OscConfig+0x784>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040b4:	0212      	lsls	r2, r2, #8
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040bc:	0852      	lsrs	r2, r2, #1
 80040be:	3a01      	subs	r2, #1
 80040c0:	0552      	lsls	r2, r2, #21
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040c8:	0852      	lsrs	r2, r2, #1
 80040ca:	3a01      	subs	r2, #1
 80040cc:	0652      	lsls	r2, r2, #25
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040d4:	0912      	lsrs	r2, r2, #4
 80040d6:	0452      	lsls	r2, r2, #17
 80040d8:	430a      	orrs	r2, r1
 80040da:	4930      	ldr	r1, [pc, #192]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e0:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2d      	ldr	r2, [pc, #180]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ec:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040f8:	f7fd fc52 	bl	80019a0 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd fc4e 	bl	80019a0 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e058      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004112:	4b22      	ldr	r3, [pc, #136]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411e:	e050      	b.n	80041c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04f      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004124:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d148      	bne.n	80041c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004130:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a19      	ldr	r2, [pc, #100]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800413a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800413c:	4b17      	ldr	r3, [pc, #92]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a16      	ldr	r2, [pc, #88]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004142:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004148:	f7fd fc2a 	bl	80019a0 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004150:	f7fd fc26 	bl	80019a0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e030      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004162:	4b0e      	ldr	r3, [pc, #56]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x734>
 800416e:	e028      	b.n	80041c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d023      	beq.n	80041be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004176:	4b09      	ldr	r3, [pc, #36]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a08      	ldr	r2, [pc, #32]	@ (800419c <HAL_RCC_OscConfig+0x780>)
 800417c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7fd fc0d 	bl	80019a0 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004188:	e00c      	b.n	80041a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418a:	f7fd fc09 	bl	80019a0 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d905      	bls.n	80041a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e013      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
 800419c:	40021000 	.word	0x40021000
 80041a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_OscConfig+0x7b0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ec      	bne.n	800418a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCC_OscConfig+0x7b0>)
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4905      	ldr	r1, [pc, #20]	@ (80041cc <HAL_RCC_OscConfig+0x7b0>)
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x7b4>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
 80041bc:	e001      	b.n	80041c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	feeefffc 	.word	0xfeeefffc

080041d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0e7      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b75      	ldr	r3, [pc, #468]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d910      	bls.n	8004218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b72      	ldr	r3, [pc, #456]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 0207 	bic.w	r2, r3, #7
 80041fe:	4970      	ldr	r1, [pc, #448]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b6e      	ldr	r3, [pc, #440]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0cf      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004230:	429a      	cmp	r2, r3
 8004232:	d908      	bls.n	8004246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b63      	ldr	r3, [pc, #396]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4960      	ldr	r1, [pc, #384]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04c      	beq.n	80042ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	4b5a      	ldr	r3, [pc, #360]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d121      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0a6      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	4b54      	ldr	r3, [pc, #336]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e09a      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800428a:	4b4e      	ldr	r3, [pc, #312]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e08e      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e086      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b46      	ldr	r3, [pc, #280]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4943      	ldr	r1, [pc, #268]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042bc:	f7fd fb70 	bl	80019a0 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fd fb6c 	bl	80019a0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e06e      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b3a      	ldr	r3, [pc, #232]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004304:	429a      	cmp	r2, r3
 8004306:	d208      	bcs.n	800431a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b2e      	ldr	r3, [pc, #184]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	492b      	ldr	r1, [pc, #172]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431a:	4b29      	ldr	r3, [pc, #164]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d210      	bcs.n	800434a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004328:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 0207 	bic.w	r2, r3, #7
 8004330:	4923      	ldr	r1, [pc, #140]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004338:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <HAL_RCC_ClockConfig+0x1ec>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e036      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4918      	ldr	r1, [pc, #96]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004374:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4910      	ldr	r1, [pc, #64]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004388:	f000 f824 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	490b      	ldr	r1, [pc, #44]	@ (80043c8 <HAL_RCC_ClockConfig+0x1f4>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <HAL_RCC_ClockConfig+0x1f8>)
 80043a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043a8:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <HAL_RCC_ClockConfig+0x1fc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fd faa7 	bl	8001900 <HAL_InitTick>
 80043b2:	4603      	mov	r3, r0
 80043b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80043b6:	7afb      	ldrb	r3, [r7, #11]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40022000 	.word	0x40022000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	08008194 	.word	0x08008194
 80043cc:	20000000 	.word	0x20000000
 80043d0:	20000004 	.word	0x20000004

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e2:	4b3e      	ldr	r3, [pc, #248]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ec:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d121      	bne.n	8004446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d11e      	bne.n	8004446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004408:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004414:	4b31      	ldr	r3, [pc, #196]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e005      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004424:	4b2d      	ldr	r3, [pc, #180]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004430:	4a2b      	ldr	r2, [pc, #172]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10d      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004444:	e00a      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b04      	cmp	r3, #4
 800444a:	d102      	bne.n	8004452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800444c:	4b25      	ldr	r3, [pc, #148]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e004      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d101      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004458:	4b23      	ldr	r3, [pc, #140]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800445a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d134      	bne.n	80044cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d003      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0xa6>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d003      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0xac>
 8004478:	e005      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800447c:	617b      	str	r3, [r7, #20]
      break;
 800447e:	e005      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004480:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004482:	617b      	str	r3, [r7, #20]
      break;
 8004484:	e002      	b.n	800448c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	617b      	str	r3, [r7, #20]
      break;
 800448a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800448c:	4b13      	ldr	r3, [pc, #76]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	3301      	adds	r3, #1
 8004498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	fb03 f202 	mul.w	r2, r3, r2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x108>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	0e5b      	lsrs	r3, r3, #25
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	3301      	adds	r3, #1
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	080081ac 	.word	0x080081ac
 80044e4:	00f42400 	.word	0x00f42400
 80044e8:	007a1200 	.word	0x007a1200

080044ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f0:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000000 	.word	0x20000000

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004508:	f7ff fff0 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4904      	ldr	r1, [pc, #16]	@ (800452c <HAL_RCC_GetPCLK1Freq+0x28>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	080081a4 	.word	0x080081a4

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004534:	f7ff ffda 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0adb      	lsrs	r3, r3, #11
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4904      	ldr	r1, [pc, #16]	@ (8004558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	080081a4 	.word	0x080081a4

0800455c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004568:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004574:	f7ff f9ee 	bl	8003954 <HAL_PWREx_GetVoltageRange>
 8004578:	6178      	str	r0, [r7, #20]
 800457a:	e014      	b.n	80045a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004586:	6593      	str	r3, [r2, #88]	@ 0x58
 8004588:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004594:	f7ff f9de 	bl	8003954 <HAL_PWREx_GetVoltageRange>
 8004598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459e:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ac:	d10b      	bne.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b80      	cmp	r3, #128	@ 0x80
 80045b2:	d919      	bls.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80045b8:	d902      	bls.n	80045c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ba:	2302      	movs	r3, #2
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e013      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c0:	2301      	movs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e010      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b80      	cmp	r3, #128	@ 0x80
 80045ca:	d902      	bls.n	80045d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045cc:	2303      	movs	r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e00a      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	d102      	bne.n	80045de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045d8:	2302      	movs	r3, #2
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	e004      	b.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b70      	cmp	r3, #112	@ 0x70
 80045e2:	d101      	bne.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e4:	2301      	movs	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 0207 	bic.w	r2, r3, #7
 80045f0:	4909      	ldr	r1, [pc, #36]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045f8:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	d001      	beq.n	800460a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	40022000 	.word	0x40022000

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004624:	2300      	movs	r3, #0
 8004626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004628:	2300      	movs	r3, #0
 800462a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004634:	2b00      	cmp	r3, #0
 8004636:	d041      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004640:	d02a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004642:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004646:	d824      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004648:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800464c:	d008      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800464e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004652:	d81e      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800465c:	d010      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800465e:	e018      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004660:	4b86      	ldr	r3, [pc, #536]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a85      	ldr	r2, [pc, #532]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466c:	e015      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fabb 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800467e:	e00c      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3320      	adds	r3, #32
 8004684:	2100      	movs	r1, #0
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fba6 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	74fb      	strb	r3, [r7, #19]
      break;
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a0:	4b76      	ldr	r3, [pc, #472]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ae:	4973      	ldr	r1, [pc, #460]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046b6:	e001      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d041      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046d0:	d02a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046d6:	d824      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046e2:	d81e      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ec:	d010      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ee:	e018      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046f0:	4b62      	ldr	r3, [pc, #392]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a61      	ldr	r2, [pc, #388]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fc:	e015      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fa73 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800470e:	e00c      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3320      	adds	r3, #32
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fb5e 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004720:	e003      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	74fb      	strb	r3, [r7, #19]
      break;
 8004726:	e000      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004730:	4b52      	ldr	r3, [pc, #328]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800473e:	494f      	ldr	r1, [pc, #316]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004746:	e001      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80a0 	beq.w	800489a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800475e:	4b47      	ldr	r3, [pc, #284]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b41      	ldr	r3, [pc, #260]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	4a40      	ldr	r2, [pc, #256]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004780:	4b3e      	ldr	r3, [pc, #248]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004790:	4b3b      	ldr	r3, [pc, #236]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a3a      	ldr	r2, [pc, #232]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800479a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800479c:	f7fd f900 	bl	80019a0 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a2:	e009      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fd f8fc 	bl	80019a0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	74fb      	strb	r3, [r7, #19]
        break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047b8:	4b31      	ldr	r3, [pc, #196]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d15c      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ca:	4b2c      	ldr	r3, [pc, #176]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01f      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d019      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f4:	4b21      	ldr	r3, [pc, #132]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	4a20      	ldr	r2, [pc, #128]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004804:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	4a1c      	ldr	r2, [pc, #112]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004814:	4a19      	ldr	r2, [pc, #100]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fd f8bb 	bl	80019a0 <HAL_GetTick>
 800482a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482c:	e00b      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fd f8b7 	bl	80019a0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d902      	bls.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	74fb      	strb	r3, [r7, #19]
            break;
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ec      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10c      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800485a:	4b08      	ldr	r3, [pc, #32]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486a:	4904      	ldr	r1, [pc, #16]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004872:	e009      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	74bb      	strb	r3, [r7, #18]
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004888:	7c7b      	ldrb	r3, [r7, #17]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488e:	4b9e      	ldr	r3, [pc, #632]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004892:	4a9d      	ldr	r2, [pc, #628]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004898:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a6:	4b98      	ldr	r3, [pc, #608]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f023 0203 	bic.w	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	4994      	ldr	r1, [pc, #592]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f023 020c 	bic.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	498c      	ldr	r1, [pc, #560]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ea:	4b87      	ldr	r3, [pc, #540]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	4983      	ldr	r1, [pc, #524]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800490c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	497b      	ldr	r1, [pc, #492]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800492e:	4b76      	ldr	r3, [pc, #472]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493c:	4972      	ldr	r1, [pc, #456]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004950:	4b6d      	ldr	r3, [pc, #436]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495e:	496a      	ldr	r1, [pc, #424]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004972:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004980:	4961      	ldr	r1, [pc, #388]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004994:	4b5c      	ldr	r3, [pc, #368]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a2:	4959      	ldr	r1, [pc, #356]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b6:	4b54      	ldr	r3, [pc, #336]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c4:	4950      	ldr	r1, [pc, #320]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e6:	4948      	ldr	r1, [pc, #288]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049fa:	4b43      	ldr	r3, [pc, #268]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	493f      	ldr	r1, [pc, #252]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d028      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a2a:	4937      	ldr	r1, [pc, #220]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3c:	4b32      	ldr	r3, [pc, #200]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a31      	ldr	r2, [pc, #196]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a46:	60d3      	str	r3, [r2, #12]
 8004a48:	e011      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a52:	d10c      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f8c8 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a6a:	7cfb      	ldrb	r3, [r7, #19]
 8004a6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d028      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a7a:	4b23      	ldr	r3, [pc, #140]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	491f      	ldr	r1, [pc, #124]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aa4:	60d3      	str	r3, [r2, #12]
 8004aa6:	e011      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f899 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02b      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae6:	4908      	ldr	r1, [pc, #32]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004af6:	d109      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af8:	4b03      	ldr	r3, [pc, #12]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a02      	ldr	r2, [pc, #8]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
 8004b04:	e014      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f867 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d02f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b4a:	4928      	ldr	r1, [pc, #160]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	2102      	movs	r1, #2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f844 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d014      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	74bb      	strb	r3, [r7, #18]
 8004b76:	e011      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3320      	adds	r3, #32
 8004b86:	2102      	movs	r1, #2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f925 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ba8:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb6:	490d      	ldr	r1, [pc, #52]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bca:	4b08      	ldr	r3, [pc, #32]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bda:	4904      	ldr	r1, [pc, #16]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004be2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000

08004bf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bfe:	4b75      	ldr	r3, [pc, #468]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c0a:	4b72      	ldr	r3, [pc, #456]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0203 	and.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10d      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c22:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
       ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d047      	beq.n	8004cc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	e044      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d018      	beq.n	8004c76 <RCCEx_PLLSAI1_Config+0x86>
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d825      	bhi.n	8004c94 <RCCEx_PLLSAI1_Config+0xa4>
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d002      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0x62>
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d009      	beq.n	8004c64 <RCCEx_PLLSAI1_Config+0x74>
 8004c50:	e020      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c52:	4b60      	ldr	r3, [pc, #384]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11d      	bne.n	8004c9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c62:	e01a      	b.n	8004c9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c64:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d116      	bne.n	8004c9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c74:	e013      	b.n	8004c9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c76:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c82:	4b54      	ldr	r3, [pc, #336]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c92:	e006      	b.n	8004ca2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e004      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e002      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e000      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ca2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	4944      	ldr	r1, [pc, #272]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d17d      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ccc:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a40      	ldr	r2, [pc, #256]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd8:	f7fc fe62 	bl	80019a0 <HAL_GetTick>
 8004cdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cde:	e009      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce0:	f7fc fe5e 	bl	80019a0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d902      	bls.n	8004cf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf2:	e005      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cf4:	4b37      	ldr	r3, [pc, #220]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ef      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d160      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d111      	bne.n	8004d30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0c:	4b31      	ldr	r3, [pc, #196]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	0211      	lsls	r1, r2, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68d2      	ldr	r2, [r2, #12]
 8004d22:	0912      	lsrs	r2, r2, #4
 8004d24:	0452      	lsls	r2, r2, #17
 8004d26:	430a      	orrs	r2, r1
 8004d28:	492a      	ldr	r1, [pc, #168]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	610b      	str	r3, [r1, #16]
 8004d2e:	e027      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d112      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d36:	4b27      	ldr	r3, [pc, #156]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6892      	ldr	r2, [r2, #8]
 8004d46:	0211      	lsls	r1, r2, #8
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6912      	ldr	r2, [r2, #16]
 8004d4c:	0852      	lsrs	r2, r2, #1
 8004d4e:	3a01      	subs	r2, #1
 8004d50:	0552      	lsls	r2, r2, #21
 8004d52:	430a      	orrs	r2, r1
 8004d54:	491f      	ldr	r1, [pc, #124]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]
 8004d5a:	e011      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6892      	ldr	r2, [r2, #8]
 8004d6c:	0211      	lsls	r1, r2, #8
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6952      	ldr	r2, [r2, #20]
 8004d72:	0852      	lsrs	r2, r2, #1
 8004d74:	3a01      	subs	r2, #1
 8004d76:	0652      	lsls	r2, r2, #25
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	4916      	ldr	r1, [pc, #88]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d80:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a13      	ldr	r2, [pc, #76]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fc fe08 	bl	80019a0 <HAL_GetTick>
 8004d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d92:	e009      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d94:	f7fc fe04 	bl	80019a0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d902      	bls.n	8004da8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	73fb      	strb	r3, [r7, #15]
          break;
 8004da6:	e005      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ef      	beq.n	8004d94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	4904      	ldr	r1, [pc, #16]	@ (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004de6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004df2:	4b67      	ldr	r3, [pc, #412]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0203 	and.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
       ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e0a:	4b61      	ldr	r3, [pc, #388]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d047      	beq.n	8004eae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e044      	b.n	8004eae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d018      	beq.n	8004e5e <RCCEx_PLLSAI2_Config+0x86>
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d825      	bhi.n	8004e7c <RCCEx_PLLSAI2_Config+0xa4>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d002      	beq.n	8004e3a <RCCEx_PLLSAI2_Config+0x62>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d009      	beq.n	8004e4c <RCCEx_PLLSAI2_Config+0x74>
 8004e38:	e020      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3a:	4b55      	ldr	r3, [pc, #340]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d11d      	bne.n	8004e82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4a:	e01a      	b.n	8004e82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e4c:	4b50      	ldr	r3, [pc, #320]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e013      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6a:	4b49      	ldr	r3, [pc, #292]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7a:	e006      	b.n	8004e8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e80:	e004      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10d      	bne.n	8004eae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e92:	4b3f      	ldr	r3, [pc, #252]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	4939      	ldr	r1, [pc, #228]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d167      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004eb4:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a35      	ldr	r2, [pc, #212]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fc fd6e 	bl	80019a0 <HAL_GetTick>
 8004ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec6:	e009      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec8:	f7fc fd6a 	bl	80019a0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d902      	bls.n	8004edc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eda:	e005      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004edc:	4b2c      	ldr	r3, [pc, #176]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ef      	bne.n	8004ec8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d14a      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d111      	bne.n	8004f18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ef4:	4b26      	ldr	r3, [pc, #152]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6892      	ldr	r2, [r2, #8]
 8004f04:	0211      	lsls	r1, r2, #8
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68d2      	ldr	r2, [r2, #12]
 8004f0a:	0912      	lsrs	r2, r2, #4
 8004f0c:	0452      	lsls	r2, r2, #17
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	491f      	ldr	r1, [pc, #124]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	614b      	str	r3, [r1, #20]
 8004f16:	e011      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6892      	ldr	r2, [r2, #8]
 8004f28:	0211      	lsls	r1, r2, #8
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6912      	ldr	r2, [r2, #16]
 8004f2e:	0852      	lsrs	r2, r2, #1
 8004f30:	3a01      	subs	r2, #1
 8004f32:	0652      	lsls	r2, r2, #25
 8004f34:	430a      	orrs	r2, r1
 8004f36:	4916      	ldr	r1, [pc, #88]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f3c:	4b14      	ldr	r3, [pc, #80]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a13      	ldr	r2, [pc, #76]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fc fd2a 	bl	80019a0 <HAL_GetTick>
 8004f4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f4e:	e009      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f50:	f7fc fd26 	bl	80019a0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	73fb      	strb	r3, [r7, #15]
          break;
 8004f62:	e005      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f64:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ef      	beq.n	8004f50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f76:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e049      	b.n	800503a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fc f9ce 	bl	800135c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f000 fb3c 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e049      	b.n	80050e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fc f943 	bl	80012f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fae5 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <HAL_TIM_PWM_Start+0x24>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e03c      	b.n	800518e <HAL_TIM_PWM_Start+0x9e>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b04      	cmp	r3, #4
 8005118:	d109      	bne.n	800512e <HAL_TIM_PWM_Start+0x3e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e02f      	b.n	800518e <HAL_TIM_PWM_Start+0x9e>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d109      	bne.n	8005148 <HAL_TIM_PWM_Start+0x58>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e022      	b.n	800518e <HAL_TIM_PWM_Start+0x9e>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d109      	bne.n	8005162 <HAL_TIM_PWM_Start+0x72>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e015      	b.n	800518e <HAL_TIM_PWM_Start+0x9e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b10      	cmp	r3, #16
 8005166:	d109      	bne.n	800517c <HAL_TIM_PWM_Start+0x8c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e008      	b.n	800518e <HAL_TIM_PWM_Start+0x9e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e09c      	b.n	80052d0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xb6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a4:	e023      	b.n	80051ee <HAL_TIM_PWM_Start+0xfe>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xc6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b4:	e01b      	b.n	80051ee <HAL_TIM_PWM_Start+0xfe>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xd6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c4:	e013      	b.n	80051ee <HAL_TIM_PWM_Start+0xfe>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xe6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051d4:	e00b      	b.n	80051ee <HAL_TIM_PWM_Start+0xfe>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xf6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e4:	e003      	b.n	80051ee <HAL_TIM_PWM_Start+0xfe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fd9a 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a35      	ldr	r2, [pc, #212]	@ (80052d8 <HAL_TIM_PWM_Start+0x1e8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIM_PWM_Start+0x13e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a34      	ldr	r2, [pc, #208]	@ (80052dc <HAL_TIM_PWM_Start+0x1ec>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIM_PWM_Start+0x13e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <HAL_TIM_PWM_Start+0x1f0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIM_PWM_Start+0x13e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a31      	ldr	r2, [pc, #196]	@ (80052e4 <HAL_TIM_PWM_Start+0x1f4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIM_PWM_Start+0x13e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2f      	ldr	r2, [pc, #188]	@ (80052e8 <HAL_TIM_PWM_Start+0x1f8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <HAL_TIM_PWM_Start+0x142>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_TIM_PWM_Start+0x144>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <HAL_TIM_PWM_Start+0x1e8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_TIM_PWM_Start+0x19e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525a:	d018      	beq.n	800528e <HAL_TIM_PWM_Start+0x19e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a22      	ldr	r2, [pc, #136]	@ (80052ec <HAL_TIM_PWM_Start+0x1fc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_TIM_PWM_Start+0x19e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a21      	ldr	r2, [pc, #132]	@ (80052f0 <HAL_TIM_PWM_Start+0x200>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_TIM_PWM_Start+0x19e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <HAL_TIM_PWM_Start+0x204>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_TIM_PWM_Start+0x19e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a17      	ldr	r2, [pc, #92]	@ (80052dc <HAL_TIM_PWM_Start+0x1ec>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_TIM_PWM_Start+0x19e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <HAL_TIM_PWM_Start+0x1f0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d115      	bne.n	80052ba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <HAL_TIM_PWM_Start+0x208>)
 8005296:	4013      	ands	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d015      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1dc>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a6:	d011      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	e008      	b.n	80052cc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e000      	b.n	80052ce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	00010007 	.word	0x00010007

080052fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fd0e 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3e      	ldr	r2, [pc, #248]	@ (8005414 <HAL_TIM_PWM_Stop+0x118>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_TIM_PWM_Stop+0x4a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3d      	ldr	r2, [pc, #244]	@ (8005418 <HAL_TIM_PWM_Stop+0x11c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_TIM_PWM_Stop+0x4a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3b      	ldr	r2, [pc, #236]	@ (800541c <HAL_TIM_PWM_Stop+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_TIM_PWM_Stop+0x4a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a3a      	ldr	r2, [pc, #232]	@ (8005420 <HAL_TIM_PWM_Stop+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIM_PWM_Stop+0x4a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a38      	ldr	r2, [pc, #224]	@ (8005424 <HAL_TIM_PWM_Stop+0x128>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_TIM_PWM_Stop+0x4e>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_TIM_PWM_Stop+0x50>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d017      	beq.n	8005380 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	f241 1311 	movw	r3, #4369	@ 0x1111
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10f      	bne.n	8005380 <HAL_TIM_PWM_Stop+0x84>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	f240 4344 	movw	r3, #1092	@ 0x444
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <HAL_TIM_PWM_Stop+0x84>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800537e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	f241 1311 	movw	r3, #4369	@ 0x1111
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10f      	bne.n	80053b0 <HAL_TIM_PWM_Stop+0xb4>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	f240 4344 	movw	r3, #1092	@ 0x444
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_PWM_Stop+0xb4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <HAL_TIM_PWM_Stop+0xc4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053be:	e023      	b.n	8005408 <HAL_TIM_PWM_Stop+0x10c>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d104      	bne.n	80053d0 <HAL_TIM_PWM_Stop+0xd4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ce:	e01b      	b.n	8005408 <HAL_TIM_PWM_Stop+0x10c>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d104      	bne.n	80053e0 <HAL_TIM_PWM_Stop+0xe4>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053de:	e013      	b.n	8005408 <HAL_TIM_PWM_Stop+0x10c>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_PWM_Stop+0xf4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ee:	e00b      	b.n	8005408 <HAL_TIM_PWM_Stop+0x10c>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d104      	bne.n	8005400 <HAL_TIM_PWM_Stop+0x104>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053fe:	e003      	b.n	8005408 <HAL_TIM_PWM_Stop+0x10c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800

08005428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005442:	2302      	movs	r3, #2
 8005444:	e0ff      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b14      	cmp	r3, #20
 8005452:	f200 80f0 	bhi.w	8005636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005456:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	080054b1 	.word	0x080054b1
 8005460:	08005637 	.word	0x08005637
 8005464:	08005637 	.word	0x08005637
 8005468:	08005637 	.word	0x08005637
 800546c:	080054f1 	.word	0x080054f1
 8005470:	08005637 	.word	0x08005637
 8005474:	08005637 	.word	0x08005637
 8005478:	08005637 	.word	0x08005637
 800547c:	08005533 	.word	0x08005533
 8005480:	08005637 	.word	0x08005637
 8005484:	08005637 	.word	0x08005637
 8005488:	08005637 	.word	0x08005637
 800548c:	08005573 	.word	0x08005573
 8005490:	08005637 	.word	0x08005637
 8005494:	08005637 	.word	0x08005637
 8005498:	08005637 	.word	0x08005637
 800549c:	080055b5 	.word	0x080055b5
 80054a0:	08005637 	.word	0x08005637
 80054a4:	08005637 	.word	0x08005637
 80054a8:	08005637 	.word	0x08005637
 80054ac:	080055f5 	.word	0x080055f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f964 	bl	8005784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0208 	orr.w	r2, r2, #8
 80054ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6999      	ldr	r1, [r3, #24]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	619a      	str	r2, [r3, #24]
      break;
 80054ee:	e0a5      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f9d4 	bl	80058a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800550a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	619a      	str	r2, [r3, #24]
      break;
 8005530:	e084      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fa3d 	bl	80059b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0204 	bic.w	r2, r2, #4
 800555c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69d9      	ldr	r1, [r3, #28]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	61da      	str	r2, [r3, #28]
      break;
 8005570:	e064      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 faa5 	bl	8005ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800558c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	021a      	lsls	r2, r3, #8
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	61da      	str	r2, [r3, #28]
      break;
 80055b2:	e043      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 faee 	bl	8005b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0204 	bic.w	r2, r2, #4
 80055de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055f2:	e023      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb32 	bl	8005c64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800560e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005634:	e002      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
      break;
 800563a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop

08005650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a40      	ldr	r2, [pc, #256]	@ (8005764 <TIM_Base_SetConfig+0x114>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566e:	d00f      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3d      	ldr	r2, [pc, #244]	@ (8005768 <TIM_Base_SetConfig+0x118>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3c      	ldr	r2, [pc, #240]	@ (800576c <TIM_Base_SetConfig+0x11c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a3b      	ldr	r2, [pc, #236]	@ (8005770 <TIM_Base_SetConfig+0x120>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3a      	ldr	r2, [pc, #232]	@ (8005774 <TIM_Base_SetConfig+0x124>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005764 <TIM_Base_SetConfig+0x114>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01f      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b0:	d01b      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <TIM_Base_SetConfig+0x118>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d017      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2b      	ldr	r2, [pc, #172]	@ (800576c <TIM_Base_SetConfig+0x11c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <TIM_Base_SetConfig+0x120>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00f      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <TIM_Base_SetConfig+0x124>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00b      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <TIM_Base_SetConfig+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a27      	ldr	r2, [pc, #156]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0x9a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a26      	ldr	r2, [pc, #152]	@ (8005780 <TIM_Base_SetConfig+0x130>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d108      	bne.n	80056fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a10      	ldr	r2, [pc, #64]	@ (8005764 <TIM_Base_SetConfig+0x114>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00f      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a12      	ldr	r2, [pc, #72]	@ (8005774 <TIM_Base_SetConfig+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00b      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a11      	ldr	r2, [pc, #68]	@ (8005778 <TIM_Base_SetConfig+0x128>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a10      	ldr	r2, [pc, #64]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a0f      	ldr	r2, [pc, #60]	@ (8005780 <TIM_Base_SetConfig+0x130>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	615a      	str	r2, [r3, #20]
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0201 	bic.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a2c      	ldr	r2, [pc, #176]	@ (8005890 <TIM_OC1_SetConfig+0x10c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005894 <TIM_OC1_SetConfig+0x110>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005898 <TIM_OC1_SetConfig+0x114>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a29      	ldr	r2, [pc, #164]	@ (800589c <TIM_OC1_SetConfig+0x118>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC1_SetConfig+0x80>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a28      	ldr	r2, [pc, #160]	@ (80058a0 <TIM_OC1_SetConfig+0x11c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d10c      	bne.n	800581e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0308 	bic.w	r3, r3, #8
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1b      	ldr	r2, [pc, #108]	@ (8005890 <TIM_OC1_SetConfig+0x10c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00f      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <TIM_OC1_SetConfig+0x110>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a19      	ldr	r2, [pc, #100]	@ (8005898 <TIM_OC1_SetConfig+0x114>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a18      	ldr	r2, [pc, #96]	@ (800589c <TIM_OC1_SetConfig+0x118>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC1_SetConfig+0xc2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <TIM_OC1_SetConfig+0x11c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d111      	bne.n	800586a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40013400 	.word	0x40013400
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f023 0210 	bic.w	r2, r3, #16
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0320 	bic.w	r3, r3, #32
 80058f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a28      	ldr	r2, [pc, #160]	@ (80059a4 <TIM_OC2_SetConfig+0x100>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC2_SetConfig+0x6c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a27      	ldr	r2, [pc, #156]	@ (80059a8 <TIM_OC2_SetConfig+0x104>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10d      	bne.n	800592c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <TIM_OC2_SetConfig+0x100>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <TIM_OC2_SetConfig+0x104>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <TIM_OC2_SetConfig+0x108>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <TIM_OC2_SetConfig+0x10c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC2_SetConfig+0xb0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <TIM_OC2_SetConfig+0x110>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d113      	bne.n	800597c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800595a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800

080059b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a27      	ldr	r2, [pc, #156]	@ (8005ab4 <TIM_OC3_SetConfig+0xfc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0x6a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a26      	ldr	r2, [pc, #152]	@ (8005ab8 <TIM_OC3_SetConfig+0x100>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10d      	bne.n	8005a3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <TIM_OC3_SetConfig+0xfc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00f      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <TIM_OC3_SetConfig+0x100>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	@ (8005abc <TIM_OC3_SetConfig+0x104>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <TIM_OC3_SetConfig+0x108>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_OC3_SetConfig+0xae>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <TIM_OC3_SetConfig+0x10c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d113      	bne.n	8005a8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <TIM_OC4_SetConfig+0xc0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00f      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC4_SetConfig+0xc4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <TIM_OC4_SetConfig+0xc8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <TIM_OC4_SetConfig+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC4_SetConfig+0x84>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a14      	ldr	r2, [pc, #80]	@ (8005b98 <TIM_OC4_SetConfig+0xd0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d109      	bne.n	8005b60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	@ (8005c50 <TIM_OC5_SetConfig+0xb4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <TIM_OC5_SetConfig+0xb8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <TIM_OC5_SetConfig+0xbc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a14      	ldr	r2, [pc, #80]	@ (8005c5c <TIM_OC5_SetConfig+0xc0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a13      	ldr	r2, [pc, #76]	@ (8005c60 <TIM_OC5_SetConfig+0xc4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d109      	bne.n	8005c2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	051b      	lsls	r3, r3, #20
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a18      	ldr	r2, [pc, #96]	@ (8005d1c <TIM_OC6_SetConfig+0xb8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <TIM_OC6_SetConfig+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a16      	ldr	r2, [pc, #88]	@ (8005d24 <TIM_OC6_SetConfig+0xc0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <TIM_OC6_SetConfig+0xc4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <TIM_OC6_SetConfig+0xc8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d109      	bne.n	8005cf4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e068      	b.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005dce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01d      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e06:	d018      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a14      	ldr	r2, [pc, #80]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10c      	bne.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40014000 	.word	0x40014000

08005e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e065      	b.n	8005f74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a16      	ldr	r2, [pc, #88]	@ (8005f80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a14      	ldr	r2, [pc, #80]	@ (8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d115      	bne.n	8005f62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	051b      	lsls	r3, r3, #20
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40013400 	.word	0x40013400

08005f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e040      	b.n	800601c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb faaa 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	@ 0x24
 8005fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fc32 	bl	8006838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f977 	bl	80062c8 <UART_SetConfig>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e01b      	b.n	800601c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fcb1 	bl	800697c <UART_CheckIdleState>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006038:	2b20      	cmp	r3, #32
 800603a:	d177      	bne.n	800612c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Transmit+0x24>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e070      	b.n	800612e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	@ 0x21
 8006058:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800605a:	f7fb fca1 	bl	80019a0 <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006078:	d108      	bne.n	800608c <HAL_UART_Transmit+0x68>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	e003      	b.n	8006094 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006090:	2300      	movs	r3, #0
 8006092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006094:	e02f      	b.n	80060f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	@ 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fd13 	bl	8006acc <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e03b      	b.n	800612e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10b      	bne.n	80060d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	881a      	ldrh	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c8:	b292      	uxth	r2, r2
 80060ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3302      	adds	r3, #2
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	e007      	b.n	80060e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	781a      	ldrb	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3301      	adds	r3, #1
 80060e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c9      	bne.n	8006096 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	2140      	movs	r1, #64	@ 0x40
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fcdd 	bl	8006acc <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e005      	b.n	800612e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08a      	sub	sp, #40	@ 0x28
 800613a:	af02      	add	r7, sp, #8
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800614c:	2b20      	cmp	r3, #32
 800614e:	f040 80b6 	bne.w	80062be <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_UART_Receive+0x28>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e0ae      	b.n	80062c0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2222      	movs	r2, #34	@ 0x22
 800616e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006178:	f7fb fc12 	bl	80019a0 <HAL_GetTick>
 800617c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006196:	d10e      	bne.n	80061b6 <HAL_UART_Receive+0x80>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <HAL_UART_Receive+0x76>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061aa:	e02d      	b.n	8006208 <HAL_UART_Receive+0xd2>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	22ff      	movs	r2, #255	@ 0xff
 80061b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061b4:	e028      	b.n	8006208 <HAL_UART_Receive+0xd2>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <HAL_UART_Receive+0xa4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <HAL_UART_Receive+0x9a>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	22ff      	movs	r2, #255	@ 0xff
 80061ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ce:	e01b      	b.n	8006208 <HAL_UART_Receive+0xd2>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	227f      	movs	r2, #127	@ 0x7f
 80061d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061d8:	e016      	b.n	8006208 <HAL_UART_Receive+0xd2>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061e2:	d10d      	bne.n	8006200 <HAL_UART_Receive+0xca>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_UART_Receive+0xc0>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	227f      	movs	r2, #127	@ 0x7f
 80061f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061f4:	e008      	b.n	8006208 <HAL_UART_Receive+0xd2>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	223f      	movs	r2, #63	@ 0x3f
 80061fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061fe:	e003      	b.n	8006208 <HAL_UART_Receive+0xd2>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800620e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006218:	d108      	bne.n	800622c <HAL_UART_Receive+0xf6>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e003      	b.n	8006234 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006234:	e037      	b.n	80062a6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2200      	movs	r2, #0
 800623e:	2120      	movs	r1, #32
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fc43 	bl	8006acc <UART_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e033      	b.n	80062c0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10c      	bne.n	8006278 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006264:	b29a      	uxth	r2, r3
 8006266:	8a7b      	ldrh	r3, [r7, #18]
 8006268:	4013      	ands	r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	3302      	adds	r3, #2
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e00d      	b.n	8006294 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800627e:	b29b      	uxth	r3, r3
 8006280:	b2da      	uxtb	r2, r3
 8006282:	8a7b      	ldrh	r3, [r7, #18]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4013      	ands	r3, r2
 8006288:	b2da      	uxtb	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3301      	adds	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1c1      	bne.n	8006236 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e000      	b.n	80062c0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
  }
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062cc:	b08a      	sub	sp, #40	@ 0x28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4ba4      	ldr	r3, [pc, #656]	@ (8006588 <UART_SetConfig+0x2c0>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006300:	430b      	orrs	r3, r1
 8006302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a99      	ldr	r2, [pc, #612]	@ (800658c <UART_SetConfig+0x2c4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006330:	4313      	orrs	r3, r2
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006344:	430a      	orrs	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a90      	ldr	r2, [pc, #576]	@ (8006590 <UART_SetConfig+0x2c8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d126      	bne.n	80063a0 <UART_SetConfig+0xd8>
 8006352:	4b90      	ldr	r3, [pc, #576]	@ (8006594 <UART_SetConfig+0x2cc>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b03      	cmp	r3, #3
 800635e:	d81b      	bhi.n	8006398 <UART_SetConfig+0xd0>
 8006360:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <UART_SetConfig+0xa0>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	08006379 	.word	0x08006379
 800636c:	08006389 	.word	0x08006389
 8006370:	08006381 	.word	0x08006381
 8006374:	08006391 	.word	0x08006391
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800637e:	e116      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006380:	2302      	movs	r3, #2
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006386:	e112      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006388:	2304      	movs	r3, #4
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800638e:	e10e      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006390:	2308      	movs	r3, #8
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006396:	e10a      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006398:	2310      	movs	r3, #16
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639e:	e106      	b.n	80065ae <UART_SetConfig+0x2e6>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a7c      	ldr	r2, [pc, #496]	@ (8006598 <UART_SetConfig+0x2d0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d138      	bne.n	800641c <UART_SetConfig+0x154>
 80063aa:	4b7a      	ldr	r3, [pc, #488]	@ (8006594 <UART_SetConfig+0x2cc>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f003 030c 	and.w	r3, r3, #12
 80063b4:	2b0c      	cmp	r3, #12
 80063b6:	d82d      	bhi.n	8006414 <UART_SetConfig+0x14c>
 80063b8:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <UART_SetConfig+0xf8>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	08006415 	.word	0x08006415
 80063c8:	08006415 	.word	0x08006415
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006405 	.word	0x08006405
 80063d4:	08006415 	.word	0x08006415
 80063d8:	08006415 	.word	0x08006415
 80063dc:	08006415 	.word	0x08006415
 80063e0:	080063fd 	.word	0x080063fd
 80063e4:	08006415 	.word	0x08006415
 80063e8:	08006415 	.word	0x08006415
 80063ec:	08006415 	.word	0x08006415
 80063f0:	0800640d 	.word	0x0800640d
 80063f4:	2300      	movs	r3, #0
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fa:	e0d8      	b.n	80065ae <UART_SetConfig+0x2e6>
 80063fc:	2302      	movs	r3, #2
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006402:	e0d4      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640a:	e0d0      	b.n	80065ae <UART_SetConfig+0x2e6>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006412:	e0cc      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641a:	e0c8      	b.n	80065ae <UART_SetConfig+0x2e6>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5e      	ldr	r2, [pc, #376]	@ (800659c <UART_SetConfig+0x2d4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d125      	bne.n	8006472 <UART_SetConfig+0x1aa>
 8006426:	4b5b      	ldr	r3, [pc, #364]	@ (8006594 <UART_SetConfig+0x2cc>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006430:	2b30      	cmp	r3, #48	@ 0x30
 8006432:	d016      	beq.n	8006462 <UART_SetConfig+0x19a>
 8006434:	2b30      	cmp	r3, #48	@ 0x30
 8006436:	d818      	bhi.n	800646a <UART_SetConfig+0x1a2>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d00a      	beq.n	8006452 <UART_SetConfig+0x18a>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d814      	bhi.n	800646a <UART_SetConfig+0x1a2>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <UART_SetConfig+0x182>
 8006444:	2b10      	cmp	r3, #16
 8006446:	d008      	beq.n	800645a <UART_SetConfig+0x192>
 8006448:	e00f      	b.n	800646a <UART_SetConfig+0x1a2>
 800644a:	2300      	movs	r3, #0
 800644c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006450:	e0ad      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006452:	2302      	movs	r3, #2
 8006454:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006458:	e0a9      	b.n	80065ae <UART_SetConfig+0x2e6>
 800645a:	2304      	movs	r3, #4
 800645c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006460:	e0a5      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006462:	2308      	movs	r3, #8
 8006464:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006468:	e0a1      	b.n	80065ae <UART_SetConfig+0x2e6>
 800646a:	2310      	movs	r3, #16
 800646c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006470:	e09d      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a4a      	ldr	r2, [pc, #296]	@ (80065a0 <UART_SetConfig+0x2d8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d125      	bne.n	80064c8 <UART_SetConfig+0x200>
 800647c:	4b45      	ldr	r3, [pc, #276]	@ (8006594 <UART_SetConfig+0x2cc>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006482:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006486:	2bc0      	cmp	r3, #192	@ 0xc0
 8006488:	d016      	beq.n	80064b8 <UART_SetConfig+0x1f0>
 800648a:	2bc0      	cmp	r3, #192	@ 0xc0
 800648c:	d818      	bhi.n	80064c0 <UART_SetConfig+0x1f8>
 800648e:	2b80      	cmp	r3, #128	@ 0x80
 8006490:	d00a      	beq.n	80064a8 <UART_SetConfig+0x1e0>
 8006492:	2b80      	cmp	r3, #128	@ 0x80
 8006494:	d814      	bhi.n	80064c0 <UART_SetConfig+0x1f8>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <UART_SetConfig+0x1d8>
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d008      	beq.n	80064b0 <UART_SetConfig+0x1e8>
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x1f8>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a6:	e082      	b.n	80065ae <UART_SetConfig+0x2e6>
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ae:	e07e      	b.n	80065ae <UART_SetConfig+0x2e6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b6:	e07a      	b.n	80065ae <UART_SetConfig+0x2e6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e076      	b.n	80065ae <UART_SetConfig+0x2e6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c6:	e072      	b.n	80065ae <UART_SetConfig+0x2e6>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a35      	ldr	r2, [pc, #212]	@ (80065a4 <UART_SetConfig+0x2dc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d12a      	bne.n	8006528 <UART_SetConfig+0x260>
 80064d2:	4b30      	ldr	r3, [pc, #192]	@ (8006594 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e0:	d01a      	beq.n	8006518 <UART_SetConfig+0x250>
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e6:	d81b      	bhi.n	8006520 <UART_SetConfig+0x258>
 80064e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ec:	d00c      	beq.n	8006508 <UART_SetConfig+0x240>
 80064ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f2:	d815      	bhi.n	8006520 <UART_SetConfig+0x258>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x238>
 80064f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fc:	d008      	beq.n	8006510 <UART_SetConfig+0x248>
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x258>
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e052      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006508:	2302      	movs	r3, #2
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e04e      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006510:	2304      	movs	r3, #4
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e04a      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006518:	2308      	movs	r3, #8
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e046      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006520:	2310      	movs	r3, #16
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e042      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a17      	ldr	r2, [pc, #92]	@ (800658c <UART_SetConfig+0x2c4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d13a      	bne.n	80065a8 <UART_SetConfig+0x2e0>
 8006532:	4b18      	ldr	r3, [pc, #96]	@ (8006594 <UART_SetConfig+0x2cc>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006538:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800653c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006540:	d01a      	beq.n	8006578 <UART_SetConfig+0x2b0>
 8006542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006546:	d81b      	bhi.n	8006580 <UART_SetConfig+0x2b8>
 8006548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654c:	d00c      	beq.n	8006568 <UART_SetConfig+0x2a0>
 800654e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006552:	d815      	bhi.n	8006580 <UART_SetConfig+0x2b8>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <UART_SetConfig+0x298>
 8006558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655c:	d008      	beq.n	8006570 <UART_SetConfig+0x2a8>
 800655e:	e00f      	b.n	8006580 <UART_SetConfig+0x2b8>
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006566:	e022      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006568:	2302      	movs	r3, #2
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e01e      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006570:	2304      	movs	r3, #4
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e01a      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006578:	2308      	movs	r3, #8
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e016      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e012      	b.n	80065ae <UART_SetConfig+0x2e6>
 8006588:	efff69f3 	.word	0xefff69f3
 800658c:	40008000 	.word	0x40008000
 8006590:	40013800 	.word	0x40013800
 8006594:	40021000 	.word	0x40021000
 8006598:	40004400 	.word	0x40004400
 800659c:	40004800 	.word	0x40004800
 80065a0:	40004c00 	.word	0x40004c00
 80065a4:	40005000 	.word	0x40005000
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006830 <UART_SetConfig+0x568>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d17a      	bne.n	80066ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d824      	bhi.n	800660a <UART_SetConfig+0x342>
 80065c0:	a201      	add	r2, pc, #4	@ (adr r2, 80065c8 <UART_SetConfig+0x300>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	0800660b 	.word	0x0800660b
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	0800660b 	.word	0x0800660b
 80065d8:	080065fb 	.word	0x080065fb
 80065dc:	0800660b 	.word	0x0800660b
 80065e0:	0800660b 	.word	0x0800660b
 80065e4:	0800660b 	.word	0x0800660b
 80065e8:	08006603 	.word	0x08006603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ec:	f7fd ff8a 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80065f0:	61f8      	str	r0, [r7, #28]
        break;
 80065f2:	e010      	b.n	8006616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006834 <UART_SetConfig+0x56c>)
 80065f6:	61fb      	str	r3, [r7, #28]
        break;
 80065f8:	e00d      	b.n	8006616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fa:	f7fd feeb 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 80065fe:	61f8      	str	r0, [r7, #28]
        break;
 8006600:	e009      	b.n	8006616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006606:	61fb      	str	r3, [r7, #28]
        break;
 8006608:	e005      	b.n	8006616 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80fb 	beq.w	8006814 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4413      	add	r3, r2
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	429a      	cmp	r2, r3
 800662c:	d305      	bcc.n	800663a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	429a      	cmp	r2, r3
 8006638:	d903      	bls.n	8006642 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006640:	e0e8      	b.n	8006814 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2200      	movs	r2, #0
 8006646:	461c      	mov	r4, r3
 8006648:	4615      	mov	r5, r2
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	022b      	lsls	r3, r5, #8
 8006654:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006658:	0222      	lsls	r2, r4, #8
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	6849      	ldr	r1, [r1, #4]
 800665e:	0849      	lsrs	r1, r1, #1
 8006660:	2000      	movs	r0, #0
 8006662:	4688      	mov	r8, r1
 8006664:	4681      	mov	r9, r0
 8006666:	eb12 0a08 	adds.w	sl, r2, r8
 800666a:	eb43 0b09 	adc.w	fp, r3, r9
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667c:	4650      	mov	r0, sl
 800667e:	4659      	mov	r1, fp
 8006680:	f7f9 fdfe 	bl	8000280 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4613      	mov	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006692:	d308      	bcc.n	80066a6 <UART_SetConfig+0x3de>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800669a:	d204      	bcs.n	80066a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	e0b6      	b.n	8006814 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066ac:	e0b2      	b.n	8006814 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b6:	d15e      	bne.n	8006776 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80066b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d828      	bhi.n	8006712 <UART_SetConfig+0x44a>
 80066c0:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <UART_SetConfig+0x400>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	08006713 	.word	0x08006713
 80066d8:	08006703 	.word	0x08006703
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006713 	.word	0x08006713
 80066e4:	08006713 	.word	0x08006713
 80066e8:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fd ff0a 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
        break;
 80066f2:	e014      	b.n	800671e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f4:	f7fd ff1c 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 80066f8:	61f8      	str	r0, [r7, #28]
        break;
 80066fa:	e010      	b.n	800671e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006834 <UART_SetConfig+0x56c>)
 80066fe:	61fb      	str	r3, [r7, #28]
        break;
 8006700:	e00d      	b.n	800671e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fd fe67 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8006706:	61f8      	str	r0, [r7, #28]
        break;
 8006708:	e009      	b.n	800671e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670e:	61fb      	str	r3, [r7, #28]
        break;
 8006710:	e005      	b.n	800671e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800671c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d077      	beq.n	8006814 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	005a      	lsls	r2, r3, #1
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	085b      	lsrs	r3, r3, #1
 800672e:	441a      	add	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b0f      	cmp	r3, #15
 800673e:	d916      	bls.n	800676e <UART_SetConfig+0x4a6>
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006746:	d212      	bcs.n	800676e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f023 030f 	bic.w	r3, r3, #15
 8006750:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	085b      	lsrs	r3, r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	b29a      	uxth	r2, r3
 800675e:	8afb      	ldrh	r3, [r7, #22]
 8006760:	4313      	orrs	r3, r2
 8006762:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	8afa      	ldrh	r2, [r7, #22]
 800676a:	60da      	str	r2, [r3, #12]
 800676c:	e052      	b.n	8006814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006774:	e04e      	b.n	8006814 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006776:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800677a:	2b08      	cmp	r3, #8
 800677c:	d827      	bhi.n	80067ce <UART_SetConfig+0x506>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <UART_SetConfig+0x4bc>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067b1 	.word	0x080067b1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	080067cf 	.word	0x080067cf
 8006794:	080067bf 	.word	0x080067bf
 8006798:	080067cf 	.word	0x080067cf
 800679c:	080067cf 	.word	0x080067cf
 80067a0:	080067cf 	.word	0x080067cf
 80067a4:	080067c7 	.word	0x080067c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a8:	f7fd feac 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80067ac:	61f8      	str	r0, [r7, #28]
        break;
 80067ae:	e014      	b.n	80067da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b0:	f7fd febe 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 80067b4:	61f8      	str	r0, [r7, #28]
        break;
 80067b6:	e010      	b.n	80067da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006834 <UART_SetConfig+0x56c>)
 80067ba:	61fb      	str	r3, [r7, #28]
        break;
 80067bc:	e00d      	b.n	80067da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067be:	f7fd fe09 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 80067c2:	61f8      	str	r0, [r7, #28]
        break;
 80067c4:	e009      	b.n	80067da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ca:	61fb      	str	r3, [r7, #28]
        break;
 80067cc:	e005      	b.n	80067da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067d8:	bf00      	nop
    }

    if (pclk != 0U)
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d019      	beq.n	8006814 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	085a      	lsrs	r2, r3, #1
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	441a      	add	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d909      	bls.n	800680e <UART_SetConfig+0x546>
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006800:	d205      	bcs.n	800680e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60da      	str	r2, [r3, #12]
 800680c:	e002      	b.n	8006814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006820:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006824:	4618      	mov	r0, r3
 8006826:	3728      	adds	r7, #40	@ 0x28
 8006828:	46bd      	mov	sp, r7
 800682a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682e:	bf00      	nop
 8006830:	40008000 	.word	0x40008000
 8006834:	00f42400 	.word	0x00f42400

08006838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01a      	beq.n	800694e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006936:	d10a      	bne.n	800694e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b098      	sub	sp, #96	@ 0x60
 8006980:	af02      	add	r7, sp, #8
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800698c:	f7fb f808 	bl	80019a0 <HAL_GetTick>
 8006990:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b08      	cmp	r3, #8
 800699e:	d12e      	bne.n	80069fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a8:	2200      	movs	r2, #0
 80069aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f88c 	bl	8006acc <UART_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d021      	beq.n	80069fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e6      	bne.n	80069ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e062      	b.n	8006ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d149      	bne.n	8006aa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a14:	2200      	movs	r2, #0
 8006a16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f856 	bl	8006acc <UART_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d03c      	beq.n	8006aa0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	623b      	str	r3, [r7, #32]
   return(result);
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	617b      	str	r3, [r7, #20]
   return(result);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e5      	bne.n	8006a58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e011      	b.n	8006ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3758      	adds	r7, #88	@ 0x58
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006adc:	e049      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ae4:	d045      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	f7fa ff5b 	bl	80019a0 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <UART_WaitOnFlagUntilTimeout+0x30>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e048      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d031      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d110      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f838 	bl	8006b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e029      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b4c:	d111      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f81e 	bl	8006b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e00f      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	bf0c      	ite	eq
 8006b82:	2301      	moveq	r3, #1
 8006b84:	2300      	movne	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d0a6      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b095      	sub	sp, #84	@ 0x54
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e6      	bne.n	8006ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d118      	bne.n	8006c42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f023 0310 	bic.w	r3, r3, #16
 8006c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6979      	ldr	r1, [r7, #20]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e6      	bne.n	8006c10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c56:	bf00      	nop
 8006c58:	3754      	adds	r7, #84	@ 0x54
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <atoi>:
 8006c62:	220a      	movs	r2, #10
 8006c64:	2100      	movs	r1, #0
 8006c66:	f000 b93f 	b.w	8006ee8 <strtol>
	...

08006c6c <siprintf>:
 8006c6c:	b40e      	push	{r1, r2, r3}
 8006c6e:	b500      	push	{lr}
 8006c70:	b09c      	sub	sp, #112	@ 0x70
 8006c72:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c74:	9002      	str	r0, [sp, #8]
 8006c76:	9006      	str	r0, [sp, #24]
 8006c78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c7c:	4809      	ldr	r0, [pc, #36]	@ (8006ca4 <siprintf+0x38>)
 8006c7e:	9107      	str	r1, [sp, #28]
 8006c80:	9104      	str	r1, [sp, #16]
 8006c82:	4909      	ldr	r1, [pc, #36]	@ (8006ca8 <siprintf+0x3c>)
 8006c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c88:	9105      	str	r1, [sp, #20]
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	a902      	add	r1, sp, #8
 8006c90:	f000 fa66 	bl	8007160 <_svfiprintf_r>
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	b01c      	add	sp, #112	@ 0x70
 8006c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca0:	b003      	add	sp, #12
 8006ca2:	4770      	bx	lr
 8006ca4:	20000018 	.word	0x20000018
 8006ca8:	ffff0208 	.word	0xffff0208

08006cac <std>:
 8006cac:	2300      	movs	r3, #0
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cba:	6083      	str	r3, [r0, #8]
 8006cbc:	8181      	strh	r1, [r0, #12]
 8006cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cc0:	81c2      	strh	r2, [r0, #14]
 8006cc2:	6183      	str	r3, [r0, #24]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	305c      	adds	r0, #92	@ 0x5c
 8006cca:	f000 f991 	bl	8006ff0 <memset>
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <std+0x58>)
 8006cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x5c>)
 8006cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x60>)
 8006cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x64>)
 8006cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x68>)
 8006ce0:	6224      	str	r4, [r4, #32]
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d006      	beq.n	8006cf4 <std+0x48>
 8006ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cea:	4294      	cmp	r4, r2
 8006cec:	d002      	beq.n	8006cf4 <std+0x48>
 8006cee:	33d0      	adds	r3, #208	@ 0xd0
 8006cf0:	429c      	cmp	r4, r3
 8006cf2:	d105      	bne.n	8006d00 <std+0x54>
 8006cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfc:	f000 b9aa 	b.w	8007054 <__retarget_lock_init_recursive>
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	bf00      	nop
 8006d04:	08007939 	.word	0x08007939
 8006d08:	0800795b 	.word	0x0800795b
 8006d0c:	08007993 	.word	0x08007993
 8006d10:	080079b7 	.word	0x080079b7
 8006d14:	200003c8 	.word	0x200003c8

08006d18 <stdio_exit_handler>:
 8006d18:	4a02      	ldr	r2, [pc, #8]	@ (8006d24 <stdio_exit_handler+0xc>)
 8006d1a:	4903      	ldr	r1, [pc, #12]	@ (8006d28 <stdio_exit_handler+0x10>)
 8006d1c:	4803      	ldr	r0, [pc, #12]	@ (8006d2c <stdio_exit_handler+0x14>)
 8006d1e:	f000 b8ed 	b.w	8006efc <_fwalk_sglue>
 8006d22:	bf00      	nop
 8006d24:	2000000c 	.word	0x2000000c
 8006d28:	080078d1 	.word	0x080078d1
 8006d2c:	2000001c 	.word	0x2000001c

08006d30 <cleanup_stdio>:
 8006d30:	6841      	ldr	r1, [r0, #4]
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <cleanup_stdio+0x34>)
 8006d34:	4299      	cmp	r1, r3
 8006d36:	b510      	push	{r4, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	d001      	beq.n	8006d40 <cleanup_stdio+0x10>
 8006d3c:	f000 fdc8 	bl	80078d0 <_fflush_r>
 8006d40:	68a1      	ldr	r1, [r4, #8]
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <cleanup_stdio+0x38>)
 8006d44:	4299      	cmp	r1, r3
 8006d46:	d002      	beq.n	8006d4e <cleanup_stdio+0x1e>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fdc1 	bl	80078d0 <_fflush_r>
 8006d4e:	68e1      	ldr	r1, [r4, #12]
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <cleanup_stdio+0x3c>)
 8006d52:	4299      	cmp	r1, r3
 8006d54:	d004      	beq.n	8006d60 <cleanup_stdio+0x30>
 8006d56:	4620      	mov	r0, r4
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f000 bdb8 	b.w	80078d0 <_fflush_r>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	200003c8 	.word	0x200003c8
 8006d68:	20000430 	.word	0x20000430
 8006d6c:	20000498 	.word	0x20000498

08006d70 <global_stdio_init.part.0>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4b0b      	ldr	r3, [pc, #44]	@ (8006da0 <global_stdio_init.part.0+0x30>)
 8006d74:	4c0b      	ldr	r4, [pc, #44]	@ (8006da4 <global_stdio_init.part.0+0x34>)
 8006d76:	4a0c      	ldr	r2, [pc, #48]	@ (8006da8 <global_stdio_init.part.0+0x38>)
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2104      	movs	r1, #4
 8006d80:	f7ff ff94 	bl	8006cac <std>
 8006d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d88:	2201      	movs	r2, #1
 8006d8a:	2109      	movs	r1, #9
 8006d8c:	f7ff ff8e 	bl	8006cac <std>
 8006d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d94:	2202      	movs	r2, #2
 8006d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9a:	2112      	movs	r1, #18
 8006d9c:	f7ff bf86 	b.w	8006cac <std>
 8006da0:	20000500 	.word	0x20000500
 8006da4:	200003c8 	.word	0x200003c8
 8006da8:	08006d19 	.word	0x08006d19

08006dac <__sfp_lock_acquire>:
 8006dac:	4801      	ldr	r0, [pc, #4]	@ (8006db4 <__sfp_lock_acquire+0x8>)
 8006dae:	f000 b952 	b.w	8007056 <__retarget_lock_acquire_recursive>
 8006db2:	bf00      	nop
 8006db4:	20000505 	.word	0x20000505

08006db8 <__sfp_lock_release>:
 8006db8:	4801      	ldr	r0, [pc, #4]	@ (8006dc0 <__sfp_lock_release+0x8>)
 8006dba:	f000 b94d 	b.w	8007058 <__retarget_lock_release_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20000505 	.word	0x20000505

08006dc4 <__sinit>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	f7ff fff0 	bl	8006dac <__sfp_lock_acquire>
 8006dcc:	6a23      	ldr	r3, [r4, #32]
 8006dce:	b11b      	cbz	r3, 8006dd8 <__sinit+0x14>
 8006dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd4:	f7ff bff0 	b.w	8006db8 <__sfp_lock_release>
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__sinit+0x28>)
 8006dda:	6223      	str	r3, [r4, #32]
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <__sinit+0x2c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f5      	bne.n	8006dd0 <__sinit+0xc>
 8006de4:	f7ff ffc4 	bl	8006d70 <global_stdio_init.part.0>
 8006de8:	e7f2      	b.n	8006dd0 <__sinit+0xc>
 8006dea:	bf00      	nop
 8006dec:	08006d31 	.word	0x08006d31
 8006df0:	20000500 	.word	0x20000500

08006df4 <_strtol_l.constprop.0>:
 8006df4:	2b24      	cmp	r3, #36	@ 0x24
 8006df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfa:	4686      	mov	lr, r0
 8006dfc:	4690      	mov	r8, r2
 8006dfe:	d801      	bhi.n	8006e04 <_strtol_l.constprop.0+0x10>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d106      	bne.n	8006e12 <_strtol_l.constprop.0+0x1e>
 8006e04:	f000 f8fc 	bl	8007000 <__errno>
 8006e08:	2316      	movs	r3, #22
 8006e0a:	6003      	str	r3, [r0, #0]
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e12:	4834      	ldr	r0, [pc, #208]	@ (8006ee4 <_strtol_l.constprop.0+0xf0>)
 8006e14:	460d      	mov	r5, r1
 8006e16:	462a      	mov	r2, r5
 8006e18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e1c:	5d06      	ldrb	r6, [r0, r4]
 8006e1e:	f016 0608 	ands.w	r6, r6, #8
 8006e22:	d1f8      	bne.n	8006e16 <_strtol_l.constprop.0+0x22>
 8006e24:	2c2d      	cmp	r4, #45	@ 0x2d
 8006e26:	d12d      	bne.n	8006e84 <_strtol_l.constprop.0+0x90>
 8006e28:	782c      	ldrb	r4, [r5, #0]
 8006e2a:	2601      	movs	r6, #1
 8006e2c:	1c95      	adds	r5, r2, #2
 8006e2e:	f033 0210 	bics.w	r2, r3, #16
 8006e32:	d109      	bne.n	8006e48 <_strtol_l.constprop.0+0x54>
 8006e34:	2c30      	cmp	r4, #48	@ 0x30
 8006e36:	d12a      	bne.n	8006e8e <_strtol_l.constprop.0+0x9a>
 8006e38:	782a      	ldrb	r2, [r5, #0]
 8006e3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e3e:	2a58      	cmp	r2, #88	@ 0x58
 8006e40:	d125      	bne.n	8006e8e <_strtol_l.constprop.0+0x9a>
 8006e42:	786c      	ldrb	r4, [r5, #1]
 8006e44:	2310      	movs	r3, #16
 8006e46:	3502      	adds	r5, #2
 8006e48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006e4c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006e50:	2200      	movs	r2, #0
 8006e52:	fbbc f9f3 	udiv	r9, ip, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006e60:	2f09      	cmp	r7, #9
 8006e62:	d81b      	bhi.n	8006e9c <_strtol_l.constprop.0+0xa8>
 8006e64:	463c      	mov	r4, r7
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	dd27      	ble.n	8006eba <_strtol_l.constprop.0+0xc6>
 8006e6a:	1c57      	adds	r7, r2, #1
 8006e6c:	d007      	beq.n	8006e7e <_strtol_l.constprop.0+0x8a>
 8006e6e:	4581      	cmp	r9, r0
 8006e70:	d320      	bcc.n	8006eb4 <_strtol_l.constprop.0+0xc0>
 8006e72:	d101      	bne.n	8006e78 <_strtol_l.constprop.0+0x84>
 8006e74:	45a2      	cmp	sl, r4
 8006e76:	db1d      	blt.n	8006eb4 <_strtol_l.constprop.0+0xc0>
 8006e78:	fb00 4003 	mla	r0, r0, r3, r4
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e82:	e7eb      	b.n	8006e5c <_strtol_l.constprop.0+0x68>
 8006e84:	2c2b      	cmp	r4, #43	@ 0x2b
 8006e86:	bf04      	itt	eq
 8006e88:	782c      	ldrbeq	r4, [r5, #0]
 8006e8a:	1c95      	addeq	r5, r2, #2
 8006e8c:	e7cf      	b.n	8006e2e <_strtol_l.constprop.0+0x3a>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1da      	bne.n	8006e48 <_strtol_l.constprop.0+0x54>
 8006e92:	2c30      	cmp	r4, #48	@ 0x30
 8006e94:	bf0c      	ite	eq
 8006e96:	2308      	moveq	r3, #8
 8006e98:	230a      	movne	r3, #10
 8006e9a:	e7d5      	b.n	8006e48 <_strtol_l.constprop.0+0x54>
 8006e9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006ea0:	2f19      	cmp	r7, #25
 8006ea2:	d801      	bhi.n	8006ea8 <_strtol_l.constprop.0+0xb4>
 8006ea4:	3c37      	subs	r4, #55	@ 0x37
 8006ea6:	e7de      	b.n	8006e66 <_strtol_l.constprop.0+0x72>
 8006ea8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006eac:	2f19      	cmp	r7, #25
 8006eae:	d804      	bhi.n	8006eba <_strtol_l.constprop.0+0xc6>
 8006eb0:	3c57      	subs	r4, #87	@ 0x57
 8006eb2:	e7d8      	b.n	8006e66 <_strtol_l.constprop.0+0x72>
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006eb8:	e7e1      	b.n	8006e7e <_strtol_l.constprop.0+0x8a>
 8006eba:	1c53      	adds	r3, r2, #1
 8006ebc:	d108      	bne.n	8006ed0 <_strtol_l.constprop.0+0xdc>
 8006ebe:	2322      	movs	r3, #34	@ 0x22
 8006ec0:	f8ce 3000 	str.w	r3, [lr]
 8006ec4:	4660      	mov	r0, ip
 8006ec6:	f1b8 0f00 	cmp.w	r8, #0
 8006eca:	d0a0      	beq.n	8006e0e <_strtol_l.constprop.0+0x1a>
 8006ecc:	1e69      	subs	r1, r5, #1
 8006ece:	e006      	b.n	8006ede <_strtol_l.constprop.0+0xea>
 8006ed0:	b106      	cbz	r6, 8006ed4 <_strtol_l.constprop.0+0xe0>
 8006ed2:	4240      	negs	r0, r0
 8006ed4:	f1b8 0f00 	cmp.w	r8, #0
 8006ed8:	d099      	beq.n	8006e0e <_strtol_l.constprop.0+0x1a>
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d1f6      	bne.n	8006ecc <_strtol_l.constprop.0+0xd8>
 8006ede:	f8c8 1000 	str.w	r1, [r8]
 8006ee2:	e794      	b.n	8006e0e <_strtol_l.constprop.0+0x1a>
 8006ee4:	0800824e 	.word	0x0800824e

08006ee8 <strtol>:
 8006ee8:	4613      	mov	r3, r2
 8006eea:	460a      	mov	r2, r1
 8006eec:	4601      	mov	r1, r0
 8006eee:	4802      	ldr	r0, [pc, #8]	@ (8006ef8 <strtol+0x10>)
 8006ef0:	6800      	ldr	r0, [r0, #0]
 8006ef2:	f7ff bf7f 	b.w	8006df4 <_strtol_l.constprop.0>
 8006ef6:	bf00      	nop
 8006ef8:	20000018 	.word	0x20000018

08006efc <_fwalk_sglue>:
 8006efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f00:	4607      	mov	r7, r0
 8006f02:	4688      	mov	r8, r1
 8006f04:	4614      	mov	r4, r2
 8006f06:	2600      	movs	r6, #0
 8006f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f10:	d505      	bpl.n	8006f1e <_fwalk_sglue+0x22>
 8006f12:	6824      	ldr	r4, [r4, #0]
 8006f14:	2c00      	cmp	r4, #0
 8006f16:	d1f7      	bne.n	8006f08 <_fwalk_sglue+0xc>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1e:	89ab      	ldrh	r3, [r5, #12]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d907      	bls.n	8006f34 <_fwalk_sglue+0x38>
 8006f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	d003      	beq.n	8006f34 <_fwalk_sglue+0x38>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4638      	mov	r0, r7
 8006f30:	47c0      	blx	r8
 8006f32:	4306      	orrs	r6, r0
 8006f34:	3568      	adds	r5, #104	@ 0x68
 8006f36:	e7e9      	b.n	8006f0c <_fwalk_sglue+0x10>

08006f38 <strtok>:
 8006f38:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <strtok+0x5c>)
 8006f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	681f      	ldr	r7, [r3, #0]
 8006f40:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006f42:	4605      	mov	r5, r0
 8006f44:	460e      	mov	r6, r1
 8006f46:	b9ec      	cbnz	r4, 8006f84 <strtok+0x4c>
 8006f48:	2050      	movs	r0, #80	@ 0x50
 8006f4a:	f000 fa05 	bl	8007358 <malloc>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6478      	str	r0, [r7, #68]	@ 0x44
 8006f52:	b920      	cbnz	r0, 8006f5e <strtok+0x26>
 8006f54:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <strtok+0x60>)
 8006f56:	4811      	ldr	r0, [pc, #68]	@ (8006f9c <strtok+0x64>)
 8006f58:	215b      	movs	r1, #91	@ 0x5b
 8006f5a:	f000 f887 	bl	800706c <__assert_func>
 8006f5e:	e9c0 4400 	strd	r4, r4, [r0]
 8006f62:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006f66:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006f6a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006f6e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006f72:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006f76:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006f7a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006f7e:	6184      	str	r4, [r0, #24]
 8006f80:	7704      	strb	r4, [r0, #28]
 8006f82:	6244      	str	r4, [r0, #36]	@ 0x24
 8006f84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	f000 b806 	b.w	8006fa0 <__strtok_r>
 8006f94:	20000018 	.word	0x20000018
 8006f98:	080081dc 	.word	0x080081dc
 8006f9c:	080081f3 	.word	0x080081f3

08006fa0 <__strtok_r>:
 8006fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	b908      	cbnz	r0, 8006faa <__strtok_r+0xa>
 8006fa6:	6814      	ldr	r4, [r2, #0]
 8006fa8:	b144      	cbz	r4, 8006fbc <__strtok_r+0x1c>
 8006faa:	4620      	mov	r0, r4
 8006fac:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006fb0:	460f      	mov	r7, r1
 8006fb2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006fb6:	b91e      	cbnz	r6, 8006fc0 <__strtok_r+0x20>
 8006fb8:	b965      	cbnz	r5, 8006fd4 <__strtok_r+0x34>
 8006fba:	6015      	str	r5, [r2, #0]
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	e005      	b.n	8006fcc <__strtok_r+0x2c>
 8006fc0:	42b5      	cmp	r5, r6
 8006fc2:	d1f6      	bne.n	8006fb2 <__strtok_r+0x12>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f0      	bne.n	8006faa <__strtok_r+0xa>
 8006fc8:	6014      	str	r4, [r2, #0]
 8006fca:	7003      	strb	r3, [r0, #0]
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fce:	461c      	mov	r4, r3
 8006fd0:	e00c      	b.n	8006fec <__strtok_r+0x4c>
 8006fd2:	b915      	cbnz	r5, 8006fda <__strtok_r+0x3a>
 8006fd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fd8:	460e      	mov	r6, r1
 8006fda:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006fde:	42ab      	cmp	r3, r5
 8006fe0:	d1f7      	bne.n	8006fd2 <__strtok_r+0x32>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f3      	beq.n	8006fce <__strtok_r+0x2e>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006fec:	6014      	str	r4, [r2, #0]
 8006fee:	e7ed      	b.n	8006fcc <__strtok_r+0x2c>

08006ff0 <memset>:
 8006ff0:	4402      	add	r2, r0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d100      	bne.n	8006ffa <memset+0xa>
 8006ff8:	4770      	bx	lr
 8006ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffe:	e7f9      	b.n	8006ff4 <memset+0x4>

08007000 <__errno>:
 8007000:	4b01      	ldr	r3, [pc, #4]	@ (8007008 <__errno+0x8>)
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000018 	.word	0x20000018

0800700c <__libc_init_array>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4d0d      	ldr	r5, [pc, #52]	@ (8007044 <__libc_init_array+0x38>)
 8007010:	4c0d      	ldr	r4, [pc, #52]	@ (8007048 <__libc_init_array+0x3c>)
 8007012:	1b64      	subs	r4, r4, r5
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	2600      	movs	r6, #0
 8007018:	42a6      	cmp	r6, r4
 800701a:	d109      	bne.n	8007030 <__libc_init_array+0x24>
 800701c:	4d0b      	ldr	r5, [pc, #44]	@ (800704c <__libc_init_array+0x40>)
 800701e:	4c0c      	ldr	r4, [pc, #48]	@ (8007050 <__libc_init_array+0x44>)
 8007020:	f001 f884 	bl	800812c <_init>
 8007024:	1b64      	subs	r4, r4, r5
 8007026:	10a4      	asrs	r4, r4, #2
 8007028:	2600      	movs	r6, #0
 800702a:	42a6      	cmp	r6, r4
 800702c:	d105      	bne.n	800703a <__libc_init_array+0x2e>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	f855 3b04 	ldr.w	r3, [r5], #4
 8007034:	4798      	blx	r3
 8007036:	3601      	adds	r6, #1
 8007038:	e7ee      	b.n	8007018 <__libc_init_array+0xc>
 800703a:	f855 3b04 	ldr.w	r3, [r5], #4
 800703e:	4798      	blx	r3
 8007040:	3601      	adds	r6, #1
 8007042:	e7f2      	b.n	800702a <__libc_init_array+0x1e>
 8007044:	080083c8 	.word	0x080083c8
 8007048:	080083c8 	.word	0x080083c8
 800704c:	080083c8 	.word	0x080083c8
 8007050:	080083cc 	.word	0x080083cc

08007054 <__retarget_lock_init_recursive>:
 8007054:	4770      	bx	lr

08007056 <__retarget_lock_acquire_recursive>:
 8007056:	4770      	bx	lr

08007058 <__retarget_lock_release_recursive>:
 8007058:	4770      	bx	lr

0800705a <strcpy>:
 800705a:	4603      	mov	r3, r0
 800705c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007060:	f803 2b01 	strb.w	r2, [r3], #1
 8007064:	2a00      	cmp	r2, #0
 8007066:	d1f9      	bne.n	800705c <strcpy+0x2>
 8007068:	4770      	bx	lr
	...

0800706c <__assert_func>:
 800706c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800706e:	4614      	mov	r4, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4b09      	ldr	r3, [pc, #36]	@ (8007098 <__assert_func+0x2c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4605      	mov	r5, r0
 8007078:	68d8      	ldr	r0, [r3, #12]
 800707a:	b954      	cbnz	r4, 8007092 <__assert_func+0x26>
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <__assert_func+0x30>)
 800707e:	461c      	mov	r4, r3
 8007080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007084:	9100      	str	r1, [sp, #0]
 8007086:	462b      	mov	r3, r5
 8007088:	4905      	ldr	r1, [pc, #20]	@ (80070a0 <__assert_func+0x34>)
 800708a:	f000 fc99 	bl	80079c0 <fiprintf>
 800708e:	f000 fd55 	bl	8007b3c <abort>
 8007092:	4b04      	ldr	r3, [pc, #16]	@ (80070a4 <__assert_func+0x38>)
 8007094:	e7f4      	b.n	8007080 <__assert_func+0x14>
 8007096:	bf00      	nop
 8007098:	20000018 	.word	0x20000018
 800709c:	08008389 	.word	0x08008389
 80070a0:	0800835b 	.word	0x0800835b
 80070a4:	0800834e 	.word	0x0800834e

080070a8 <__ssputs_r>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	688e      	ldr	r6, [r1, #8]
 80070ae:	461f      	mov	r7, r3
 80070b0:	42be      	cmp	r6, r7
 80070b2:	680b      	ldr	r3, [r1, #0]
 80070b4:	4682      	mov	sl, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	4690      	mov	r8, r2
 80070ba:	d82d      	bhi.n	8007118 <__ssputs_r+0x70>
 80070bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070c4:	d026      	beq.n	8007114 <__ssputs_r+0x6c>
 80070c6:	6965      	ldr	r5, [r4, #20]
 80070c8:	6909      	ldr	r1, [r1, #16]
 80070ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ce:	eba3 0901 	sub.w	r9, r3, r1
 80070d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070d6:	1c7b      	adds	r3, r7, #1
 80070d8:	444b      	add	r3, r9
 80070da:	106d      	asrs	r5, r5, #1
 80070dc:	429d      	cmp	r5, r3
 80070de:	bf38      	it	cc
 80070e0:	461d      	movcc	r5, r3
 80070e2:	0553      	lsls	r3, r2, #21
 80070e4:	d527      	bpl.n	8007136 <__ssputs_r+0x8e>
 80070e6:	4629      	mov	r1, r5
 80070e8:	f000 f960 	bl	80073ac <_malloc_r>
 80070ec:	4606      	mov	r6, r0
 80070ee:	b360      	cbz	r0, 800714a <__ssputs_r+0xa2>
 80070f0:	6921      	ldr	r1, [r4, #16]
 80070f2:	464a      	mov	r2, r9
 80070f4:	f000 fd14 	bl	8007b20 <memcpy>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	6126      	str	r6, [r4, #16]
 8007106:	6165      	str	r5, [r4, #20]
 8007108:	444e      	add	r6, r9
 800710a:	eba5 0509 	sub.w	r5, r5, r9
 800710e:	6026      	str	r6, [r4, #0]
 8007110:	60a5      	str	r5, [r4, #8]
 8007112:	463e      	mov	r6, r7
 8007114:	42be      	cmp	r6, r7
 8007116:	d900      	bls.n	800711a <__ssputs_r+0x72>
 8007118:	463e      	mov	r6, r7
 800711a:	6820      	ldr	r0, [r4, #0]
 800711c:	4632      	mov	r2, r6
 800711e:	4641      	mov	r1, r8
 8007120:	f000 fc8e 	bl	8007a40 <memmove>
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	1b9b      	subs	r3, r3, r6
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	4433      	add	r3, r6
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	2000      	movs	r0, #0
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	462a      	mov	r2, r5
 8007138:	f000 fc54 	bl	80079e4 <_realloc_r>
 800713c:	4606      	mov	r6, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d1e0      	bne.n	8007104 <__ssputs_r+0x5c>
 8007142:	6921      	ldr	r1, [r4, #16]
 8007144:	4650      	mov	r0, sl
 8007146:	f000 fd01 	bl	8007b4c <_free_r>
 800714a:	230c      	movs	r3, #12
 800714c:	f8ca 3000 	str.w	r3, [sl]
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800715c:	e7e9      	b.n	8007132 <__ssputs_r+0x8a>
	...

08007160 <_svfiprintf_r>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	4698      	mov	r8, r3
 8007166:	898b      	ldrh	r3, [r1, #12]
 8007168:	061b      	lsls	r3, r3, #24
 800716a:	b09d      	sub	sp, #116	@ 0x74
 800716c:	4607      	mov	r7, r0
 800716e:	460d      	mov	r5, r1
 8007170:	4614      	mov	r4, r2
 8007172:	d510      	bpl.n	8007196 <_svfiprintf_r+0x36>
 8007174:	690b      	ldr	r3, [r1, #16]
 8007176:	b973      	cbnz	r3, 8007196 <_svfiprintf_r+0x36>
 8007178:	2140      	movs	r1, #64	@ 0x40
 800717a:	f000 f917 	bl	80073ac <_malloc_r>
 800717e:	6028      	str	r0, [r5, #0]
 8007180:	6128      	str	r0, [r5, #16]
 8007182:	b930      	cbnz	r0, 8007192 <_svfiprintf_r+0x32>
 8007184:	230c      	movs	r3, #12
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800718c:	b01d      	add	sp, #116	@ 0x74
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	2340      	movs	r3, #64	@ 0x40
 8007194:	616b      	str	r3, [r5, #20]
 8007196:	2300      	movs	r3, #0
 8007198:	9309      	str	r3, [sp, #36]	@ 0x24
 800719a:	2320      	movs	r3, #32
 800719c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071a4:	2330      	movs	r3, #48	@ 0x30
 80071a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007344 <_svfiprintf_r+0x1e4>
 80071aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ae:	f04f 0901 	mov.w	r9, #1
 80071b2:	4623      	mov	r3, r4
 80071b4:	469a      	mov	sl, r3
 80071b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ba:	b10a      	cbz	r2, 80071c0 <_svfiprintf_r+0x60>
 80071bc:	2a25      	cmp	r2, #37	@ 0x25
 80071be:	d1f9      	bne.n	80071b4 <_svfiprintf_r+0x54>
 80071c0:	ebba 0b04 	subs.w	fp, sl, r4
 80071c4:	d00b      	beq.n	80071de <_svfiprintf_r+0x7e>
 80071c6:	465b      	mov	r3, fp
 80071c8:	4622      	mov	r2, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff ff6b 	bl	80070a8 <__ssputs_r>
 80071d2:	3001      	adds	r0, #1
 80071d4:	f000 80a7 	beq.w	8007326 <_svfiprintf_r+0x1c6>
 80071d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071da:	445a      	add	r2, fp
 80071dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80071de:	f89a 3000 	ldrb.w	r3, [sl]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 809f 	beq.w	8007326 <_svfiprintf_r+0x1c6>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f2:	f10a 0a01 	add.w	sl, sl, #1
 80071f6:	9304      	str	r3, [sp, #16]
 80071f8:	9307      	str	r3, [sp, #28]
 80071fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007200:	4654      	mov	r4, sl
 8007202:	2205      	movs	r2, #5
 8007204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007208:	484e      	ldr	r0, [pc, #312]	@ (8007344 <_svfiprintf_r+0x1e4>)
 800720a:	f7f8 ffe9 	bl	80001e0 <memchr>
 800720e:	9a04      	ldr	r2, [sp, #16]
 8007210:	b9d8      	cbnz	r0, 800724a <_svfiprintf_r+0xea>
 8007212:	06d0      	lsls	r0, r2, #27
 8007214:	bf44      	itt	mi
 8007216:	2320      	movmi	r3, #32
 8007218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800721c:	0711      	lsls	r1, r2, #28
 800721e:	bf44      	itt	mi
 8007220:	232b      	movmi	r3, #43	@ 0x2b
 8007222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007226:	f89a 3000 	ldrb.w	r3, [sl]
 800722a:	2b2a      	cmp	r3, #42	@ 0x2a
 800722c:	d015      	beq.n	800725a <_svfiprintf_r+0xfa>
 800722e:	9a07      	ldr	r2, [sp, #28]
 8007230:	4654      	mov	r4, sl
 8007232:	2000      	movs	r0, #0
 8007234:	f04f 0c0a 	mov.w	ip, #10
 8007238:	4621      	mov	r1, r4
 800723a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800723e:	3b30      	subs	r3, #48	@ 0x30
 8007240:	2b09      	cmp	r3, #9
 8007242:	d94b      	bls.n	80072dc <_svfiprintf_r+0x17c>
 8007244:	b1b0      	cbz	r0, 8007274 <_svfiprintf_r+0x114>
 8007246:	9207      	str	r2, [sp, #28]
 8007248:	e014      	b.n	8007274 <_svfiprintf_r+0x114>
 800724a:	eba0 0308 	sub.w	r3, r0, r8
 800724e:	fa09 f303 	lsl.w	r3, r9, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	46a2      	mov	sl, r4
 8007258:	e7d2      	b.n	8007200 <_svfiprintf_r+0xa0>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	1d19      	adds	r1, r3, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	9103      	str	r1, [sp, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	bfbb      	ittet	lt
 8007266:	425b      	neglt	r3, r3
 8007268:	f042 0202 	orrlt.w	r2, r2, #2
 800726c:	9307      	strge	r3, [sp, #28]
 800726e:	9307      	strlt	r3, [sp, #28]
 8007270:	bfb8      	it	lt
 8007272:	9204      	strlt	r2, [sp, #16]
 8007274:	7823      	ldrb	r3, [r4, #0]
 8007276:	2b2e      	cmp	r3, #46	@ 0x2e
 8007278:	d10a      	bne.n	8007290 <_svfiprintf_r+0x130>
 800727a:	7863      	ldrb	r3, [r4, #1]
 800727c:	2b2a      	cmp	r3, #42	@ 0x2a
 800727e:	d132      	bne.n	80072e6 <_svfiprintf_r+0x186>
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	9203      	str	r2, [sp, #12]
 8007288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800728c:	3402      	adds	r4, #2
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007354 <_svfiprintf_r+0x1f4>
 8007294:	7821      	ldrb	r1, [r4, #0]
 8007296:	2203      	movs	r2, #3
 8007298:	4650      	mov	r0, sl
 800729a:	f7f8 ffa1 	bl	80001e0 <memchr>
 800729e:	b138      	cbz	r0, 80072b0 <_svfiprintf_r+0x150>
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	eba0 000a 	sub.w	r0, r0, sl
 80072a6:	2240      	movs	r2, #64	@ 0x40
 80072a8:	4082      	lsls	r2, r0
 80072aa:	4313      	orrs	r3, r2
 80072ac:	3401      	adds	r4, #1
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b4:	4824      	ldr	r0, [pc, #144]	@ (8007348 <_svfiprintf_r+0x1e8>)
 80072b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ba:	2206      	movs	r2, #6
 80072bc:	f7f8 ff90 	bl	80001e0 <memchr>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d036      	beq.n	8007332 <_svfiprintf_r+0x1d2>
 80072c4:	4b21      	ldr	r3, [pc, #132]	@ (800734c <_svfiprintf_r+0x1ec>)
 80072c6:	bb1b      	cbnz	r3, 8007310 <_svfiprintf_r+0x1b0>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	3307      	adds	r3, #7
 80072cc:	f023 0307 	bic.w	r3, r3, #7
 80072d0:	3308      	adds	r3, #8
 80072d2:	9303      	str	r3, [sp, #12]
 80072d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d6:	4433      	add	r3, r6
 80072d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072da:	e76a      	b.n	80071b2 <_svfiprintf_r+0x52>
 80072dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072e0:	460c      	mov	r4, r1
 80072e2:	2001      	movs	r0, #1
 80072e4:	e7a8      	b.n	8007238 <_svfiprintf_r+0xd8>
 80072e6:	2300      	movs	r3, #0
 80072e8:	3401      	adds	r4, #1
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	4619      	mov	r1, r3
 80072ee:	f04f 0c0a 	mov.w	ip, #10
 80072f2:	4620      	mov	r0, r4
 80072f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f8:	3a30      	subs	r2, #48	@ 0x30
 80072fa:	2a09      	cmp	r2, #9
 80072fc:	d903      	bls.n	8007306 <_svfiprintf_r+0x1a6>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0c6      	beq.n	8007290 <_svfiprintf_r+0x130>
 8007302:	9105      	str	r1, [sp, #20]
 8007304:	e7c4      	b.n	8007290 <_svfiprintf_r+0x130>
 8007306:	fb0c 2101 	mla	r1, ip, r1, r2
 800730a:	4604      	mov	r4, r0
 800730c:	2301      	movs	r3, #1
 800730e:	e7f0      	b.n	80072f2 <_svfiprintf_r+0x192>
 8007310:	ab03      	add	r3, sp, #12
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	462a      	mov	r2, r5
 8007316:	4b0e      	ldr	r3, [pc, #56]	@ (8007350 <_svfiprintf_r+0x1f0>)
 8007318:	a904      	add	r1, sp, #16
 800731a:	4638      	mov	r0, r7
 800731c:	f3af 8000 	nop.w
 8007320:	1c42      	adds	r2, r0, #1
 8007322:	4606      	mov	r6, r0
 8007324:	d1d6      	bne.n	80072d4 <_svfiprintf_r+0x174>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	065b      	lsls	r3, r3, #25
 800732a:	f53f af2d 	bmi.w	8007188 <_svfiprintf_r+0x28>
 800732e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007330:	e72c      	b.n	800718c <_svfiprintf_r+0x2c>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	462a      	mov	r2, r5
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <_svfiprintf_r+0x1f0>)
 800733a:	a904      	add	r1, sp, #16
 800733c:	4638      	mov	r0, r7
 800733e:	f000 f923 	bl	8007588 <_printf_i>
 8007342:	e7ed      	b.n	8007320 <_svfiprintf_r+0x1c0>
 8007344:	0800838a 	.word	0x0800838a
 8007348:	08008394 	.word	0x08008394
 800734c:	00000000 	.word	0x00000000
 8007350:	080070a9 	.word	0x080070a9
 8007354:	08008390 	.word	0x08008390

08007358 <malloc>:
 8007358:	4b02      	ldr	r3, [pc, #8]	@ (8007364 <malloc+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f000 b825 	b.w	80073ac <_malloc_r>
 8007362:	bf00      	nop
 8007364:	20000018 	.word	0x20000018

08007368 <sbrk_aligned>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0f      	ldr	r6, [pc, #60]	@ (80073a8 <sbrk_aligned+0x40>)
 800736c:	460c      	mov	r4, r1
 800736e:	6831      	ldr	r1, [r6, #0]
 8007370:	4605      	mov	r5, r0
 8007372:	b911      	cbnz	r1, 800737a <sbrk_aligned+0x12>
 8007374:	f000 fbb2 	bl	8007adc <_sbrk_r>
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 fbad 	bl	8007adc <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d103      	bne.n	800738e <sbrk_aligned+0x26>
 8007386:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800738a:	4620      	mov	r0, r4
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	1cc4      	adds	r4, r0, #3
 8007390:	f024 0403 	bic.w	r4, r4, #3
 8007394:	42a0      	cmp	r0, r4
 8007396:	d0f8      	beq.n	800738a <sbrk_aligned+0x22>
 8007398:	1a21      	subs	r1, r4, r0
 800739a:	4628      	mov	r0, r5
 800739c:	f000 fb9e 	bl	8007adc <_sbrk_r>
 80073a0:	3001      	adds	r0, #1
 80073a2:	d1f2      	bne.n	800738a <sbrk_aligned+0x22>
 80073a4:	e7ef      	b.n	8007386 <sbrk_aligned+0x1e>
 80073a6:	bf00      	nop
 80073a8:	20000508 	.word	0x20000508

080073ac <_malloc_r>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	1ccd      	adds	r5, r1, #3
 80073b2:	f025 0503 	bic.w	r5, r5, #3
 80073b6:	3508      	adds	r5, #8
 80073b8:	2d0c      	cmp	r5, #12
 80073ba:	bf38      	it	cc
 80073bc:	250c      	movcc	r5, #12
 80073be:	2d00      	cmp	r5, #0
 80073c0:	4606      	mov	r6, r0
 80073c2:	db01      	blt.n	80073c8 <_malloc_r+0x1c>
 80073c4:	42a9      	cmp	r1, r5
 80073c6:	d904      	bls.n	80073d2 <_malloc_r+0x26>
 80073c8:	230c      	movs	r3, #12
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	2000      	movs	r0, #0
 80073ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074a8 <_malloc_r+0xfc>
 80073d6:	f000 faa3 	bl	8007920 <__malloc_lock>
 80073da:	f8d8 3000 	ldr.w	r3, [r8]
 80073de:	461c      	mov	r4, r3
 80073e0:	bb44      	cbnz	r4, 8007434 <_malloc_r+0x88>
 80073e2:	4629      	mov	r1, r5
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff ffbf 	bl	8007368 <sbrk_aligned>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	4604      	mov	r4, r0
 80073ee:	d158      	bne.n	80074a2 <_malloc_r+0xf6>
 80073f0:	f8d8 4000 	ldr.w	r4, [r8]
 80073f4:	4627      	mov	r7, r4
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	d143      	bne.n	8007482 <_malloc_r+0xd6>
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	d04b      	beq.n	8007496 <_malloc_r+0xea>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	4639      	mov	r1, r7
 8007402:	4630      	mov	r0, r6
 8007404:	eb04 0903 	add.w	r9, r4, r3
 8007408:	f000 fb68 	bl	8007adc <_sbrk_r>
 800740c:	4581      	cmp	r9, r0
 800740e:	d142      	bne.n	8007496 <_malloc_r+0xea>
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	1a6d      	subs	r5, r5, r1
 8007414:	4629      	mov	r1, r5
 8007416:	4630      	mov	r0, r6
 8007418:	f7ff ffa6 	bl	8007368 <sbrk_aligned>
 800741c:	3001      	adds	r0, #1
 800741e:	d03a      	beq.n	8007496 <_malloc_r+0xea>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	442b      	add	r3, r5
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	f8d8 3000 	ldr.w	r3, [r8]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	bb62      	cbnz	r2, 8007488 <_malloc_r+0xdc>
 800742e:	f8c8 7000 	str.w	r7, [r8]
 8007432:	e00f      	b.n	8007454 <_malloc_r+0xa8>
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	1b52      	subs	r2, r2, r5
 8007438:	d420      	bmi.n	800747c <_malloc_r+0xd0>
 800743a:	2a0b      	cmp	r2, #11
 800743c:	d917      	bls.n	800746e <_malloc_r+0xc2>
 800743e:	1961      	adds	r1, r4, r5
 8007440:	42a3      	cmp	r3, r4
 8007442:	6025      	str	r5, [r4, #0]
 8007444:	bf18      	it	ne
 8007446:	6059      	strne	r1, [r3, #4]
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	bf08      	it	eq
 800744c:	f8c8 1000 	streq.w	r1, [r8]
 8007450:	5162      	str	r2, [r4, r5]
 8007452:	604b      	str	r3, [r1, #4]
 8007454:	4630      	mov	r0, r6
 8007456:	f000 fa69 	bl	800792c <__malloc_unlock>
 800745a:	f104 000b 	add.w	r0, r4, #11
 800745e:	1d23      	adds	r3, r4, #4
 8007460:	f020 0007 	bic.w	r0, r0, #7
 8007464:	1ac2      	subs	r2, r0, r3
 8007466:	bf1c      	itt	ne
 8007468:	1a1b      	subne	r3, r3, r0
 800746a:	50a3      	strne	r3, [r4, r2]
 800746c:	e7af      	b.n	80073ce <_malloc_r+0x22>
 800746e:	6862      	ldr	r2, [r4, #4]
 8007470:	42a3      	cmp	r3, r4
 8007472:	bf0c      	ite	eq
 8007474:	f8c8 2000 	streq.w	r2, [r8]
 8007478:	605a      	strne	r2, [r3, #4]
 800747a:	e7eb      	b.n	8007454 <_malloc_r+0xa8>
 800747c:	4623      	mov	r3, r4
 800747e:	6864      	ldr	r4, [r4, #4]
 8007480:	e7ae      	b.n	80073e0 <_malloc_r+0x34>
 8007482:	463c      	mov	r4, r7
 8007484:	687f      	ldr	r7, [r7, #4]
 8007486:	e7b6      	b.n	80073f6 <_malloc_r+0x4a>
 8007488:	461a      	mov	r2, r3
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	d1fb      	bne.n	8007488 <_malloc_r+0xdc>
 8007490:	2300      	movs	r3, #0
 8007492:	6053      	str	r3, [r2, #4]
 8007494:	e7de      	b.n	8007454 <_malloc_r+0xa8>
 8007496:	230c      	movs	r3, #12
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	4630      	mov	r0, r6
 800749c:	f000 fa46 	bl	800792c <__malloc_unlock>
 80074a0:	e794      	b.n	80073cc <_malloc_r+0x20>
 80074a2:	6005      	str	r5, [r0, #0]
 80074a4:	e7d6      	b.n	8007454 <_malloc_r+0xa8>
 80074a6:	bf00      	nop
 80074a8:	2000050c 	.word	0x2000050c

080074ac <_printf_common>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	4616      	mov	r6, r2
 80074b2:	4698      	mov	r8, r3
 80074b4:	688a      	ldr	r2, [r1, #8]
 80074b6:	690b      	ldr	r3, [r1, #16]
 80074b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074bc:	4293      	cmp	r3, r2
 80074be:	bfb8      	it	lt
 80074c0:	4613      	movlt	r3, r2
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074c8:	4607      	mov	r7, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	b10a      	cbz	r2, 80074d2 <_printf_common+0x26>
 80074ce:	3301      	adds	r3, #1
 80074d0:	6033      	str	r3, [r6, #0]
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	0699      	lsls	r1, r3, #26
 80074d6:	bf42      	ittt	mi
 80074d8:	6833      	ldrmi	r3, [r6, #0]
 80074da:	3302      	addmi	r3, #2
 80074dc:	6033      	strmi	r3, [r6, #0]
 80074de:	6825      	ldr	r5, [r4, #0]
 80074e0:	f015 0506 	ands.w	r5, r5, #6
 80074e4:	d106      	bne.n	80074f4 <_printf_common+0x48>
 80074e6:	f104 0a19 	add.w	sl, r4, #25
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	6832      	ldr	r2, [r6, #0]
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dc26      	bgt.n	8007542 <_printf_common+0x96>
 80074f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	3b00      	subs	r3, #0
 80074fc:	bf18      	it	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	0692      	lsls	r2, r2, #26
 8007502:	d42b      	bmi.n	800755c <_printf_common+0xb0>
 8007504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007508:	4641      	mov	r1, r8
 800750a:	4638      	mov	r0, r7
 800750c:	47c8      	blx	r9
 800750e:	3001      	adds	r0, #1
 8007510:	d01e      	beq.n	8007550 <_printf_common+0xa4>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	f003 0306 	and.w	r3, r3, #6
 800751a:	2b04      	cmp	r3, #4
 800751c:	bf02      	ittt	eq
 800751e:	68e5      	ldreq	r5, [r4, #12]
 8007520:	6833      	ldreq	r3, [r6, #0]
 8007522:	1aed      	subeq	r5, r5, r3
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	bf0c      	ite	eq
 8007528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800752c:	2500      	movne	r5, #0
 800752e:	4293      	cmp	r3, r2
 8007530:	bfc4      	itt	gt
 8007532:	1a9b      	subgt	r3, r3, r2
 8007534:	18ed      	addgt	r5, r5, r3
 8007536:	2600      	movs	r6, #0
 8007538:	341a      	adds	r4, #26
 800753a:	42b5      	cmp	r5, r6
 800753c:	d11a      	bne.n	8007574 <_printf_common+0xc8>
 800753e:	2000      	movs	r0, #0
 8007540:	e008      	b.n	8007554 <_printf_common+0xa8>
 8007542:	2301      	movs	r3, #1
 8007544:	4652      	mov	r2, sl
 8007546:	4641      	mov	r1, r8
 8007548:	4638      	mov	r0, r7
 800754a:	47c8      	blx	r9
 800754c:	3001      	adds	r0, #1
 800754e:	d103      	bne.n	8007558 <_printf_common+0xac>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007558:	3501      	adds	r5, #1
 800755a:	e7c6      	b.n	80074ea <_printf_common+0x3e>
 800755c:	18e1      	adds	r1, r4, r3
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	2030      	movs	r0, #48	@ 0x30
 8007562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007566:	4422      	add	r2, r4
 8007568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800756c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007570:	3302      	adds	r3, #2
 8007572:	e7c7      	b.n	8007504 <_printf_common+0x58>
 8007574:	2301      	movs	r3, #1
 8007576:	4622      	mov	r2, r4
 8007578:	4641      	mov	r1, r8
 800757a:	4638      	mov	r0, r7
 800757c:	47c8      	blx	r9
 800757e:	3001      	adds	r0, #1
 8007580:	d0e6      	beq.n	8007550 <_printf_common+0xa4>
 8007582:	3601      	adds	r6, #1
 8007584:	e7d9      	b.n	800753a <_printf_common+0x8e>
	...

08007588 <_printf_i>:
 8007588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	7e0f      	ldrb	r7, [r1, #24]
 800758e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007590:	2f78      	cmp	r7, #120	@ 0x78
 8007592:	4691      	mov	r9, r2
 8007594:	4680      	mov	r8, r0
 8007596:	460c      	mov	r4, r1
 8007598:	469a      	mov	sl, r3
 800759a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800759e:	d807      	bhi.n	80075b0 <_printf_i+0x28>
 80075a0:	2f62      	cmp	r7, #98	@ 0x62
 80075a2:	d80a      	bhi.n	80075ba <_printf_i+0x32>
 80075a4:	2f00      	cmp	r7, #0
 80075a6:	f000 80d2 	beq.w	800774e <_printf_i+0x1c6>
 80075aa:	2f58      	cmp	r7, #88	@ 0x58
 80075ac:	f000 80b9 	beq.w	8007722 <_printf_i+0x19a>
 80075b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075b8:	e03a      	b.n	8007630 <_printf_i+0xa8>
 80075ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075be:	2b15      	cmp	r3, #21
 80075c0:	d8f6      	bhi.n	80075b0 <_printf_i+0x28>
 80075c2:	a101      	add	r1, pc, #4	@ (adr r1, 80075c8 <_printf_i+0x40>)
 80075c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007635 	.word	0x08007635
 80075d0:	080075b1 	.word	0x080075b1
 80075d4:	080075b1 	.word	0x080075b1
 80075d8:	080075b1 	.word	0x080075b1
 80075dc:	080075b1 	.word	0x080075b1
 80075e0:	08007635 	.word	0x08007635
 80075e4:	080075b1 	.word	0x080075b1
 80075e8:	080075b1 	.word	0x080075b1
 80075ec:	080075b1 	.word	0x080075b1
 80075f0:	080075b1 	.word	0x080075b1
 80075f4:	08007735 	.word	0x08007735
 80075f8:	0800765f 	.word	0x0800765f
 80075fc:	080076ef 	.word	0x080076ef
 8007600:	080075b1 	.word	0x080075b1
 8007604:	080075b1 	.word	0x080075b1
 8007608:	08007757 	.word	0x08007757
 800760c:	080075b1 	.word	0x080075b1
 8007610:	0800765f 	.word	0x0800765f
 8007614:	080075b1 	.word	0x080075b1
 8007618:	080075b1 	.word	0x080075b1
 800761c:	080076f7 	.word	0x080076f7
 8007620:	6833      	ldr	r3, [r6, #0]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6032      	str	r2, [r6, #0]
 8007628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800762c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007630:	2301      	movs	r3, #1
 8007632:	e09d      	b.n	8007770 <_printf_i+0x1e8>
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	6820      	ldr	r0, [r4, #0]
 8007638:	1d19      	adds	r1, r3, #4
 800763a:	6031      	str	r1, [r6, #0]
 800763c:	0606      	lsls	r6, r0, #24
 800763e:	d501      	bpl.n	8007644 <_printf_i+0xbc>
 8007640:	681d      	ldr	r5, [r3, #0]
 8007642:	e003      	b.n	800764c <_printf_i+0xc4>
 8007644:	0645      	lsls	r5, r0, #25
 8007646:	d5fb      	bpl.n	8007640 <_printf_i+0xb8>
 8007648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800764c:	2d00      	cmp	r5, #0
 800764e:	da03      	bge.n	8007658 <_printf_i+0xd0>
 8007650:	232d      	movs	r3, #45	@ 0x2d
 8007652:	426d      	negs	r5, r5
 8007654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007658:	4859      	ldr	r0, [pc, #356]	@ (80077c0 <_printf_i+0x238>)
 800765a:	230a      	movs	r3, #10
 800765c:	e011      	b.n	8007682 <_printf_i+0xfa>
 800765e:	6821      	ldr	r1, [r4, #0]
 8007660:	6833      	ldr	r3, [r6, #0]
 8007662:	0608      	lsls	r0, r1, #24
 8007664:	f853 5b04 	ldr.w	r5, [r3], #4
 8007668:	d402      	bmi.n	8007670 <_printf_i+0xe8>
 800766a:	0649      	lsls	r1, r1, #25
 800766c:	bf48      	it	mi
 800766e:	b2ad      	uxthmi	r5, r5
 8007670:	2f6f      	cmp	r7, #111	@ 0x6f
 8007672:	4853      	ldr	r0, [pc, #332]	@ (80077c0 <_printf_i+0x238>)
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	bf14      	ite	ne
 8007678:	230a      	movne	r3, #10
 800767a:	2308      	moveq	r3, #8
 800767c:	2100      	movs	r1, #0
 800767e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007682:	6866      	ldr	r6, [r4, #4]
 8007684:	60a6      	str	r6, [r4, #8]
 8007686:	2e00      	cmp	r6, #0
 8007688:	bfa2      	ittt	ge
 800768a:	6821      	ldrge	r1, [r4, #0]
 800768c:	f021 0104 	bicge.w	r1, r1, #4
 8007690:	6021      	strge	r1, [r4, #0]
 8007692:	b90d      	cbnz	r5, 8007698 <_printf_i+0x110>
 8007694:	2e00      	cmp	r6, #0
 8007696:	d04b      	beq.n	8007730 <_printf_i+0x1a8>
 8007698:	4616      	mov	r6, r2
 800769a:	fbb5 f1f3 	udiv	r1, r5, r3
 800769e:	fb03 5711 	mls	r7, r3, r1, r5
 80076a2:	5dc7      	ldrb	r7, [r0, r7]
 80076a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076a8:	462f      	mov	r7, r5
 80076aa:	42bb      	cmp	r3, r7
 80076ac:	460d      	mov	r5, r1
 80076ae:	d9f4      	bls.n	800769a <_printf_i+0x112>
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d10b      	bne.n	80076cc <_printf_i+0x144>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	07df      	lsls	r7, r3, #31
 80076b8:	d508      	bpl.n	80076cc <_printf_i+0x144>
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	6861      	ldr	r1, [r4, #4]
 80076be:	4299      	cmp	r1, r3
 80076c0:	bfde      	ittt	le
 80076c2:	2330      	movle	r3, #48	@ 0x30
 80076c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076cc:	1b92      	subs	r2, r2, r6
 80076ce:	6122      	str	r2, [r4, #16]
 80076d0:	f8cd a000 	str.w	sl, [sp]
 80076d4:	464b      	mov	r3, r9
 80076d6:	aa03      	add	r2, sp, #12
 80076d8:	4621      	mov	r1, r4
 80076da:	4640      	mov	r0, r8
 80076dc:	f7ff fee6 	bl	80074ac <_printf_common>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d14a      	bne.n	800777a <_printf_i+0x1f2>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076e8:	b004      	add	sp, #16
 80076ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	f043 0320 	orr.w	r3, r3, #32
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	4833      	ldr	r0, [pc, #204]	@ (80077c4 <_printf_i+0x23c>)
 80076f8:	2778      	movs	r7, #120	@ 0x78
 80076fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	6831      	ldr	r1, [r6, #0]
 8007702:	061f      	lsls	r7, r3, #24
 8007704:	f851 5b04 	ldr.w	r5, [r1], #4
 8007708:	d402      	bmi.n	8007710 <_printf_i+0x188>
 800770a:	065f      	lsls	r7, r3, #25
 800770c:	bf48      	it	mi
 800770e:	b2ad      	uxthmi	r5, r5
 8007710:	6031      	str	r1, [r6, #0]
 8007712:	07d9      	lsls	r1, r3, #31
 8007714:	bf44      	itt	mi
 8007716:	f043 0320 	orrmi.w	r3, r3, #32
 800771a:	6023      	strmi	r3, [r4, #0]
 800771c:	b11d      	cbz	r5, 8007726 <_printf_i+0x19e>
 800771e:	2310      	movs	r3, #16
 8007720:	e7ac      	b.n	800767c <_printf_i+0xf4>
 8007722:	4827      	ldr	r0, [pc, #156]	@ (80077c0 <_printf_i+0x238>)
 8007724:	e7e9      	b.n	80076fa <_printf_i+0x172>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f023 0320 	bic.w	r3, r3, #32
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	e7f6      	b.n	800771e <_printf_i+0x196>
 8007730:	4616      	mov	r6, r2
 8007732:	e7bd      	b.n	80076b0 <_printf_i+0x128>
 8007734:	6833      	ldr	r3, [r6, #0]
 8007736:	6825      	ldr	r5, [r4, #0]
 8007738:	6961      	ldr	r1, [r4, #20]
 800773a:	1d18      	adds	r0, r3, #4
 800773c:	6030      	str	r0, [r6, #0]
 800773e:	062e      	lsls	r6, r5, #24
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	d501      	bpl.n	8007748 <_printf_i+0x1c0>
 8007744:	6019      	str	r1, [r3, #0]
 8007746:	e002      	b.n	800774e <_printf_i+0x1c6>
 8007748:	0668      	lsls	r0, r5, #25
 800774a:	d5fb      	bpl.n	8007744 <_printf_i+0x1bc>
 800774c:	8019      	strh	r1, [r3, #0]
 800774e:	2300      	movs	r3, #0
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	4616      	mov	r6, r2
 8007754:	e7bc      	b.n	80076d0 <_printf_i+0x148>
 8007756:	6833      	ldr	r3, [r6, #0]
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	6032      	str	r2, [r6, #0]
 800775c:	681e      	ldr	r6, [r3, #0]
 800775e:	6862      	ldr	r2, [r4, #4]
 8007760:	2100      	movs	r1, #0
 8007762:	4630      	mov	r0, r6
 8007764:	f7f8 fd3c 	bl	80001e0 <memchr>
 8007768:	b108      	cbz	r0, 800776e <_printf_i+0x1e6>
 800776a:	1b80      	subs	r0, r0, r6
 800776c:	6060      	str	r0, [r4, #4]
 800776e:	6863      	ldr	r3, [r4, #4]
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	2300      	movs	r3, #0
 8007774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007778:	e7aa      	b.n	80076d0 <_printf_i+0x148>
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	4632      	mov	r2, r6
 800777e:	4649      	mov	r1, r9
 8007780:	4640      	mov	r0, r8
 8007782:	47d0      	blx	sl
 8007784:	3001      	adds	r0, #1
 8007786:	d0ad      	beq.n	80076e4 <_printf_i+0x15c>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	079b      	lsls	r3, r3, #30
 800778c:	d413      	bmi.n	80077b6 <_printf_i+0x22e>
 800778e:	68e0      	ldr	r0, [r4, #12]
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	4298      	cmp	r0, r3
 8007794:	bfb8      	it	lt
 8007796:	4618      	movlt	r0, r3
 8007798:	e7a6      	b.n	80076e8 <_printf_i+0x160>
 800779a:	2301      	movs	r3, #1
 800779c:	4632      	mov	r2, r6
 800779e:	4649      	mov	r1, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	47d0      	blx	sl
 80077a4:	3001      	adds	r0, #1
 80077a6:	d09d      	beq.n	80076e4 <_printf_i+0x15c>
 80077a8:	3501      	adds	r5, #1
 80077aa:	68e3      	ldr	r3, [r4, #12]
 80077ac:	9903      	ldr	r1, [sp, #12]
 80077ae:	1a5b      	subs	r3, r3, r1
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	dcf2      	bgt.n	800779a <_printf_i+0x212>
 80077b4:	e7eb      	b.n	800778e <_printf_i+0x206>
 80077b6:	2500      	movs	r5, #0
 80077b8:	f104 0619 	add.w	r6, r4, #25
 80077bc:	e7f5      	b.n	80077aa <_printf_i+0x222>
 80077be:	bf00      	nop
 80077c0:	0800839b 	.word	0x0800839b
 80077c4:	080083ac 	.word	0x080083ac

080077c8 <__sflush_r>:
 80077c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d0:	0716      	lsls	r6, r2, #28
 80077d2:	4605      	mov	r5, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	d454      	bmi.n	8007882 <__sflush_r+0xba>
 80077d8:	684b      	ldr	r3, [r1, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dc02      	bgt.n	80077e4 <__sflush_r+0x1c>
 80077de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dd48      	ble.n	8007876 <__sflush_r+0xae>
 80077e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	d045      	beq.n	8007876 <__sflush_r+0xae>
 80077ea:	2300      	movs	r3, #0
 80077ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077f0:	682f      	ldr	r7, [r5, #0]
 80077f2:	6a21      	ldr	r1, [r4, #32]
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	d030      	beq.n	800785a <__sflush_r+0x92>
 80077f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	0759      	lsls	r1, r3, #29
 80077fe:	d505      	bpl.n	800780c <__sflush_r+0x44>
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	1ad2      	subs	r2, r2, r3
 8007804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007806:	b10b      	cbz	r3, 800780c <__sflush_r+0x44>
 8007808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007810:	6a21      	ldr	r1, [r4, #32]
 8007812:	4628      	mov	r0, r5
 8007814:	47b0      	blx	r6
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	d106      	bne.n	800782a <__sflush_r+0x62>
 800781c:	6829      	ldr	r1, [r5, #0]
 800781e:	291d      	cmp	r1, #29
 8007820:	d82b      	bhi.n	800787a <__sflush_r+0xb2>
 8007822:	4a2a      	ldr	r2, [pc, #168]	@ (80078cc <__sflush_r+0x104>)
 8007824:	410a      	asrs	r2, r1
 8007826:	07d6      	lsls	r6, r2, #31
 8007828:	d427      	bmi.n	800787a <__sflush_r+0xb2>
 800782a:	2200      	movs	r2, #0
 800782c:	6062      	str	r2, [r4, #4]
 800782e:	04d9      	lsls	r1, r3, #19
 8007830:	6922      	ldr	r2, [r4, #16]
 8007832:	6022      	str	r2, [r4, #0]
 8007834:	d504      	bpl.n	8007840 <__sflush_r+0x78>
 8007836:	1c42      	adds	r2, r0, #1
 8007838:	d101      	bne.n	800783e <__sflush_r+0x76>
 800783a:	682b      	ldr	r3, [r5, #0]
 800783c:	b903      	cbnz	r3, 8007840 <__sflush_r+0x78>
 800783e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007842:	602f      	str	r7, [r5, #0]
 8007844:	b1b9      	cbz	r1, 8007876 <__sflush_r+0xae>
 8007846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800784a:	4299      	cmp	r1, r3
 800784c:	d002      	beq.n	8007854 <__sflush_r+0x8c>
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f97c 	bl	8007b4c <_free_r>
 8007854:	2300      	movs	r3, #0
 8007856:	6363      	str	r3, [r4, #52]	@ 0x34
 8007858:	e00d      	b.n	8007876 <__sflush_r+0xae>
 800785a:	2301      	movs	r3, #1
 800785c:	4628      	mov	r0, r5
 800785e:	47b0      	blx	r6
 8007860:	4602      	mov	r2, r0
 8007862:	1c50      	adds	r0, r2, #1
 8007864:	d1c9      	bne.n	80077fa <__sflush_r+0x32>
 8007866:	682b      	ldr	r3, [r5, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0c6      	beq.n	80077fa <__sflush_r+0x32>
 800786c:	2b1d      	cmp	r3, #29
 800786e:	d001      	beq.n	8007874 <__sflush_r+0xac>
 8007870:	2b16      	cmp	r3, #22
 8007872:	d11e      	bne.n	80078b2 <__sflush_r+0xea>
 8007874:	602f      	str	r7, [r5, #0]
 8007876:	2000      	movs	r0, #0
 8007878:	e022      	b.n	80078c0 <__sflush_r+0xf8>
 800787a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800787e:	b21b      	sxth	r3, r3
 8007880:	e01b      	b.n	80078ba <__sflush_r+0xf2>
 8007882:	690f      	ldr	r7, [r1, #16]
 8007884:	2f00      	cmp	r7, #0
 8007886:	d0f6      	beq.n	8007876 <__sflush_r+0xae>
 8007888:	0793      	lsls	r3, r2, #30
 800788a:	680e      	ldr	r6, [r1, #0]
 800788c:	bf08      	it	eq
 800788e:	694b      	ldreq	r3, [r1, #20]
 8007890:	600f      	str	r7, [r1, #0]
 8007892:	bf18      	it	ne
 8007894:	2300      	movne	r3, #0
 8007896:	eba6 0807 	sub.w	r8, r6, r7
 800789a:	608b      	str	r3, [r1, #8]
 800789c:	f1b8 0f00 	cmp.w	r8, #0
 80078a0:	dde9      	ble.n	8007876 <__sflush_r+0xae>
 80078a2:	6a21      	ldr	r1, [r4, #32]
 80078a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078a6:	4643      	mov	r3, r8
 80078a8:	463a      	mov	r2, r7
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b0      	blx	r6
 80078ae:	2800      	cmp	r0, #0
 80078b0:	dc08      	bgt.n	80078c4 <__sflush_r+0xfc>
 80078b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c4:	4407      	add	r7, r0
 80078c6:	eba8 0800 	sub.w	r8, r8, r0
 80078ca:	e7e7      	b.n	800789c <__sflush_r+0xd4>
 80078cc:	dfbffffe 	.word	0xdfbffffe

080078d0 <_fflush_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	690b      	ldr	r3, [r1, #16]
 80078d4:	4605      	mov	r5, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	b913      	cbnz	r3, 80078e0 <_fflush_r+0x10>
 80078da:	2500      	movs	r5, #0
 80078dc:	4628      	mov	r0, r5
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	b118      	cbz	r0, 80078ea <_fflush_r+0x1a>
 80078e2:	6a03      	ldr	r3, [r0, #32]
 80078e4:	b90b      	cbnz	r3, 80078ea <_fflush_r+0x1a>
 80078e6:	f7ff fa6d 	bl	8006dc4 <__sinit>
 80078ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f3      	beq.n	80078da <_fflush_r+0xa>
 80078f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078f4:	07d0      	lsls	r0, r2, #31
 80078f6:	d404      	bmi.n	8007902 <_fflush_r+0x32>
 80078f8:	0599      	lsls	r1, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_fflush_r+0x32>
 80078fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fe:	f7ff fbaa 	bl	8007056 <__retarget_lock_acquire_recursive>
 8007902:	4628      	mov	r0, r5
 8007904:	4621      	mov	r1, r4
 8007906:	f7ff ff5f 	bl	80077c8 <__sflush_r>
 800790a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800790c:	07da      	lsls	r2, r3, #31
 800790e:	4605      	mov	r5, r0
 8007910:	d4e4      	bmi.n	80078dc <_fflush_r+0xc>
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	059b      	lsls	r3, r3, #22
 8007916:	d4e1      	bmi.n	80078dc <_fflush_r+0xc>
 8007918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800791a:	f7ff fb9d 	bl	8007058 <__retarget_lock_release_recursive>
 800791e:	e7dd      	b.n	80078dc <_fflush_r+0xc>

08007920 <__malloc_lock>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__malloc_lock+0x8>)
 8007922:	f7ff bb98 	b.w	8007056 <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	20000504 	.word	0x20000504

0800792c <__malloc_unlock>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__malloc_unlock+0x8>)
 800792e:	f7ff bb93 	b.w	8007058 <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	20000504 	.word	0x20000504

08007938 <__sread>:
 8007938:	b510      	push	{r4, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	f000 f8ba 	bl	8007ab8 <_read_r>
 8007944:	2800      	cmp	r0, #0
 8007946:	bfab      	itete	ge
 8007948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800794a:	89a3      	ldrhlt	r3, [r4, #12]
 800794c:	181b      	addge	r3, r3, r0
 800794e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007952:	bfac      	ite	ge
 8007954:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007956:	81a3      	strhlt	r3, [r4, #12]
 8007958:	bd10      	pop	{r4, pc}

0800795a <__swrite>:
 800795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	461f      	mov	r7, r3
 8007960:	898b      	ldrh	r3, [r1, #12]
 8007962:	05db      	lsls	r3, r3, #23
 8007964:	4605      	mov	r5, r0
 8007966:	460c      	mov	r4, r1
 8007968:	4616      	mov	r6, r2
 800796a:	d505      	bpl.n	8007978 <__swrite+0x1e>
 800796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007970:	2302      	movs	r3, #2
 8007972:	2200      	movs	r2, #0
 8007974:	f000 f88e 	bl	8007a94 <_lseek_r>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800797e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	4628      	mov	r0, r5
 800798a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	f000 b8b5 	b.w	8007afc <_write_r>

08007992 <__sseek>:
 8007992:	b510      	push	{r4, lr}
 8007994:	460c      	mov	r4, r1
 8007996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799a:	f000 f87b 	bl	8007a94 <_lseek_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	bf15      	itete	ne
 80079a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079ae:	81a3      	strheq	r3, [r4, #12]
 80079b0:	bf18      	it	ne
 80079b2:	81a3      	strhne	r3, [r4, #12]
 80079b4:	bd10      	pop	{r4, pc}

080079b6 <__sclose>:
 80079b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ba:	f000 b85b 	b.w	8007a74 <_close_r>
	...

080079c0 <fiprintf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b503      	push	{r0, r1, lr}
 80079c4:	4601      	mov	r1, r0
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <fiprintf+0x20>)
 80079ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ce:	6800      	ldr	r0, [r0, #0]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f000 f92f 	bl	8007c34 <_vfiprintf_r>
 80079d6:	b002      	add	sp, #8
 80079d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079dc:	b003      	add	sp, #12
 80079de:	4770      	bx	lr
 80079e0:	20000018 	.word	0x20000018

080079e4 <_realloc_r>:
 80079e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e8:	4680      	mov	r8, r0
 80079ea:	4615      	mov	r5, r2
 80079ec:	460c      	mov	r4, r1
 80079ee:	b921      	cbnz	r1, 80079fa <_realloc_r+0x16>
 80079f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f4:	4611      	mov	r1, r2
 80079f6:	f7ff bcd9 	b.w	80073ac <_malloc_r>
 80079fa:	b92a      	cbnz	r2, 8007a08 <_realloc_r+0x24>
 80079fc:	f000 f8a6 	bl	8007b4c <_free_r>
 8007a00:	2400      	movs	r4, #0
 8007a02:	4620      	mov	r0, r4
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a08:	f000 fa2c 	bl	8007e64 <_malloc_usable_size_r>
 8007a0c:	4285      	cmp	r5, r0
 8007a0e:	4606      	mov	r6, r0
 8007a10:	d802      	bhi.n	8007a18 <_realloc_r+0x34>
 8007a12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a16:	d8f4      	bhi.n	8007a02 <_realloc_r+0x1e>
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	f7ff fcc6 	bl	80073ac <_malloc_r>
 8007a20:	4607      	mov	r7, r0
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d0ec      	beq.n	8007a00 <_realloc_r+0x1c>
 8007a26:	42b5      	cmp	r5, r6
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	bf28      	it	cs
 8007a2e:	4632      	movcs	r2, r6
 8007a30:	f000 f876 	bl	8007b20 <memcpy>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4640      	mov	r0, r8
 8007a38:	f000 f888 	bl	8007b4c <_free_r>
 8007a3c:	463c      	mov	r4, r7
 8007a3e:	e7e0      	b.n	8007a02 <_realloc_r+0x1e>

08007a40 <memmove>:
 8007a40:	4288      	cmp	r0, r1
 8007a42:	b510      	push	{r4, lr}
 8007a44:	eb01 0402 	add.w	r4, r1, r2
 8007a48:	d902      	bls.n	8007a50 <memmove+0x10>
 8007a4a:	4284      	cmp	r4, r0
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	d807      	bhi.n	8007a60 <memmove+0x20>
 8007a50:	1e43      	subs	r3, r0, #1
 8007a52:	42a1      	cmp	r1, r4
 8007a54:	d008      	beq.n	8007a68 <memmove+0x28>
 8007a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a5e:	e7f8      	b.n	8007a52 <memmove+0x12>
 8007a60:	4402      	add	r2, r0
 8007a62:	4601      	mov	r1, r0
 8007a64:	428a      	cmp	r2, r1
 8007a66:	d100      	bne.n	8007a6a <memmove+0x2a>
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a72:	e7f7      	b.n	8007a64 <memmove+0x24>

08007a74 <_close_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d06      	ldr	r5, [pc, #24]	@ (8007a90 <_close_r+0x1c>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7f9 fe78 	bl	8001774 <_close>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_close_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_close_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20000510 	.word	0x20000510

08007a94 <_lseek_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	@ (8007ab4 <_lseek_r+0x20>)
 8007a98:	4604      	mov	r4, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7f9 fe8d 	bl	80017c2 <_lseek>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_lseek_r+0x1e>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_lseek_r+0x1e>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20000510 	.word	0x20000510

08007ab8 <_read_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	@ (8007ad8 <_read_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7f9 fe1b 	bl	8001702 <_read>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_read_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_read_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20000510 	.word	0x20000510

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d06      	ldr	r5, [pc, #24]	@ (8007af8 <_sbrk_r+0x1c>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7f9 fe78 	bl	80017dc <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000510 	.word	0x20000510

08007afc <_write_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	@ (8007b1c <_write_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7f9 fe16 	bl	800173c <_write>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_write_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_write_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000510 	.word	0x20000510

08007b20 <memcpy>:
 8007b20:	440a      	add	r2, r1
 8007b22:	4291      	cmp	r1, r2
 8007b24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b28:	d100      	bne.n	8007b2c <memcpy+0xc>
 8007b2a:	4770      	bx	lr
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b36:	4291      	cmp	r1, r2
 8007b38:	d1f9      	bne.n	8007b2e <memcpy+0xe>
 8007b3a:	bd10      	pop	{r4, pc}

08007b3c <abort>:
 8007b3c:	b508      	push	{r3, lr}
 8007b3e:	2006      	movs	r0, #6
 8007b40:	f000 fad8 	bl	80080f4 <raise>
 8007b44:	2001      	movs	r0, #1
 8007b46:	f7f9 fdd1 	bl	80016ec <_exit>
	...

08007b4c <_free_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4605      	mov	r5, r0
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d041      	beq.n	8007bd8 <_free_r+0x8c>
 8007b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b58:	1f0c      	subs	r4, r1, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfb8      	it	lt
 8007b5e:	18e4      	addlt	r4, r4, r3
 8007b60:	f7ff fede 	bl	8007920 <__malloc_lock>
 8007b64:	4a1d      	ldr	r2, [pc, #116]	@ (8007bdc <_free_r+0x90>)
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	b933      	cbnz	r3, 8007b78 <_free_r+0x2c>
 8007b6a:	6063      	str	r3, [r4, #4]
 8007b6c:	6014      	str	r4, [r2, #0]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b74:	f7ff beda 	b.w	800792c <__malloc_unlock>
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d908      	bls.n	8007b8e <_free_r+0x42>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	1821      	adds	r1, r4, r0
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf01      	itttt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	1809      	addeq	r1, r1, r0
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	e7ed      	b.n	8007b6a <_free_r+0x1e>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b10b      	cbz	r3, 8007b98 <_free_r+0x4c>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d9fa      	bls.n	8007b8e <_free_r+0x42>
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	1850      	adds	r0, r2, r1
 8007b9c:	42a0      	cmp	r0, r4
 8007b9e:	d10b      	bne.n	8007bb8 <_free_r+0x6c>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	1850      	adds	r0, r2, r1
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	d1e0      	bne.n	8007b6e <_free_r+0x22>
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	6053      	str	r3, [r2, #4]
 8007bb2:	4408      	add	r0, r1
 8007bb4:	6010      	str	r0, [r2, #0]
 8007bb6:	e7da      	b.n	8007b6e <_free_r+0x22>
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x74>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	e7d6      	b.n	8007b6e <_free_r+0x22>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	1821      	adds	r1, r4, r0
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf04      	itt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	bf04      	itt	eq
 8007bd0:	1809      	addeq	r1, r1, r0
 8007bd2:	6021      	streq	r1, [r4, #0]
 8007bd4:	6054      	str	r4, [r2, #4]
 8007bd6:	e7ca      	b.n	8007b6e <_free_r+0x22>
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	bf00      	nop
 8007bdc:	2000050c 	.word	0x2000050c

08007be0 <__sfputc_r>:
 8007be0:	6893      	ldr	r3, [r2, #8]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	b410      	push	{r4}
 8007be8:	6093      	str	r3, [r2, #8]
 8007bea:	da08      	bge.n	8007bfe <__sfputc_r+0x1e>
 8007bec:	6994      	ldr	r4, [r2, #24]
 8007bee:	42a3      	cmp	r3, r4
 8007bf0:	db01      	blt.n	8007bf6 <__sfputc_r+0x16>
 8007bf2:	290a      	cmp	r1, #10
 8007bf4:	d103      	bne.n	8007bfe <__sfputc_r+0x1e>
 8007bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bfa:	f000 b93b 	b.w	8007e74 <__swbuf_r>
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	1c58      	adds	r0, r3, #1
 8007c02:	6010      	str	r0, [r2, #0]
 8007c04:	7019      	strb	r1, [r3, #0]
 8007c06:	4608      	mov	r0, r1
 8007c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <__sfputs_r>:
 8007c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c10:	4606      	mov	r6, r0
 8007c12:	460f      	mov	r7, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	18d5      	adds	r5, r2, r3
 8007c18:	42ac      	cmp	r4, r5
 8007c1a:	d101      	bne.n	8007c20 <__sfputs_r+0x12>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	e007      	b.n	8007c30 <__sfputs_r+0x22>
 8007c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c24:	463a      	mov	r2, r7
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff ffda 	bl	8007be0 <__sfputc_r>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d1f3      	bne.n	8007c18 <__sfputs_r+0xa>
 8007c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c34 <_vfiprintf_r>:
 8007c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	460d      	mov	r5, r1
 8007c3a:	b09d      	sub	sp, #116	@ 0x74
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	4698      	mov	r8, r3
 8007c40:	4606      	mov	r6, r0
 8007c42:	b118      	cbz	r0, 8007c4c <_vfiprintf_r+0x18>
 8007c44:	6a03      	ldr	r3, [r0, #32]
 8007c46:	b90b      	cbnz	r3, 8007c4c <_vfiprintf_r+0x18>
 8007c48:	f7ff f8bc 	bl	8006dc4 <__sinit>
 8007c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c4e:	07d9      	lsls	r1, r3, #31
 8007c50:	d405      	bmi.n	8007c5e <_vfiprintf_r+0x2a>
 8007c52:	89ab      	ldrh	r3, [r5, #12]
 8007c54:	059a      	lsls	r2, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_vfiprintf_r+0x2a>
 8007c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c5a:	f7ff f9fc 	bl	8007056 <__retarget_lock_acquire_recursive>
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	071b      	lsls	r3, r3, #28
 8007c62:	d501      	bpl.n	8007c68 <_vfiprintf_r+0x34>
 8007c64:	692b      	ldr	r3, [r5, #16]
 8007c66:	b99b      	cbnz	r3, 8007c90 <_vfiprintf_r+0x5c>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f000 f940 	bl	8007ef0 <__swsetup_r>
 8007c70:	b170      	cbz	r0, 8007c90 <_vfiprintf_r+0x5c>
 8007c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c74:	07dc      	lsls	r4, r3, #31
 8007c76:	d504      	bpl.n	8007c82 <_vfiprintf_r+0x4e>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c7c:	b01d      	add	sp, #116	@ 0x74
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	0598      	lsls	r0, r3, #22
 8007c86:	d4f7      	bmi.n	8007c78 <_vfiprintf_r+0x44>
 8007c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c8a:	f7ff f9e5 	bl	8007058 <__retarget_lock_release_recursive>
 8007c8e:	e7f3      	b.n	8007c78 <_vfiprintf_r+0x44>
 8007c90:	2300      	movs	r3, #0
 8007c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c94:	2320      	movs	r3, #32
 8007c96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c9e:	2330      	movs	r3, #48	@ 0x30
 8007ca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e50 <_vfiprintf_r+0x21c>
 8007ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ca8:	f04f 0901 	mov.w	r9, #1
 8007cac:	4623      	mov	r3, r4
 8007cae:	469a      	mov	sl, r3
 8007cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb4:	b10a      	cbz	r2, 8007cba <_vfiprintf_r+0x86>
 8007cb6:	2a25      	cmp	r2, #37	@ 0x25
 8007cb8:	d1f9      	bne.n	8007cae <_vfiprintf_r+0x7a>
 8007cba:	ebba 0b04 	subs.w	fp, sl, r4
 8007cbe:	d00b      	beq.n	8007cd8 <_vfiprintf_r+0xa4>
 8007cc0:	465b      	mov	r3, fp
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7ff ffa1 	bl	8007c0e <__sfputs_r>
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f000 80a7 	beq.w	8007e20 <_vfiprintf_r+0x1ec>
 8007cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cd4:	445a      	add	r2, fp
 8007cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 809f 	beq.w	8007e20 <_vfiprintf_r+0x1ec>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cec:	f10a 0a01 	add.w	sl, sl, #1
 8007cf0:	9304      	str	r3, [sp, #16]
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cfa:	4654      	mov	r4, sl
 8007cfc:	2205      	movs	r2, #5
 8007cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d02:	4853      	ldr	r0, [pc, #332]	@ (8007e50 <_vfiprintf_r+0x21c>)
 8007d04:	f7f8 fa6c 	bl	80001e0 <memchr>
 8007d08:	9a04      	ldr	r2, [sp, #16]
 8007d0a:	b9d8      	cbnz	r0, 8007d44 <_vfiprintf_r+0x110>
 8007d0c:	06d1      	lsls	r1, r2, #27
 8007d0e:	bf44      	itt	mi
 8007d10:	2320      	movmi	r3, #32
 8007d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d16:	0713      	lsls	r3, r2, #28
 8007d18:	bf44      	itt	mi
 8007d1a:	232b      	movmi	r3, #43	@ 0x2b
 8007d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d20:	f89a 3000 	ldrb.w	r3, [sl]
 8007d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d26:	d015      	beq.n	8007d54 <_vfiprintf_r+0x120>
 8007d28:	9a07      	ldr	r2, [sp, #28]
 8007d2a:	4654      	mov	r4, sl
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f04f 0c0a 	mov.w	ip, #10
 8007d32:	4621      	mov	r1, r4
 8007d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d38:	3b30      	subs	r3, #48	@ 0x30
 8007d3a:	2b09      	cmp	r3, #9
 8007d3c:	d94b      	bls.n	8007dd6 <_vfiprintf_r+0x1a2>
 8007d3e:	b1b0      	cbz	r0, 8007d6e <_vfiprintf_r+0x13a>
 8007d40:	9207      	str	r2, [sp, #28]
 8007d42:	e014      	b.n	8007d6e <_vfiprintf_r+0x13a>
 8007d44:	eba0 0308 	sub.w	r3, r0, r8
 8007d48:	fa09 f303 	lsl.w	r3, r9, r3
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	46a2      	mov	sl, r4
 8007d52:	e7d2      	b.n	8007cfa <_vfiprintf_r+0xc6>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	1d19      	adds	r1, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	9103      	str	r1, [sp, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfbb      	ittet	lt
 8007d60:	425b      	neglt	r3, r3
 8007d62:	f042 0202 	orrlt.w	r2, r2, #2
 8007d66:	9307      	strge	r3, [sp, #28]
 8007d68:	9307      	strlt	r3, [sp, #28]
 8007d6a:	bfb8      	it	lt
 8007d6c:	9204      	strlt	r2, [sp, #16]
 8007d6e:	7823      	ldrb	r3, [r4, #0]
 8007d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d72:	d10a      	bne.n	8007d8a <_vfiprintf_r+0x156>
 8007d74:	7863      	ldrb	r3, [r4, #1]
 8007d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d78:	d132      	bne.n	8007de0 <_vfiprintf_r+0x1ac>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	1d1a      	adds	r2, r3, #4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	9203      	str	r2, [sp, #12]
 8007d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d86:	3402      	adds	r4, #2
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e60 <_vfiprintf_r+0x22c>
 8007d8e:	7821      	ldrb	r1, [r4, #0]
 8007d90:	2203      	movs	r2, #3
 8007d92:	4650      	mov	r0, sl
 8007d94:	f7f8 fa24 	bl	80001e0 <memchr>
 8007d98:	b138      	cbz	r0, 8007daa <_vfiprintf_r+0x176>
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	eba0 000a 	sub.w	r0, r0, sl
 8007da0:	2240      	movs	r2, #64	@ 0x40
 8007da2:	4082      	lsls	r2, r0
 8007da4:	4313      	orrs	r3, r2
 8007da6:	3401      	adds	r4, #1
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dae:	4829      	ldr	r0, [pc, #164]	@ (8007e54 <_vfiprintf_r+0x220>)
 8007db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007db4:	2206      	movs	r2, #6
 8007db6:	f7f8 fa13 	bl	80001e0 <memchr>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d03f      	beq.n	8007e3e <_vfiprintf_r+0x20a>
 8007dbe:	4b26      	ldr	r3, [pc, #152]	@ (8007e58 <_vfiprintf_r+0x224>)
 8007dc0:	bb1b      	cbnz	r3, 8007e0a <_vfiprintf_r+0x1d6>
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	3307      	adds	r3, #7
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	3308      	adds	r3, #8
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd0:	443b      	add	r3, r7
 8007dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd4:	e76a      	b.n	8007cac <_vfiprintf_r+0x78>
 8007dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dda:	460c      	mov	r4, r1
 8007ddc:	2001      	movs	r0, #1
 8007dde:	e7a8      	b.n	8007d32 <_vfiprintf_r+0xfe>
 8007de0:	2300      	movs	r3, #0
 8007de2:	3401      	adds	r4, #1
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	4619      	mov	r1, r3
 8007de8:	f04f 0c0a 	mov.w	ip, #10
 8007dec:	4620      	mov	r0, r4
 8007dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df2:	3a30      	subs	r2, #48	@ 0x30
 8007df4:	2a09      	cmp	r2, #9
 8007df6:	d903      	bls.n	8007e00 <_vfiprintf_r+0x1cc>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0c6      	beq.n	8007d8a <_vfiprintf_r+0x156>
 8007dfc:	9105      	str	r1, [sp, #20]
 8007dfe:	e7c4      	b.n	8007d8a <_vfiprintf_r+0x156>
 8007e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e04:	4604      	mov	r4, r0
 8007e06:	2301      	movs	r3, #1
 8007e08:	e7f0      	b.n	8007dec <_vfiprintf_r+0x1b8>
 8007e0a:	ab03      	add	r3, sp, #12
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	462a      	mov	r2, r5
 8007e10:	4b12      	ldr	r3, [pc, #72]	@ (8007e5c <_vfiprintf_r+0x228>)
 8007e12:	a904      	add	r1, sp, #16
 8007e14:	4630      	mov	r0, r6
 8007e16:	f3af 8000 	nop.w
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	1c78      	adds	r0, r7, #1
 8007e1e:	d1d6      	bne.n	8007dce <_vfiprintf_r+0x19a>
 8007e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d405      	bmi.n	8007e32 <_vfiprintf_r+0x1fe>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	059a      	lsls	r2, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_vfiprintf_r+0x1fe>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e2e:	f7ff f913 	bl	8007058 <__retarget_lock_release_recursive>
 8007e32:	89ab      	ldrh	r3, [r5, #12]
 8007e34:	065b      	lsls	r3, r3, #25
 8007e36:	f53f af1f 	bmi.w	8007c78 <_vfiprintf_r+0x44>
 8007e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e3c:	e71e      	b.n	8007c7c <_vfiprintf_r+0x48>
 8007e3e:	ab03      	add	r3, sp, #12
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	462a      	mov	r2, r5
 8007e44:	4b05      	ldr	r3, [pc, #20]	@ (8007e5c <_vfiprintf_r+0x228>)
 8007e46:	a904      	add	r1, sp, #16
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff fb9d 	bl	8007588 <_printf_i>
 8007e4e:	e7e4      	b.n	8007e1a <_vfiprintf_r+0x1e6>
 8007e50:	0800838a 	.word	0x0800838a
 8007e54:	08008394 	.word	0x08008394
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	08007c0f 	.word	0x08007c0f
 8007e60:	08008390 	.word	0x08008390

08007e64 <_malloc_usable_size_r>:
 8007e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e68:	1f18      	subs	r0, r3, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bfbc      	itt	lt
 8007e6e:	580b      	ldrlt	r3, [r1, r0]
 8007e70:	18c0      	addlt	r0, r0, r3
 8007e72:	4770      	bx	lr

08007e74 <__swbuf_r>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	460e      	mov	r6, r1
 8007e78:	4614      	mov	r4, r2
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	b118      	cbz	r0, 8007e86 <__swbuf_r+0x12>
 8007e7e:	6a03      	ldr	r3, [r0, #32]
 8007e80:	b90b      	cbnz	r3, 8007e86 <__swbuf_r+0x12>
 8007e82:	f7fe ff9f 	bl	8006dc4 <__sinit>
 8007e86:	69a3      	ldr	r3, [r4, #24]
 8007e88:	60a3      	str	r3, [r4, #8]
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	071a      	lsls	r2, r3, #28
 8007e8e:	d501      	bpl.n	8007e94 <__swbuf_r+0x20>
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	b943      	cbnz	r3, 8007ea6 <__swbuf_r+0x32>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 f82a 	bl	8007ef0 <__swsetup_r>
 8007e9c:	b118      	cbz	r0, 8007ea6 <__swbuf_r+0x32>
 8007e9e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	1a98      	subs	r0, r3, r2
 8007eac:	6963      	ldr	r3, [r4, #20]
 8007eae:	b2f6      	uxtb	r6, r6
 8007eb0:	4283      	cmp	r3, r0
 8007eb2:	4637      	mov	r7, r6
 8007eb4:	dc05      	bgt.n	8007ec2 <__swbuf_r+0x4e>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f7ff fd09 	bl	80078d0 <_fflush_r>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1ed      	bne.n	8007e9e <__swbuf_r+0x2a>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	60a3      	str	r3, [r4, #8]
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	6022      	str	r2, [r4, #0]
 8007ece:	701e      	strb	r6, [r3, #0]
 8007ed0:	6962      	ldr	r2, [r4, #20]
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d004      	beq.n	8007ee2 <__swbuf_r+0x6e>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d5e1      	bpl.n	8007ea2 <__swbuf_r+0x2e>
 8007ede:	2e0a      	cmp	r6, #10
 8007ee0:	d1df      	bne.n	8007ea2 <__swbuf_r+0x2e>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f7ff fcf3 	bl	80078d0 <_fflush_r>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d0d9      	beq.n	8007ea2 <__swbuf_r+0x2e>
 8007eee:	e7d6      	b.n	8007e9e <__swbuf_r+0x2a>

08007ef0 <__swsetup_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4b29      	ldr	r3, [pc, #164]	@ (8007f98 <__swsetup_r+0xa8>)
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	460c      	mov	r4, r1
 8007efa:	b118      	cbz	r0, 8007f04 <__swsetup_r+0x14>
 8007efc:	6a03      	ldr	r3, [r0, #32]
 8007efe:	b90b      	cbnz	r3, 8007f04 <__swsetup_r+0x14>
 8007f00:	f7fe ff60 	bl	8006dc4 <__sinit>
 8007f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f08:	0719      	lsls	r1, r3, #28
 8007f0a:	d422      	bmi.n	8007f52 <__swsetup_r+0x62>
 8007f0c:	06da      	lsls	r2, r3, #27
 8007f0e:	d407      	bmi.n	8007f20 <__swsetup_r+0x30>
 8007f10:	2209      	movs	r2, #9
 8007f12:	602a      	str	r2, [r5, #0]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f1e:	e033      	b.n	8007f88 <__swsetup_r+0x98>
 8007f20:	0758      	lsls	r0, r3, #29
 8007f22:	d512      	bpl.n	8007f4a <__swsetup_r+0x5a>
 8007f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f26:	b141      	cbz	r1, 8007f3a <__swsetup_r+0x4a>
 8007f28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <__swsetup_r+0x46>
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7ff fe0b 	bl	8007b4c <_free_r>
 8007f36:	2300      	movs	r3, #0
 8007f38:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	2300      	movs	r3, #0
 8007f44:	6063      	str	r3, [r4, #4]
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f043 0308 	orr.w	r3, r3, #8
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	b94b      	cbnz	r3, 8007f6a <__swsetup_r+0x7a>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f60:	d003      	beq.n	8007f6a <__swsetup_r+0x7a>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f83f 	bl	8007fe8 <__smakebuf_r>
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	f013 0201 	ands.w	r2, r3, #1
 8007f72:	d00a      	beq.n	8007f8a <__swsetup_r+0x9a>
 8007f74:	2200      	movs	r2, #0
 8007f76:	60a2      	str	r2, [r4, #8]
 8007f78:	6962      	ldr	r2, [r4, #20]
 8007f7a:	4252      	negs	r2, r2
 8007f7c:	61a2      	str	r2, [r4, #24]
 8007f7e:	6922      	ldr	r2, [r4, #16]
 8007f80:	b942      	cbnz	r2, 8007f94 <__swsetup_r+0xa4>
 8007f82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f86:	d1c5      	bne.n	8007f14 <__swsetup_r+0x24>
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	0799      	lsls	r1, r3, #30
 8007f8c:	bf58      	it	pl
 8007f8e:	6962      	ldrpl	r2, [r4, #20]
 8007f90:	60a2      	str	r2, [r4, #8]
 8007f92:	e7f4      	b.n	8007f7e <__swsetup_r+0x8e>
 8007f94:	2000      	movs	r0, #0
 8007f96:	e7f7      	b.n	8007f88 <__swsetup_r+0x98>
 8007f98:	20000018 	.word	0x20000018

08007f9c <__swhatbuf_r>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	b096      	sub	sp, #88	@ 0x58
 8007fa8:	4615      	mov	r5, r2
 8007faa:	461e      	mov	r6, r3
 8007fac:	da0d      	bge.n	8007fca <__swhatbuf_r+0x2e>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fb4:	f04f 0100 	mov.w	r1, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2340      	movne	r3, #64	@ 0x40
 8007fbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	6031      	str	r1, [r6, #0]
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	b016      	add	sp, #88	@ 0x58
 8007fc8:	bd70      	pop	{r4, r5, r6, pc}
 8007fca:	466a      	mov	r2, sp
 8007fcc:	f000 f848 	bl	8008060 <_fstat_r>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	dbec      	blt.n	8007fae <__swhatbuf_r+0x12>
 8007fd4:	9901      	ldr	r1, [sp, #4]
 8007fd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fde:	4259      	negs	r1, r3
 8007fe0:	4159      	adcs	r1, r3
 8007fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fe6:	e7eb      	b.n	8007fc0 <__swhatbuf_r+0x24>

08007fe8 <__smakebuf_r>:
 8007fe8:	898b      	ldrh	r3, [r1, #12]
 8007fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fec:	079d      	lsls	r5, r3, #30
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	d507      	bpl.n	8008004 <__smakebuf_r+0x1c>
 8007ff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	6163      	str	r3, [r4, #20]
 8008000:	b003      	add	sp, #12
 8008002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008004:	ab01      	add	r3, sp, #4
 8008006:	466a      	mov	r2, sp
 8008008:	f7ff ffc8 	bl	8007f9c <__swhatbuf_r>
 800800c:	9f00      	ldr	r7, [sp, #0]
 800800e:	4605      	mov	r5, r0
 8008010:	4639      	mov	r1, r7
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff f9ca 	bl	80073ac <_malloc_r>
 8008018:	b948      	cbnz	r0, 800802e <__smakebuf_r+0x46>
 800801a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801e:	059a      	lsls	r2, r3, #22
 8008020:	d4ee      	bmi.n	8008000 <__smakebuf_r+0x18>
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	f043 0302 	orr.w	r3, r3, #2
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	e7e2      	b.n	8007ff4 <__smakebuf_r+0xc>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	6020      	str	r0, [r4, #0]
 8008032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800803e:	b15b      	cbz	r3, 8008058 <__smakebuf_r+0x70>
 8008040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f81d 	bl	8008084 <_isatty_r>
 800804a:	b128      	cbz	r0, 8008058 <__smakebuf_r+0x70>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	431d      	orrs	r5, r3
 800805c:	81a5      	strh	r5, [r4, #12]
 800805e:	e7cf      	b.n	8008000 <__smakebuf_r+0x18>

08008060 <_fstat_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d07      	ldr	r5, [pc, #28]	@ (8008080 <_fstat_r+0x20>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	f7f9 fb8d 	bl	800178c <_fstat>
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	d102      	bne.n	800807c <_fstat_r+0x1c>
 8008076:	682b      	ldr	r3, [r5, #0]
 8008078:	b103      	cbz	r3, 800807c <_fstat_r+0x1c>
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	20000510 	.word	0x20000510

08008084 <_isatty_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	@ (80080a0 <_isatty_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f9 fb8c 	bl	80017ac <_isatty>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_isatty_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_isatty_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20000510 	.word	0x20000510

080080a4 <_raise_r>:
 80080a4:	291f      	cmp	r1, #31
 80080a6:	b538      	push	{r3, r4, r5, lr}
 80080a8:	4605      	mov	r5, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	d904      	bls.n	80080b8 <_raise_r+0x14>
 80080ae:	2316      	movs	r3, #22
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80080ba:	b112      	cbz	r2, 80080c2 <_raise_r+0x1e>
 80080bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080c0:	b94b      	cbnz	r3, 80080d6 <_raise_r+0x32>
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 f830 	bl	8008128 <_getpid_r>
 80080c8:	4622      	mov	r2, r4
 80080ca:	4601      	mov	r1, r0
 80080cc:	4628      	mov	r0, r5
 80080ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d2:	f000 b817 	b.w	8008104 <_kill_r>
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d00a      	beq.n	80080f0 <_raise_r+0x4c>
 80080da:	1c59      	adds	r1, r3, #1
 80080dc:	d103      	bne.n	80080e6 <_raise_r+0x42>
 80080de:	2316      	movs	r3, #22
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	2001      	movs	r0, #1
 80080e4:	e7e7      	b.n	80080b6 <_raise_r+0x12>
 80080e6:	2100      	movs	r1, #0
 80080e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80080ec:	4620      	mov	r0, r4
 80080ee:	4798      	blx	r3
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7e0      	b.n	80080b6 <_raise_r+0x12>

080080f4 <raise>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	@ (8008100 <raise+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f7ff bfd3 	b.w	80080a4 <_raise_r>
 80080fe:	bf00      	nop
 8008100:	20000018 	.word	0x20000018

08008104 <_kill_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	@ (8008124 <_kill_r+0x20>)
 8008108:	2300      	movs	r3, #0
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	f7f9 fadb 	bl	80016cc <_kill>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d102      	bne.n	8008120 <_kill_r+0x1c>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	b103      	cbz	r3, 8008120 <_kill_r+0x1c>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd38      	pop	{r3, r4, r5, pc}
 8008122:	bf00      	nop
 8008124:	20000510 	.word	0x20000510

08008128 <_getpid_r>:
 8008128:	f7f9 bac8 	b.w	80016bc <_getpid>

0800812c <_init>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr

08008138 <_fini>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr
