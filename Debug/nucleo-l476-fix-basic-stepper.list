
nucleo-l476-fix-basic-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008168  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008590  08008590  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008598  08008598  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080085a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000068  08008608  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08008608  0000a560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186c1  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edf  00000000  00000000  00022759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00025638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e0  00000000  00000000  00026cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3e7  00000000  00000000  00027ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab7d  00000000  00000000  000522bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a783  00000000  00000000  0006ce3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001775bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e08  00000000  00000000  00177604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0017e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082e0 	.word	0x080082e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080082e0 	.word	0x080082e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09c      	sub	sp, #112	@ 0x70
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint32_t raw;
  char msg[100];
  uint16_t count = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint32_t freq = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f001 fa40 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f870 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 fb4a 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 fb2a 	bl	8000be4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000590:	f000 fac8 	bl	8000b24 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000594:	f000 fa50 	bl	8000a38 <MX_TIM16_Init>
  MX_ADC1_Init();
 8000598:	f000 f8b8 	bl	800070c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800059c:	f000 faf2 	bl	8000b84 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005a0:	f000 f92a 	bl	80007f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80005a4:	f000 f968 	bl	8000878 <MX_TIM3_Init>
  MX_TIM15_Init();
 80005a8:	f000 f9c2 	bl	8000930 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
//  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(USART3_IRQn);

  // pwm for vertical rotation stepper
  TIM16->CCR1 = 100;
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <main+0xcc>)
 80005ae:	2264      	movs	r2, #100	@ 0x64
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	4822      	ldr	r0, [pc, #136]	@ (8000640 <main+0xd0>)
 80005b6:	f004 fe75 	bl	80052a4 <HAL_TIM_PWM_Start>
  // pwm for trigger pull stepper
  TIM3->CCR1 = 50;
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <main+0xd4>)
 80005bc:	2232      	movs	r2, #50	@ 0x32
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4821      	ldr	r0, [pc, #132]	@ (8000648 <main+0xd8>)
 80005c4:	f004 fe6e 	bl	80052a4 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 100;
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <main+0xdc>)
 80005ca:	2264      	movs	r2, #100	@ 0x64
 80005cc:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80005ce:	2100      	movs	r1, #0
 80005d0:	481f      	ldr	r0, [pc, #124]	@ (8000650 <main+0xe0>)
 80005d2:	f004 fe67 	bl	80052a4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 80005d6:	481f      	ldr	r0, [pc, #124]	@ (8000654 <main+0xe4>)
 80005d8:	f001 fdac 	bl	8002134 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005e0:	481c      	ldr	r0, [pc, #112]	@ (8000654 <main+0xe4>)
 80005e2:	f001 fe61 	bl	80022a8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80005e6:	481b      	ldr	r0, [pc, #108]	@ (8000654 <main+0xe4>)
 80005e8:	f001 ff36 	bl	8002458 <HAL_ADC_GetValue>
 80005ec:	6678      	str	r0, [r7, #100]	@ 0x64

//	HAL_GPIO_WritePin(GPIOB, 0, GPIO_PIN_RESET);


	sprintf(msg, "%hu hello\r\n", raw);
 80005ee:	463b      	mov	r3, r7
 80005f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80005f2:	4919      	ldr	r1, [pc, #100]	@ (8000658 <main+0xe8>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f006 fc13 	bl	8006e20 <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	memset(rcv_buf, 0, sizeof(rcv_buf));
 80005fa:	2240      	movs	r2, #64	@ 0x40
 80005fc:	2100      	movs	r1, #0
 80005fe:	4817      	ldr	r0, [pc, #92]	@ (800065c <main+0xec>)
 8000600:	f006 fdd0 	bl	80071a4 <memset>

	HAL_UART_Receive(&huart3, rcv_buf, 11, 100);
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	220b      	movs	r2, #11
 8000608:	4914      	ldr	r1, [pc, #80]	@ (800065c <main+0xec>)
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <main+0xf0>)
 800060c:	f005 fe6d 	bl	80062ea <HAL_UART_Receive>
	rcv_buf[11] = '\0';
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <main+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	72da      	strb	r2, [r3, #11]
	parse_cmd((char *)rcv_buf);
 8000616:	4811      	ldr	r0, [pc, #68]	@ (800065c <main+0xec>)
 8000618:	f000 fc80 	bl	8000f1c <parse_cmd>


//	HAL_UART_Receive_IT(&huart3, rcv_buf, sizeof(rcv_buf));
	sprintf(msg, "%s \r\n", (char *)rcv_buf);
 800061c:	463b      	mov	r3, r7
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <main+0xec>)
 8000620:	4910      	ldr	r1, [pc, #64]	@ (8000664 <main+0xf4>)
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fbfc 	bl	8006e20 <siprintf>

//	sprintf(msg, "%u\r\n", freq);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//
//	SetPWMFrequency(&htim16, TIM_CHANNEL_1, freq);
	count++;
 8000628:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800062c:	3301      	adds	r3, #1
 800062e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
//	HAL_Delay(10);
	HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fa26 	bl	8001a84 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8000638:	bf00      	nop
 800063a:	e7cc      	b.n	80005d6 <main+0x66>
 800063c:	40014400 	.word	0x40014400
 8000640:	200001d4 	.word	0x200001d4
 8000644:	40000400 	.word	0x40000400
 8000648:	2000013c 	.word	0x2000013c
 800064c:	40014000 	.word	0x40014000
 8000650:	20000188 	.word	0x20000188
 8000654:	20000084 	.word	0x20000084
 8000658:	080082f8 	.word	0x080082f8
 800065c:	20000378 	.word	0x20000378
 8000660:	200002f0 	.word	0x200002f0
 8000664:	08008304 	.word	0x08008304

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	@ 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	@ 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 fd94 	bl	80071a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068e:	f003 f9a5 	bl	80039dc <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000698:	f000 fd64 	bl	8001164 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f9dc 	bl	8003a88 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006d6:	f000 fd45 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fda4 	bl	8004240 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fe:	f000 fd31 	bl	8001164 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3758      	adds	r7, #88	@ 0x58
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800072e:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000730:	4a2f      	ldr	r2, [pc, #188]	@ (80007f0 <MX_ADC1_Init+0xe4>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000734:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800074e:	2204      	movs	r2, #4
 8000750:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078e:	4817      	ldr	r0, [pc, #92]	@ (80007ec <MX_ADC1_Init+0xe0>)
 8000790:	f001 fb80 	bl	8001e94 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800079a:	f000 fce3 	bl	8001164 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4810      	ldr	r0, [pc, #64]	@ (80007ec <MX_ADC1_Init+0xe0>)
 80007aa:	f002 fb01 	bl	8002db0 <HAL_ADCEx_MultiModeConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b4:	f000 fcd6 	bl	8001164 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_ADC1_Init+0xe8>)
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2306      	movs	r3, #6
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c4:	237f      	movs	r3, #127	@ 0x7f
 80007c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c8:	2304      	movs	r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_ADC1_Init+0xe0>)
 80007d6:	f001 fe4d 	bl	8002474 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007e0:	f000 fcc0 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	@ 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	50040000 	.word	0x50040000
 80007f4:	19200040 	.word	0x19200040

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C1_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_I2C1_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C1_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_I2C1_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <MX_I2C1_Init+0x74>)
 8000834:	f002 ff92 	bl	800375c <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 fc91 	bl	8001164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_I2C1_Init+0x74>)
 8000846:	f003 f824 	bl	8003892 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fc88 	bl	8001164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2C1_Init+0x74>)
 8000858:	f003 f866 	bl	8003928 <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fc7f 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000e8 	.word	0x200000e8
 8000870:	40005400 	.word	0x40005400
 8000874:	10909cec 	.word	0x10909cec

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <MX_TIM3_Init+0xb0>)
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_TIM3_Init+0xb4>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008a4:	f240 321f 	movw	r2, #799	@ 0x31f
 80008a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008b2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80008b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008be:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008c4:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008c6:	f004 fc95 	bl	80051f4 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 fc48 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_TIM3_Init+0xb0>)
 80008e4:	f005 fb24 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80008ee:	f000 fc39 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	@ 0x60
 80008f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM3_Init+0xb0>)
 800090a:	f004 fe67 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000914:	f000 fc26 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM3_Init+0xb0>)
 800091a:	f000 fd99 	bl	8001450 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000013c 	.word	0x2000013c
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	@ 0x58
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	222c      	movs	r2, #44	@ 0x2c
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f006 fc21 	bl	80071a4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000962:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000964:	4a33      	ldr	r2, [pc, #204]	@ (8000a34 <MX_TIM15_Init+0x104>)
 8000966:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000968:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <MX_TIM15_Init+0x100>)
 800096a:	224f      	movs	r2, #79	@ 0x4f
 800096c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8000974:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000976:	22c7      	movs	r2, #199	@ 0xc7
 8000978:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_TIM15_Init+0x100>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800098c:	4828      	ldr	r0, [pc, #160]	@ (8000a30 <MX_TIM15_Init+0x100>)
 800098e:	f004 fc31 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 8000998:	f000 fbe4 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009a8:	4619      	mov	r1, r3
 80009aa:	4821      	ldr	r0, [pc, #132]	@ (8000a30 <MX_TIM15_Init+0x100>)
 80009ac:	f005 fac0 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80009b6:	f000 fbd5 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <MX_TIM15_Init+0x100>)
 80009e0:	f004 fdfc 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 80009ea:	f000 fbbb 	bl	8001164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000a12:	f005 fb15 	bl	8006040 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM15_Init+0xf0>
  {
    Error_Handler();
 8000a1c:	f000 fba2 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <MX_TIM15_Init+0x100>)
 8000a22:	f000 fd15 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8000a26:	bf00      	nop
 8000a28:	3758      	adds	r7, #88	@ 0x58
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000188 	.word	0x20000188
 8000a34:	40014000 	.word	0x40014000

08000a38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	@ 0x48
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	222c      	movs	r2, #44	@ 0x2c
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 fba3 	bl	80071a4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a60:	4a2f      	ldr	r2, [pc, #188]	@ (8000b20 <MX_TIM16_Init+0xe8>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a66:	224f      	movs	r2, #79	@ 0x4f
 8000a68:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 200-1;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a72:	22c7      	movs	r2, #199	@ 0xc7
 8000a74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a88:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a8a:	f004 faeb 	bl	8005064 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 fb66 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a98:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000a9a:	f004 fbab 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 fb5e 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa8:	2360      	movs	r3, #96	@ 0x60
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000ace:	f004 fd85 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000ad8:	f000 fb44 	bl	8001164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000b00:	f005 fa9e 	bl	8006040 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8000b0a:	f000 fb2b 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b0e:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <MX_TIM16_Init+0xe4>)
 8000b10:	f000 fc9e 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3748      	adds	r7, #72	@ 0x48
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001d4 	.word	0x200001d4
 8000b20:	40014400 	.word	0x40014400

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b2a:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <MX_USART2_UART_Init+0x5c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_USART2_UART_Init+0x58>)
 8000b68:	f005 fae8 	bl	800613c <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 faf7 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000268 	.word	0x20000268
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_USART3_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc8:	f005 fab8 	bl	800613c <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 fac7 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002f0 	.word	0x200002f0
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_DMA_Init+0x38>)
 8000bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bee:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <MX_DMA_Init+0x38>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_DMA_Init+0x38>)
 8000bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200d      	movs	r0, #13
 8000c08:	f002 fa3a 	bl	8003080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f002 fa53 	bl	80030b8 <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b3e      	ldr	r3, [pc, #248]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c42:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a37      	ldr	r2, [pc, #220]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_GPIO_Init+0x110>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	21a0      	movs	r1, #160	@ 0xa0
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9e:	f002 fd2b 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000ca8:	f002 fd26 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	@ 0x40
 8000cb0:	4821      	ldr	r0, [pc, #132]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000cb2:	f002 fd21 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481a      	ldr	r0, [pc, #104]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000cce:	f002 fb69 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 8000cd2:	23a0      	movs	r3, #160	@ 0xa0
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cec:	f002 fb5a 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000d08:	f002 fb4c 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d0c:	2340      	movs	r3, #64	@ 0x40
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000d24:	f002 fb3e 	bl	80033a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800

08000d3c <SetPWMFrequency>:
//}



void SetPWMFrequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a0      	sub	sp, #128	@ 0x80
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq(); // Get the timer clock frequency
 8000d48:	f003 fc12 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8000d4c:	67f8      	str	r0, [r7, #124]	@ 0x7c
//    uint32_t prescaler = 0;
    uint32_t period = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	67bb      	str	r3, [r7, #120]	@ 0x78

    if (htim == &htim15) {
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4a4f      	ldr	r2, [pc, #316]	@ (8000e94 <SetPWMFrequency+0x158>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d162      	bne.n	8000e20 <SetPWMFrequency+0xe4>
    	if (dirChanged_h) {
 8000d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e98 <SetPWMFrequency+0x15c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03d      	beq.n	8000dde <SetPWMFrequency+0xa2>
        	if (frequency + prev_freq_h >= MAX_FREQ_STEP_H - 500) { // used -400
 8000d62:	4b4e      	ldr	r3, [pc, #312]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d922      	bls.n	8000db8 <SetPWMFrequency+0x7c>
        		if (prev_freq_h < SMALL_FREQ_STEP_H) {
 8000d72:	4b4a      	ldr	r3, [pc, #296]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d7a:	d217      	bcs.n	8000dac <SetPWMFrequency+0x70>
        			if (curDirState_h == GPIO_PIN_RESET) {
 8000d7c:	4b48      	ldr	r3, [pc, #288]	@ (8000ea0 <SetPWMFrequency+0x164>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <SetPWMFrequency+0x50>
        				curDirState_h = GPIO_PIN_SET;
 8000d84:	4b46      	ldr	r3, [pc, #280]	@ (8000ea0 <SetPWMFrequency+0x164>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e002      	b.n	8000d92 <SetPWMFrequency+0x56>
        			} else {
        				curDirState_h = GPIO_PIN_RESET;
 8000d8c:	4b44      	ldr	r3, [pc, #272]	@ (8000ea0 <SetPWMFrequency+0x164>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
        			}
        			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000d92:	2101      	movs	r1, #1
 8000d94:	4843      	ldr	r0, [pc, #268]	@ (8000ea4 <SetPWMFrequency+0x168>)
 8000d96:	f002 fcc7 	bl	8003728 <HAL_GPIO_TogglePin>
        			dirChanged_h = false;
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e98 <SetPWMFrequency+0x15c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
        			frequency = SMALL_FREQ_STEP_H - prev_freq_h;
 8000da0:	4b3e      	ldr	r3, [pc, #248]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f5c3 7316 	rsb	r3, r3, #600	@ 0x258
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	e036      	b.n	8000e1a <SetPWMFrequency+0xde>
        		} else {
        			frequency = prev_freq_h - SMALL_FREQ_STEP_H;
 8000dac:	4b3b      	ldr	r3, [pc, #236]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e030      	b.n	8000e1a <SetPWMFrequency+0xde>
        		}

        	} else {
    			if (curDirState_h == GPIO_PIN_RESET) {
 8000db8:	4b39      	ldr	r3, [pc, #228]	@ (8000ea0 <SetPWMFrequency+0x164>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d103      	bne.n	8000dc8 <SetPWMFrequency+0x8c>
    				curDirState_h = GPIO_PIN_SET;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ea0 <SetPWMFrequency+0x164>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e002      	b.n	8000dce <SetPWMFrequency+0x92>
    			} else {
    				curDirState_h = GPIO_PIN_RESET;
 8000dc8:	4b35      	ldr	r3, [pc, #212]	@ (8000ea0 <SetPWMFrequency+0x164>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
    			}
    			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4834      	ldr	r0, [pc, #208]	@ (8000ea4 <SetPWMFrequency+0x168>)
 8000dd2:	f002 fca9 	bl	8003728 <HAL_GPIO_TogglePin>
    			dirChanged_h = false;
 8000dd6:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <SetPWMFrequency+0x15c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e01d      	b.n	8000e1a <SetPWMFrequency+0xde>


        	}
    	} else if (frequency >= prev_freq_h + MAX_FREQ_STEP_H) {
 8000dde:	4b2f      	ldr	r3, [pc, #188]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d305      	bcc.n	8000df8 <SetPWMFrequency+0xbc>
//        	frequency = (frequency + prev_freq_h)/2;
        	// 2500, 500 works well for 20000 Hz
    			// also 1000, 700
        	// 2000, 100-150 works well for 25000 Hz
        	frequency = prev_freq_h + SMALL_FREQ_STEP_H;
 8000dec:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e010      	b.n	8000e1a <SetPWMFrequency+0xde>
        }
        else if (prev_freq_h >= MAX_FREQ_STEP_H && frequency <= prev_freq_h - MAX_FREQ_STEP_H) {
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e00:	d30b      	bcc.n	8000e1a <SetPWMFrequency+0xde>
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d804      	bhi.n	8000e1a <SetPWMFrequency+0xde>
        	frequency = prev_freq_h - SMALL_FREQ_STEP_H;
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8000e18:	607b      	str	r3, [r7, #4]
        }
        prev_freq_h = frequency;
 8000e1a:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <SetPWMFrequency+0x160>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6013      	str	r3, [r2, #0]
//        period = (timer_clock / (frequency * (prescaler + 1))) - 1;
//        if (period <= 0xFFFF) {
//            break;
//        }
//    }
    if (frequency==0) HAL_TIM_PWM_Stop(htim, channel);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d104      	bne.n	8000e30 <SetPWMFrequency+0xf4>
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f004 fb41 	bl	80054b0 <HAL_TIM_PWM_Stop>
 8000e2e:	e017      	b.n	8000e60 <SetPWMFrequency+0x124>
    else {
    	period = (timer_clock) / (frequency * (79 + 1)) - 1;
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e42:	3b01      	subs	r3, #1
 8000e44:	67bb      	str	r3, [r7, #120]	@ 0x78
        htim->Instance->ARR = period;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
//        TIM16->CCR1 = period/2;
        htim->Instance->CCR1 = period/2;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e54:	0852      	lsrs	r2, r2, #1
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34

        // Update registers
        HAL_TIM_PWM_Start(htim, channel);
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f004 fa22 	bl	80052a4 <HAL_TIM_PWM_Start>

    // Update the timer settings
//    htim->Instance->PSC = prescaler;

    char msg_buf[100];
    sprintf(msg_buf, "current frequency: %lu\r\n", frequency);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4910      	ldr	r1, [pc, #64]	@ (8000ea8 <SetPWMFrequency+0x16c>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 ffd9 	bl	8006e20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9ac 	bl	80001d0 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 0114 	add.w	r1, r7, #20
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <SetPWMFrequency+0x170>)
 8000e86:	f005 f9a7 	bl	80061d8 <HAL_UART_Transmit>
    // NOTE: NOT SURE IF THIS DELAY SHOULD BE IN HERE YET
//    HAL_Delay(10);
//    HAL_Delay(150);

}
 8000e8a:	bf00      	nop
 8000e8c:	3780      	adds	r7, #128	@ 0x80
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000188 	.word	0x20000188
 8000e98:	200003ba 	.word	0x200003ba
 8000e9c:	200003bc 	.word	0x200003bc
 8000ea0:	200003b9 	.word	0x200003b9
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	0800830c 	.word	0x0800830c
 8000eac:	20000268 	.word	0x20000268

08000eb0 <pullTrigger>:

void pullTrigger(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09c      	sub	sp, #112	@ 0x70
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]

	TIM3->CCR1 = 250;
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <pullTrigger+0x60>)
 8000ebc:	22fa      	movs	r2, #250	@ 0xfa
 8000ebe:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(htim, channel);
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f004 f9ee 	bl	80052a4 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ecc:	f000 fdda 	bl	8001a84 <HAL_Delay>
	TIM3->CCR1 = 50;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <pullTrigger+0x60>)
 8000ed2:	2232      	movs	r2, #50	@ 0x32
 8000ed4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(htim, channel);
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f004 f9e3 	bl	80052a4 <HAL_TIM_PWM_Start>

    char msg_buf[100];
    sprintf(msg_buf, "Trigger pulled");
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <pullTrigger+0x64>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 ff9b 	bl	8006e20 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f96e 	bl	80001d0 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <pullTrigger+0x68>)
 8000f02:	f005 f969 	bl	80061d8 <HAL_UART_Transmit>
}
 8000f06:	bf00      	nop
 8000f08:	3770      	adds	r7, #112	@ 0x70
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000400 	.word	0x40000400
 8000f14:	08008328 	.word	0x08008328
 8000f18:	20000268 	.word	0x20000268

08000f1c <parse_cmd>:


void parse_cmd(char * in_buf) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0a4      	sub	sp, #144	@ 0x90
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	 Kind of difficult to debug with the debugger because it messes with the data
	 transmission timing.

	 Direction shift is also not working for some reason, so I need to figure that out.
	 */
	if (strlen(in_buf)<5) return;
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	f240 80f4 	bls.w	800111a <parse_cmd+0x1fe>
	char buf[12];
	strcpy(buf, in_buf);
 8000f32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 f968 	bl	800720e <strcpy>
//		for (int i=0; i<5; i++) {
//			if (buf[i]==47) return;
//		}
//	}
	char msg_buf[100];
	sprintf(msg_buf, "buf: %s\r\n", buf);
 8000f3e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	497a      	ldr	r1, [pc, #488]	@ (8001130 <parse_cmd+0x214>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f005 ff69 	bl	8006e20 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f93c 	bl	80001d0 <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f107 0108 	add.w	r1, r7, #8
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f64:	4873      	ldr	r0, [pc, #460]	@ (8001134 <parse_cmd+0x218>)
 8000f66:	f005 f937 	bl	80061d8 <HAL_UART_Transmit>



	char *token = strtok(buf, ",");
 8000f6a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f6e:	4972      	ldr	r1, [pc, #456]	@ (8001138 <parse_cmd+0x21c>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 f8bb 	bl	80070ec <strtok>
 8000f76:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int leftJoystickX = atoi(token);
 8000f7a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f7e:	f005 ff4a 	bl	8006e16 <atoi>
 8000f82:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (strlen(token)>1 && leftJoystickX==0) return;
 8000f86:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000f8a:	f7ff f921 	bl	80001d0 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d904      	bls.n	8000f9e <parse_cmd+0x82>
 8000f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80c0 	beq.w	800111e <parse_cmd+0x202>
//	if (strlen(token)>1 && leftJoystickX==0) return;
//	sprintf(msg_buf, "token: %s\r\n", token);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
	token = strtok(NULL, ",");
 8000f9e:	4966      	ldr	r1, [pc, #408]	@ (8001138 <parse_cmd+0x21c>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f006 f8a3 	bl	80070ec <strtok>
 8000fa6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
//	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);
	int leftJoystickY = atoi(token);
 8000faa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fae:	f005 ff32 	bl	8006e16 <atoi>
 8000fb2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	if (strlen(token)>1 && leftJoystickY==0) return;
 8000fb6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fba:	f7ff f909 	bl	80001d0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d904      	bls.n	8000fce <parse_cmd+0xb2>
 8000fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80aa 	beq.w	8001122 <parse_cmd+0x206>
//	sprintf(msg_buf, "left joystick y: %d\r\n", leftJoystickY);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
	token = strtok(NULL, "/");
 8000fce:	495b      	ldr	r1, [pc, #364]	@ (800113c <parse_cmd+0x220>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f006 f88b 	bl	80070ec <strtok>
 8000fd6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	int triggerPulled = atoi(token);
 8000fda:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000fde:	f005 ff1a 	bl	8006e16 <atoi>
 8000fe2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	if (token==NULL) return;
 8000fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 809b 	beq.w	8001126 <parse_cmd+0x20a>
	sprintf(msg_buf, "token: %s\r\n", token);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000ff8:	4951      	ldr	r1, [pc, #324]	@ (8001140 <parse_cmd+0x224>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 ff10 	bl	8006e20 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8e3 	bl	80001d0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f107 0108 	add.w	r1, r7, #8
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001016:	4847      	ldr	r0, [pc, #284]	@ (8001134 <parse_cmd+0x218>)
 8001018:	f005 f8de 	bl	80061d8 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (uint8_t*)token, strlen(token), HAL_MAX_DELAY);

//	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
//	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);

	if (curDirState_v == GPIO_PIN_SET && leftJoystickY<0) {
 800101c:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <parse_cmd+0x228>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10b      	bne.n	800103c <parse_cmd+0x120>
 8001024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001028:	2b00      	cmp	r3, #0
 800102a:	da07      	bge.n	800103c <parse_cmd+0x120>
	    // Pin is high
		HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_6);
 800102c:	2140      	movs	r1, #64	@ 0x40
 800102e:	4846      	ldr	r0, [pc, #280]	@ (8001148 <parse_cmd+0x22c>)
 8001030:	f002 fb7a 	bl	8003728 <HAL_GPIO_TogglePin>
		curDirState_v = GPIO_PIN_RESET;
 8001034:	4b43      	ldr	r3, [pc, #268]	@ (8001144 <parse_cmd+0x228>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e00e      	b.n	800105a <parse_cmd+0x13e>
	} else if (curDirState_v == GPIO_PIN_RESET && leftJoystickY>0){
 800103c:	4b41      	ldr	r3, [pc, #260]	@ (8001144 <parse_cmd+0x228>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10a      	bne.n	800105a <parse_cmd+0x13e>
 8001044:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001048:	2b00      	cmp	r3, #0
 800104a:	dd06      	ble.n	800105a <parse_cmd+0x13e>
	    // Pin is low
		HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_6);
 800104c:	2140      	movs	r1, #64	@ 0x40
 800104e:	483e      	ldr	r0, [pc, #248]	@ (8001148 <parse_cmd+0x22c>)
 8001050:	f002 fb6a 	bl	8003728 <HAL_GPIO_TogglePin>
		curDirState_v = GPIO_PIN_SET;
 8001054:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <parse_cmd+0x228>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
	}

	if (curDirState_h == GPIO_PIN_SET && leftJoystickX<0) {
 800105a:	4b3c      	ldr	r3, [pc, #240]	@ (800114c <parse_cmd+0x230>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <parse_cmd+0x156>
 8001062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001066:	2b00      	cmp	r3, #0
 8001068:	da03      	bge.n	8001072 <parse_cmd+0x156>
		// Pin is high
//		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
//		curDirState_h = GPIO_PIN_RESET;
		dirChanged_h = true;
 800106a:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <parse_cmd+0x234>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e00a      	b.n	8001088 <parse_cmd+0x16c>
	} else if (curDirState_h == GPIO_PIN_RESET && leftJoystickX>0){
 8001072:	4b36      	ldr	r3, [pc, #216]	@ (800114c <parse_cmd+0x230>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <parse_cmd+0x16c>
 800107a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800107e:	2b00      	cmp	r3, #0
 8001080:	dd02      	ble.n	8001088 <parse_cmd+0x16c>
		// Pin is low
//		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
//		curDirState_h = GPIO_PIN_SET;
		dirChanged_h = true;
 8001082:	4b33      	ldr	r3, [pc, #204]	@ (8001150 <parse_cmd+0x234>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
//		prev_leftJoystickX = leftJoystickX;
//	}



	if (leftJoystickY<0) {
 8001088:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800108c:	2b00      	cmp	r3, #0
 800108e:	da04      	bge.n	800109a <parse_cmd+0x17e>
		leftJoystickY = -leftJoystickY;
 8001090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001094:	425b      	negs	r3, r3
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	if (leftJoystickX<0) {
 800109a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da04      	bge.n	80010ac <parse_cmd+0x190>
		leftJoystickX = -leftJoystickX;
 80010a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010a6:	425b      	negs	r3, r3
 80010a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	uint32_t frequency_v = ((uint32_t)(leftJoystickY)*MAX_FREQ_V)/128; // note: max is 3000
 80010ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010b0:	2296      	movs	r2, #150	@ 0x96
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	09db      	lsrs	r3, r3, #7
 80010b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint32_t frequency_h = ((uint32_t) leftJoystickX*MAX_FREQ_H)/128;
 80010ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010be:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	09db      	lsrs	r3, r3, #7
 80010c8:	67bb      	str	r3, [r7, #120]	@ 0x78
	if (triggerPulled==1) pullTrigger(&htim3, TIM_CHANNEL_1);
 80010ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d103      	bne.n	80010da <parse_cmd+0x1be>
 80010d2:	2100      	movs	r1, #0
 80010d4:	481f      	ldr	r0, [pc, #124]	@ (8001154 <parse_cmd+0x238>)
 80010d6:	f7ff feeb 	bl	8000eb0 <pullTrigger>
//	if (frequency==0) frequency = 1;
	sprintf(msg_buf, "freq: %lu\r\n", frequency_v);
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80010e0:	491d      	ldr	r1, [pc, #116]	@ (8001158 <parse_cmd+0x23c>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 fe9c 	bl	8006e20 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), HAL_MAX_DELAY);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <parse_cmd+0x218>)
 8001100:	f005 f86a 	bl	80061d8 <HAL_UART_Transmit>
	SetPWMFrequency(&htim16, TIM_CHANNEL_1, frequency_v);
 8001104:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001106:	2100      	movs	r1, #0
 8001108:	4814      	ldr	r0, [pc, #80]	@ (800115c <parse_cmd+0x240>)
 800110a:	f7ff fe17 	bl	8000d3c <SetPWMFrequency>
	SetPWMFrequency(&htim15, TIM_CHANNEL_1, frequency_h);
 800110e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001110:	2100      	movs	r1, #0
 8001112:	4813      	ldr	r0, [pc, #76]	@ (8001160 <parse_cmd+0x244>)
 8001114:	f7ff fe12 	bl	8000d3c <SetPWMFrequency>
 8001118:	e006      	b.n	8001128 <parse_cmd+0x20c>
	if (strlen(in_buf)<5) return;
 800111a:	bf00      	nop
 800111c:	e004      	b.n	8001128 <parse_cmd+0x20c>
	if (strlen(token)>1 && leftJoystickX==0) return;
 800111e:	bf00      	nop
 8001120:	e002      	b.n	8001128 <parse_cmd+0x20c>
	if (strlen(token)>1 && leftJoystickY==0) return;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <parse_cmd+0x20c>
	if (token==NULL) return;
 8001126:	bf00      	nop
//		}
//	}
//	char msg_buf[100];
//	sprintf(msg_buf, "second cmd: %s", cmds[1]);
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, 20, HAL_MAX_DELAY);
}
 8001128:	3790      	adds	r7, #144	@ 0x90
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08008338 	.word	0x08008338
 8001134:	20000268 	.word	0x20000268
 8001138:	08008344 	.word	0x08008344
 800113c:	08008348 	.word	0x08008348
 8001140:	0800834c 	.word	0x0800834c
 8001144:	200003b8 	.word	0x200003b8
 8001148:	48000800 	.word	0x48000800
 800114c:	200003b9 	.word	0x200003b9
 8001150:	200003ba 	.word	0x200003ba
 8001154:	2000013c 	.word	0x2000013c
 8001158:	08008358 	.word	0x08008358
 800115c:	200001d4 	.word	0x200001d4
 8001160:	20000188 	.word	0x20000188

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_MspInit+0x44>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <HAL_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	@ 0x60
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_MspInit+0x44>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	@ 0x58
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0ac      	sub	sp, #176	@ 0xb0
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2288      	movs	r2, #136	@ 0x88
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 ffe3 	bl	80071a4 <memset>
  if(hadc->Instance==ADC1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a27      	ldr	r2, [pc, #156]	@ (8001280 <HAL_ADC_MspInit+0xc8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d147      	bne.n	8001278 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011fe:	2308      	movs	r3, #8
 8001200:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001202:	2307      	movs	r3, #7
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800120e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fa67 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001224:	f7ff ff9e 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_ADC_MspInit+0xcc>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <HAL_ADC_MspInit+0xcc>)
 800122e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_ADC_MspInit+0xcc>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_ADC_MspInit+0xcc>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	4a0f      	ldr	r2, [pc, #60]	@ (8001284 <HAL_ADC_MspInit+0xcc>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <HAL_ADC_MspInit+0xcc>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800125e:	230b      	movs	r3, #11
 8001260:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f002 f896 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	37b0      	adds	r7, #176	@ 0xb0
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	50040000 	.word	0x50040000
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ac      	sub	sp, #176	@ 0xb0
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2288      	movs	r2, #136	@ 0x88
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 ff7b 	bl	80071a4 <memset>
  if(hi2c->Instance==I2C1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <HAL_I2C_MspInit+0xb0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d13a      	bne.n	800132e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fa11 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff ff48 	bl	8001164 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_I2C_MspInit+0xb4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	4a18      	ldr	r2, [pc, #96]	@ (800133c <HAL_I2C_MspInit+0xb4>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <HAL_I2C_MspInit+0xb4>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ec:	23c0      	movs	r3, #192	@ 0xc0
 80012ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f2:	2312      	movs	r3, #18
 80012f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001304:	2304      	movs	r3, #4
 8001306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	@ (8001340 <HAL_I2C_MspInit+0xb8>)
 8001312:	f002 f847 	bl	80033a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_I2C_MspInit+0xb4>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_I2C_MspInit+0xb4>)
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_I2C_MspInit+0xb4>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	37b0      	adds	r7, #176	@ 0xb0
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400

08001344 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10c      	bne.n	8001370 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <HAL_TIM_PWM_MspInit+0x60>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6593      	str	r3, [r2, #88]	@ 0x58
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800136e:	e010      	b.n	8001392 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10b      	bne.n	8001392 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_TIM_PWM_MspInit+0x60>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001384:	6613      	str	r3, [r2, #96]	@ 0x60
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40014000 	.word	0x40014000

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <HAL_TIM_Base_MspInit+0x94>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d13c      	bne.n	8001438 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_TIM_Base_MspInit+0x98>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	4a20      	ldr	r2, [pc, #128]	@ (8001444 <HAL_TIM_Base_MspInit+0x98>)
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <HAL_TIM_Base_MspInit+0x98>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013d8:	4a1c      	ldr	r2, [pc, #112]	@ (800144c <HAL_TIM_Base_MspInit+0xa0>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013de:	2204      	movs	r2, #4
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013f0:	2280      	movs	r2, #128	@ 0x80
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 80013fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001402:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8001410:	480d      	ldr	r0, [pc, #52]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 8001412:	f001 fe5f 	bl	80030d4 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800141c:	f7ff fea2 	bl	8001164 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
 8001426:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 8001430:	621a      	str	r2, [r3, #32]
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <HAL_TIM_Base_MspInit+0x9c>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40014400 	.word	0x40014400
 8001444:	40021000 	.word	0x40021000
 8001448:	20000220 	.word	0x20000220
 800144c:	40020030 	.word	0x40020030

08001450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a34      	ldr	r2, [pc, #208]	@ (8001540 <HAL_TIM_MspPostInit+0xf0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11c      	bne.n	80014ac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b34      	ldr	r3, [pc, #208]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	4a33      	ldr	r2, [pc, #204]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147e:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800149a:	2302      	movs	r3, #2
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4828      	ldr	r0, [pc, #160]	@ (8001548 <HAL_TIM_MspPostInit+0xf8>)
 80014a6:	f001 ff7d 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80014aa:	e044      	b.n	8001536 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM15)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a26      	ldr	r2, [pc, #152]	@ (800154c <HAL_TIM_MspPostInit+0xfc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d11d      	bne.n	80014f2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80014e0:	230e      	movs	r3, #14
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4817      	ldr	r0, [pc, #92]	@ (8001548 <HAL_TIM_MspPostInit+0xf8>)
 80014ec:	f001 ff5a 	bl	80033a4 <HAL_GPIO_Init>
}
 80014f0:	e021      	b.n	8001536 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM16)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a16      	ldr	r2, [pc, #88]	@ (8001550 <HAL_TIM_MspPostInit+0x100>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d11c      	bne.n	8001536 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_TIM_MspPostInit+0xf4>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001514:	2340      	movs	r3, #64	@ 0x40
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001524:	230e      	movs	r3, #14
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f001 ff37 	bl	80033a4 <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40000400 	.word	0x40000400
 8001544:	40021000 	.word	0x40021000
 8001548:	48000400 	.word	0x48000400
 800154c:	40014000 	.word	0x40014000
 8001550:	40014400 	.word	0x40014400

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ae      	sub	sp, #184	@ 0xb8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f005 fe15 	bl	80071a4 <memset>
  if(huart->Instance==USART2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a42      	ldr	r2, [pc, #264]	@ (8001688 <HAL_UART_MspInit+0x134>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d13c      	bne.n	80015fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001584:	2302      	movs	r3, #2
 8001586:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001588:	2300      	movs	r3, #0
 800158a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4618      	mov	r0, r3
 8001592:	f003 f8ab 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800159c:	f7ff fde2 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <HAL_UART_MspInit+0x138>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	4a39      	ldr	r2, [pc, #228]	@ (800168c <HAL_UART_MspInit+0x138>)
 80015a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ac:	4b37      	ldr	r3, [pc, #220]	@ (800168c <HAL_UART_MspInit+0x138>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b34      	ldr	r3, [pc, #208]	@ (800168c <HAL_UART_MspInit+0x138>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	4a33      	ldr	r2, [pc, #204]	@ (800168c <HAL_UART_MspInit+0x138>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <HAL_UART_MspInit+0x138>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d0:	230c      	movs	r3, #12
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e8:	2307      	movs	r3, #7
 80015ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f8:	f001 fed4 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015fc:	e03f      	b.n	800167e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <HAL_UART_MspInit+0x13c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d13a      	bne.n	800167e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001608:	2304      	movs	r3, #4
 800160a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800160c:	2300      	movs	r3, #0
 800160e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f003 f869 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001620:	f7ff fda0 	bl	8001164 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_UART_MspInit+0x138>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	4a18      	ldr	r2, [pc, #96]	@ (800168c <HAL_UART_MspInit+0x138>)
 800162a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800162e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_UART_MspInit+0x138>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <HAL_UART_MspInit+0x138>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001640:	4a12      	ldr	r2, [pc, #72]	@ (800168c <HAL_UART_MspInit+0x138>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_UART_MspInit+0x138>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001654:	2330      	movs	r3, #48	@ 0x30
 8001656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800166c:	2307      	movs	r3, #7
 800166e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001676:	4619      	mov	r1, r3
 8001678:	4806      	ldr	r0, [pc, #24]	@ (8001694 <HAL_UART_MspInit+0x140>)
 800167a:	f001 fe93 	bl	80033a4 <HAL_GPIO_Init>
}
 800167e:	bf00      	nop
 8001680:	37b8      	adds	r7, #184	@ 0xb8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40004400 	.word	0x40004400
 800168c:	40021000 	.word	0x40021000
 8001690:	40004800 	.word	0x40004800
 8001694:	48000800 	.word	0x48000800

08001698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	@ 0x38
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016a6:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <HAL_InitTick+0xe0>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	4a33      	ldr	r2, [pc, #204]	@ (8001778 <HAL_InitTick+0xe0>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_InitTick+0xe0>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016be:	f107 0210 	add.w	r2, r7, #16
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 ff7d 	bl	80045c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016d8:	f002 ff4a 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80016dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80016de:	e004      	b.n	80016ea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016e0:	f002 ff46 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80016e4:	4603      	mov	r3, r0
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ec:	4a23      	ldr	r2, [pc, #140]	@ (800177c <HAL_InitTick+0xe4>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	3b01      	subs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_InitTick+0xe8>)
 80016fa:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <HAL_InitTick+0xec>)
 80016fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_InitTick+0xe8>)
 8001700:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001704:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001706:	4a1e      	ldr	r2, [pc, #120]	@ (8001780 <HAL_InitTick+0xe8>)
 8001708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <HAL_InitTick+0xe8>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_InitTick+0xe8>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_InitTick+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800171e:	4818      	ldr	r0, [pc, #96]	@ (8001780 <HAL_InitTick+0xe8>)
 8001720:	f003 fca0 	bl	8005064 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800172a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11b      	bne.n	800176a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001732:	4813      	ldr	r0, [pc, #76]	@ (8001780 <HAL_InitTick+0xe8>)
 8001734:	f003 fcee 	bl	8005114 <HAL_TIM_Base_Start_IT>
 8001738:	4603      	mov	r3, r0
 800173a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800173e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001742:	2b00      	cmp	r3, #0
 8001744:	d111      	bne.n	800176a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001746:	2036      	movs	r0, #54	@ 0x36
 8001748:	f001 fcb6 	bl	80030b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	d808      	bhi.n	8001764 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001752:	2200      	movs	r2, #0
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	2036      	movs	r0, #54	@ 0x36
 8001758:	f001 fc92 	bl	8003080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800175c:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <HAL_InitTick+0xf0>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e002      	b.n	800176a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800176a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800176e:	4618      	mov	r0, r3
 8001770:	3738      	adds	r7, #56	@ 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	431bde83 	.word	0x431bde83
 8001780:	200003c0 	.word	0x200003c0
 8001784:	40001000 	.word	0x40001000
 8001788:	20000004 	.word	0x20000004

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f000 f92f 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <DMA1_Channel3_IRQHandler+0x10>)
 80017f2:	f001 fd27 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000220 	.word	0x20000220

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181a:	f005 fccb 	bl	80071b4 <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001842:	bf00      	nop
 8001844:	e7fd      	b.n	8001842 <_exit+0x12>

08001846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e00a      	b.n	800186e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001858:	f3af 8000 	nop.w
 800185c:	4601      	mov	r1, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	b2ca      	uxtb	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	dbf0      	blt.n	8001858 <_read+0x12>
  }

  return len;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e009      	b.n	80018a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf1      	blt.n	8001892 <_write+0x12>
  }
  return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_close>:

int _close(int file)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e0:	605a      	str	r2, [r3, #4]
  return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_isatty>:

int _isatty(int file)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	@ (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f005 fc30 	bl	80071b4 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20018000 	.word	0x20018000
 8001980:	00000400 	.word	0x00000400
 8001984:	2000040c 	.word	0x2000040c
 8001988:	20000560 	.word	0x20000560

0800198c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b4:	f7ff ffea 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	@ (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	@ (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019de:	f005 fbef 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e2:	f7fe fdc5 	bl	8000570 <main>

080019e6 <LoopForever>:

LoopForever:
    b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019f4:	080085a0 	.word	0x080085a0
  ldr r2, =_sbss
 80019f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019fc:	20000560 	.word	0x20000560

08001a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_2_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <HAL_Init+0x3c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <HAL_Init+0x3c>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f001 fb25 	bl	800306a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fe39 	bl	8001698 <HAL_InitTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	e001      	b.n	8001a36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a32:	f7ff fb9d 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40022000 	.word	0x40022000

08001a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000410 	.word	0x20000410

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000410 	.word	0x20000410

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff ffee 	bl	8001a6c <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008

08001acc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3360      	adds	r3, #96	@ 0x60
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <LL_ADC_SetOffset+0x44>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	03fff000 	.word	0x03fff000

08001b7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3360      	adds	r3, #96	@ 0x60
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3360      	adds	r3, #96	@ 0x60
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3330      	adds	r3, #48	@ 0x30
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	211f      	movs	r1, #31
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 011f 	and.w	r1, r3, #31
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	0e5b      	lsrs	r3, r3, #25
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	0d1b      	lsrs	r3, r3, #20
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2107      	movs	r1, #7
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	401a      	ands	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	0d1b      	lsrs	r3, r3, #20
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0318 	and.w	r3, r3, #24
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	400b      	ands	r3, r1
 8001cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	0007ffff 	.word	0x0007ffff

08001cfc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 031f 	and.w	r3, r3, #31
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6093      	str	r3, [r2, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dbc:	d101      	bne.n	8001dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001de0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <LL_ADC_IsEnabled+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_ADC_IsEnabled+0x1a>
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e32:	f043 0204 	orr.w	r2, r3, #4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d101      	bne.n	8001e5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e130      	b.n	8002110 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff f97b 	bl	80011b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff3f 	bl	8001d58 <LL_ADC_IsDeepPowerDownEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff25 	bl	8001d34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff5a 	bl	8001da8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d115      	bne.n	8001f26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff3e 	bl	8001d80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f04:	4b84      	ldr	r3, [pc, #528]	@ (8002118 <HAL_ADC_Init+0x284>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	4a84      	ldr	r2, [pc, #528]	@ (800211c <HAL_ADC_Init+0x288>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f9      	bne.n	8001f1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff3c 	bl	8001da8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff75 	bl	8001e46 <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80c9 	bne.w	80020fe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80c5 	bne.w	80020fe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f7c:	f043 0202 	orr.w	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff35 	bl	8001df8 <LL_ADC_IsEnabled>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d115      	bne.n	8001fc0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f94:	4862      	ldr	r0, [pc, #392]	@ (8002120 <HAL_ADC_Init+0x28c>)
 8001f96:	f7ff ff2f 	bl	8001df8 <LL_ADC_IsEnabled>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	4861      	ldr	r0, [pc, #388]	@ (8002124 <HAL_ADC_Init+0x290>)
 8001f9e:	f7ff ff2b 	bl	8001df8 <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	4860      	ldr	r0, [pc, #384]	@ (8002128 <HAL_ADC_Init+0x294>)
 8001fa8:	f7ff ff26 	bl	8001df8 <LL_ADC_IsEnabled>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4323      	orrs	r3, r4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	485c      	ldr	r0, [pc, #368]	@ (800212c <HAL_ADC_Init+0x298>)
 8001fbc:	f7ff fd86 	bl	8001acc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e5b      	ldrb	r3, [r3, #25]
 8001fc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d106      	bne.n	8001ffc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	045b      	lsls	r3, r3, #17
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002008:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <HAL_ADC_Init+0x29c>)
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	430b      	orrs	r3, r1
 800202a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff1b 	bl	8001e6c <LL_ADC_INJ_IsConversionOngoing>
 8002036:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d13d      	bne.n	80020ba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d13a      	bne.n	80020ba <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002048:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002050:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002060:	f023 0302 	bic.w	r3, r3, #2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	69b9      	ldr	r1, [r7, #24]
 800206a:	430b      	orrs	r3, r1
 800206c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002074:	2b01      	cmp	r3, #1
 8002076:	d118      	bne.n	80020aa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800209a:	430a      	orrs	r2, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	611a      	str	r2, [r3, #16]
 80020a8:	e007      	b.n	80020ba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10c      	bne.n	80020dc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	f023 010f 	bic.w	r1, r3, #15
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020da:	e007      	b.n	80020ec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 020f 	bic.w	r2, r2, #15
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	f023 0303 	bic.w	r3, r3, #3
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80020fc:	e007      	b.n	800210e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800210e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3724      	adds	r7, #36	@ 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	20000000 	.word	0x20000000
 800211c:	053e2d63 	.word	0x053e2d63
 8002120:	50040000 	.word	0x50040000
 8002124:	50040100 	.word	0x50040100
 8002128:	50040200 	.word	0x50040200
 800212c:	50040300 	.word	0x50040300
 8002130:	fff0c007 	.word	0xfff0c007

08002134 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800213c:	4857      	ldr	r0, [pc, #348]	@ (800229c <HAL_ADC_Start+0x168>)
 800213e:	f7ff fddd 	bl	8001cfc <LL_ADC_GetMultimode>
 8002142:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fe7c 	bl	8001e46 <LL_ADC_REG_IsConversionOngoing>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 809c 	bne.w	800228e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_ADC_Start+0x30>
 8002160:	2302      	movs	r3, #2
 8002162:	e097      	b.n	8002294 <HAL_ADC_Start+0x160>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fd73 	bl	8002c58 <ADC_Enable>
 8002172:	4603      	mov	r3, r0
 8002174:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 8083 	bne.w	8002284 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a42      	ldr	r2, [pc, #264]	@ (80022a0 <HAL_ADC_Start+0x16c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d002      	beq.n	80021a2 <HAL_ADC_Start+0x6e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_Start+0x70>
 80021a2:	4b40      	ldr	r3, [pc, #256]	@ (80022a4 <HAL_ADC_Start+0x170>)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d002      	beq.n	80021b2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ca:	d106      	bne.n	80021da <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	f023 0206 	bic.w	r2, r3, #6
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	221c      	movs	r2, #28
 80021e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	@ (80022a0 <HAL_ADC_Start+0x16c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d002      	beq.n	8002200 <HAL_ADC_Start+0xcc>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	e000      	b.n	8002202 <HAL_ADC_Start+0xce>
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_ADC_Start+0x170>)
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4293      	cmp	r3, r2
 8002208:	d008      	beq.n	800221c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d002      	beq.n	800221c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b09      	cmp	r3, #9
 800221a:	d114      	bne.n	8002246 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002232:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fded 	bl	8001e1e <LL_ADC_REG_StartConversion>
 8002244:	e025      	b.n	8002292 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <HAL_ADC_Start+0x16c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d002      	beq.n	8002262 <HAL_ADC_Start+0x12e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e000      	b.n	8002264 <HAL_ADC_Start+0x130>
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_ADC_Start+0x170>)
 8002264:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00f      	beq.n	8002292 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800227a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
 8002282:	e006      	b.n	8002292 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800228c:	e001      	b.n	8002292 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	50040300 	.word	0x50040300
 80022a0:	50040100 	.word	0x50040100
 80022a4:	50040000 	.word	0x50040000

080022a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b2:	4866      	ldr	r0, [pc, #408]	@ (800244c <HAL_ADC_PollForConversion+0x1a4>)
 80022b4:	f7ff fd22 	bl	8001cfc <LL_ADC_GetMultimode>
 80022b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d102      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80022c2:	2308      	movs	r3, #8
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e02a      	b.n	800231e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d002      	beq.n	80022da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	d111      	bne.n	80022fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0a4      	b.n	8002442 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022f8:	2304      	movs	r3, #4
 80022fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022fc:	e00f      	b.n	800231e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022fe:	4853      	ldr	r0, [pc, #332]	@ (800244c <HAL_ADC_PollForConversion+0x1a4>)
 8002300:	f7ff fd0a 	bl	8001d18 <LL_ADC_GetMultiDMATransfer>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e093      	b.n	8002442 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800231a:	2304      	movs	r3, #4
 800231c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800231e:	f7ff fba5 	bl	8001a6c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002324:	e021      	b.n	800236a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800232c:	d01d      	beq.n	800236a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800232e:	f7ff fb9d 	bl	8001a6c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <HAL_ADC_PollForConversion+0x9c>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d112      	bne.n	800236a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10b      	bne.n	800236a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	f043 0204 	orr.w	r2, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e06b      	b.n	8002442 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0d6      	beq.n	8002326 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc28 	bl	8001bde <LL_ADC_REG_IsTriggerSourceSWStart>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01c      	beq.n	80023ce <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e5b      	ldrb	r3, [r3, #25]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d118      	bne.n	80023ce <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d111      	bne.n	80023ce <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002450 <HAL_ADC_PollForConversion+0x1a8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d002      	beq.n	80023de <HAL_ADC_PollForConversion+0x136>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e000      	b.n	80023e0 <HAL_ADC_PollForConversion+0x138>
 80023de:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_ADC_PollForConversion+0x1ac>)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d002      	beq.n	80023fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b09      	cmp	r3, #9
 80023f8:	d104      	bne.n	8002404 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e00c      	b.n	800241e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_ADC_PollForConversion+0x1a8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d002      	beq.n	8002414 <HAL_ADC_PollForConversion+0x16c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e000      	b.n	8002416 <HAL_ADC_PollForConversion+0x16e>
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_ADC_PollForConversion+0x1ac>)
 8002416:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d104      	bne.n	800242e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2208      	movs	r2, #8
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e008      	b.n	8002440 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	220c      	movs	r2, #12
 800243e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	50040300 	.word	0x50040300
 8002450:	50040100 	.word	0x50040100
 8002454:	50040000 	.word	0x50040000

08002458 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0b6      	sub	sp, #216	@ 0xd8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x22>
 8002492:	2302      	movs	r3, #2
 8002494:	e3c9      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x7b6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fccf 	bl	8001e46 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 83aa 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d824      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	3b02      	subs	r3, #2
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d81b      	bhi.n	8002502 <HAL_ADC_ConfigChannel+0x8e>
 80024ca:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <HAL_ADC_ConfigChannel+0x5c>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	080024f1 	.word	0x080024f1
 80024dc:	080024f9 	.word	0x080024f9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024e0:	230c      	movs	r3, #12
 80024e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024e6:	e010      	b.n	800250a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024e8:	2312      	movs	r3, #18
 80024ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024ee:	e00c      	b.n	800250a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024f0:	2318      	movs	r3, #24
 80024f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024f6:	e008      	b.n	800250a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80024f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002500:	e003      	b.n	800250a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002502:	2306      	movs	r3, #6
 8002504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002508:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002518:	f7ff fb74 	bl	8001c04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc90 	bl	8001e46 <LL_ADC_REG_IsConversionOngoing>
 8002526:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fc9c 	bl	8001e6c <LL_ADC_INJ_IsConversionOngoing>
 8002534:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 81a4 	bne.w	800288a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 819f 	bne.w	800288a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	461a      	mov	r2, r3
 800255a:	f7ff fb7f 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d00a      	beq.n	8002596 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6919      	ldr	r1, [r3, #16]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002590:	f7ff fad0 	bl	8001b34 <LL_ADC_SetOffset>
 8002594:	e179      	b.n	800288a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff faed 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x14e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fae2 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	e01e      	b.n	8002600 <HAL_ADC_ConfigChannel+0x18c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fad7 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e004      	b.n	80025fe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80025f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1a4>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	e018      	b.n	800264a <HAL_ADC_ConfigChannel+0x1d6>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800262c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e004      	b.n	800264a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800264a:	429a      	cmp	r2, r3
 800264c:	d106      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff faa6 	bl	8001ba8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fa8a 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x214>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fa7f 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	f003 021f 	and.w	r2, r3, #31
 8002686:	e01e      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x252>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fa74 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e004      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_ConfigChannel+0x26a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	e018      	b.n	8002710 <HAL_ADC_ConfigChannel+0x29c>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80026f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80026fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e004      	b.n	8002710 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002706:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002710:	429a      	cmp	r2, r3
 8002712:	d106      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fa43 	bl	8001ba8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fa27 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <HAL_ADC_ConfigChannel+0x2da>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2102      	movs	r1, #2
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fa1c 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	e01e      	b.n	800278c <HAL_ADC_ConfigChannel+0x318>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fa11 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800276c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e004      	b.n	800278a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x330>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	e014      	b.n	80027ce <HAL_ADC_ConfigChannel+0x35a>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e004      	b.n	80027ce <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2102      	movs	r1, #2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f9e4 	bl	8001ba8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2103      	movs	r1, #3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f9c8 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_ADC_ConfigChannel+0x398>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2103      	movs	r1, #3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f9bd 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	e017      	b.n	800283c <HAL_ADC_ConfigChannel+0x3c8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2103      	movs	r1, #3
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f9b2 	bl	8001b7c <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002826:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x3e0>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	e011      	b.n	8002878 <HAL_ADC_ConfigChannel+0x404>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002864:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800286c:	2320      	movs	r3, #32
 800286e:	e003      	b.n	8002878 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002878:	429a      	cmp	r2, r3
 800287a:	d106      	bne.n	800288a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	2103      	movs	r1, #3
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f98f 	bl	8001ba8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fab2 	bl	8001df8 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 8140 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f7ff fa03 	bl	8001cb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a8f      	ldr	r2, [pc, #572]	@ (8002af0 <HAL_ADC_ConfigChannel+0x67c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f040 8131 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x46e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2b09      	cmp	r3, #9
 80028d8:	bf94      	ite	ls
 80028da:	2301      	movls	r3, #1
 80028dc:	2300      	movhi	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	e019      	b.n	8002916 <HAL_ADC_ConfigChannel+0x4a2>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80028f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80028f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e003      	b.n	8002906 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2b09      	cmp	r3, #9
 800290e:	bf94      	ite	ls
 8002910:	2301      	movls	r3, #1
 8002912:	2300      	movhi	r3, #0
 8002914:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002916:	2b00      	cmp	r3, #0
 8002918:	d079      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x4c2>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	3301      	adds	r3, #1
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002934:	e015      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4ee>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002946:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e003      	b.n	800295a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	3301      	adds	r3, #1
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x50e>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	3301      	adds	r3, #1
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	e017      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x53e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002992:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800299a:	2320      	movs	r3, #32
 800299c:	e003      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800299e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x564>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 021f 	and.w	r2, r3, #31
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	051b      	lsls	r3, r3, #20
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x596>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80029ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80029f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	e081      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x5b6>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	069b      	lsls	r3, r3, #26
 8002a24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a28:	e015      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x5e2>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e003      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	069b      	lsls	r3, r3, #26
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x602>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	e017      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x632>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	61bb      	str	r3, [r7, #24]
  return result;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	ea42 0103 	orr.w	r1, r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x65e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 021f 	and.w	r2, r3, #31
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b1e      	subs	r3, #30
 8002aca:	051b      	lsls	r3, r3, #20
 8002acc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ad0:	e01e      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x69c>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	60fb      	str	r3, [r7, #12]
  return result;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e006      	b.n	8002afc <HAL_ADC_ConfigChannel+0x688>
 8002aee:	bf00      	nop
 8002af0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 021f 	and.w	r2, r3, #31
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	3b1e      	subs	r3, #30
 8002b0a:	051b      	lsls	r3, r3, #20
 8002b0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b16:	4619      	mov	r1, r3
 8002b18:	f7ff f8a0 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b44      	ldr	r3, [pc, #272]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d07a      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b28:	4843      	ldr	r0, [pc, #268]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b2a:	f7fe fff5 	bl	8001b18 <LL_ADC_GetCommonPathInternalCh>
 8002b2e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a41      	ldr	r2, [pc, #260]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d12c      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d126      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x6e8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3b      	ldr	r2, [pc, #236]	@ (8002c44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d15d      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b64:	4619      	mov	r1, r3
 8002b66:	4834      	ldr	r0, [pc, #208]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b68:	f7fe ffc3 	bl	8001af2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b6c:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	4a36      	ldr	r2, [pc, #216]	@ (8002c4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b86:	e002      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b94:	e040      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d118      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d112      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x74c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d12d      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc8:	4619      	mov	r1, r3
 8002bca:	481b      	ldr	r0, [pc, #108]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bcc:	f7fe ff91 	bl	8001af2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd0:	e024      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_ADC_ConfigChannel+0x7e0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d120      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11a      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a14      	ldr	r2, [pc, #80]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d115      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480e      	ldr	r0, [pc, #56]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bfe:	f7fe ff78 	bl	8001af2 <LL_ADC_SetCommonPathInternalCh>
 8002c02:	e00c      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c16:	e002      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	37d8      	adds	r7, #216	@ 0xd8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	80080000 	.word	0x80080000
 8002c38:	50040300 	.word	0x50040300
 8002c3c:	c7520000 	.word	0xc7520000
 8002c40:	50040000 	.word	0x50040000
 8002c44:	50040200 	.word	0x50040200
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	053e2d63 	.word	0x053e2d63
 8002c50:	cb840000 	.word	0xcb840000
 8002c54:	80000001 	.word	0x80000001

08002c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f8c5 	bl	8001df8 <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d169      	bne.n	8002d48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <ADC_Enable+0xfc>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e055      	b.n	8002d4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f894 	bl	8001dd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ca8:	482b      	ldr	r0, [pc, #172]	@ (8002d58 <ADC_Enable+0x100>)
 8002caa:	f7fe ff35 	bl	8001b18 <LL_ADC_GetCommonPathInternalCh>
 8002cae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb8:	4b28      	ldr	r3, [pc, #160]	@ (8002d5c <ADC_Enable+0x104>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	4a28      	ldr	r2, [pc, #160]	@ (8002d60 <ADC_Enable+0x108>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cd2:	e002      	b.n	8002cda <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe fec4 	bl	8001a6c <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce6:	e028      	b.n	8002d3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f883 	bl	8001df8 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f867 	bl	8001dd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d02:	f7fe feb3 	bl	8001a6c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d914      	bls.n	8002d3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d00d      	beq.n	8002d3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e007      	b.n	8002d4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d1cf      	bne.n	8002ce8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	8000003f 	.word	0x8000003f
 8002d58:	50040300 	.word	0x50040300
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	053e2d63 	.word	0x053e2d63

08002d64 <LL_ADC_IsEnabled>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <LL_ADC_IsEnabled+0x18>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <LL_ADC_IsEnabled+0x1a>
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d101      	bne.n	8002da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b09f      	sub	sp, #124	@ 0x7c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e093      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a47      	ldr	r2, [pc, #284]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002de8:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	e001      	b.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e072      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ffb9 	bl	8002d8a <LL_ADC_REG_IsConversionOngoing>
 8002e18:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ffb3 	bl	8002d8a <LL_ADC_REG_IsConversionOngoing>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d154      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d151      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e30:	4b35      	ldr	r3, [pc, #212]	@ (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e32:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02c      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e4e:	035b      	lsls	r3, r3, #13
 8002e50:	430b      	orrs	r3, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e58:	4829      	ldr	r0, [pc, #164]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e5a:	f7ff ff83 	bl	8002d64 <LL_ADC_IsEnabled>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4828      	ldr	r0, [pc, #160]	@ (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e62:	f7ff ff7f 	bl	8002d64 <LL_ADC_IsEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	431c      	orrs	r4, r3
 8002e6a:	4828      	ldr	r0, [pc, #160]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e6c:	f7ff ff7a 	bl	8002d64 <LL_ADC_IsEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4323      	orrs	r3, r4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d137      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e80:	f023 030f 	bic.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e92:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e94:	e028      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea2:	4817      	ldr	r0, [pc, #92]	@ (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ea4:	f7ff ff5e 	bl	8002d64 <LL_ADC_IsEnabled>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4816      	ldr	r0, [pc, #88]	@ (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eac:	f7ff ff5a 	bl	8002d64 <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	431c      	orrs	r4, r3
 8002eb4:	4815      	ldr	r0, [pc, #84]	@ (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002eb6:	f7ff ff55 	bl	8002d64 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4323      	orrs	r3, r4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d112      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002eca:	f023 030f 	bic.w	r3, r3, #15
 8002ece:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ed0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed2:	e009      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	377c      	adds	r7, #124	@ 0x7c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	50040000 	.word	0x50040000
 8002f04:	50040100 	.word	0x50040100
 8002f08:	50040300 	.word	0x50040300
 8002f0c:	50040200 	.word	0x50040200

08002f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db0b      	blt.n	8002f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4907      	ldr	r1, [pc, #28]	@ (8002fac <__NVIC_EnableIRQ+0x38>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	@ (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	@ (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	@ 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff ff4c 	bl	8002f10 <__NVIC_SetPriorityGrouping>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003092:	f7ff ff61 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 8003096:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f7ff ffb1 	bl	8003004 <NVIC_EncodePriority>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff80 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff54 	bl	8002f74 <__NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e098      	b.n	8003218 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003224 <HAL_DMA_Init+0x150>)
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d80f      	bhi.n	8003112 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003228 <HAL_DMA_Init+0x154>)
 80030fa:	4413      	add	r3, r2
 80030fc:	4a4b      	ldr	r2, [pc, #300]	@ (800322c <HAL_DMA_Init+0x158>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a48      	ldr	r2, [pc, #288]	@ (8003230 <HAL_DMA_Init+0x15c>)
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003110:	e00e      	b.n	8003130 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <HAL_DMA_Init+0x160>)
 800311a:	4413      	add	r3, r2
 800311c:	4a43      	ldr	r2, [pc, #268]	@ (800322c <HAL_DMA_Init+0x158>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <HAL_DMA_Init+0x164>)
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800318a:	d039      	beq.n	8003200 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	4a27      	ldr	r2, [pc, #156]	@ (8003230 <HAL_DMA_Init+0x15c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d11a      	bne.n	80031cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003196:	4b29      	ldr	r3, [pc, #164]	@ (800323c <HAL_DMA_Init+0x168>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f003 031c 	and.w	r3, r3, #28
 80031a2:	210f      	movs	r1, #15
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4924      	ldr	r1, [pc, #144]	@ (800323c <HAL_DMA_Init+0x168>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031b0:	4b22      	ldr	r3, [pc, #136]	@ (800323c <HAL_DMA_Init+0x168>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	f003 031c 	and.w	r3, r3, #28
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	491d      	ldr	r1, [pc, #116]	@ (800323c <HAL_DMA_Init+0x168>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
 80031ca:	e019      	b.n	8003200 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <HAL_DMA_Init+0x16c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f003 031c 	and.w	r3, r3, #28
 80031d8:	210f      	movs	r1, #15
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	4917      	ldr	r1, [pc, #92]	@ (8003240 <HAL_DMA_Init+0x16c>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031e6:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <HAL_DMA_Init+0x16c>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f003 031c 	and.w	r3, r3, #28
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	4911      	ldr	r1, [pc, #68]	@ (8003240 <HAL_DMA_Init+0x16c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40020407 	.word	0x40020407
 8003228:	bffdfff8 	.word	0xbffdfff8
 800322c:	cccccccd 	.word	0xcccccccd
 8003230:	40020000 	.word	0x40020000
 8003234:	bffdfbf8 	.word	0xbffdfbf8
 8003238:	40020400 	.word	0x40020400
 800323c:	400200a8 	.word	0x400200a8
 8003240:	400204a8 	.word	0x400204a8

08003244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003260:	f003 031c 	and.w	r3, r3, #28
 8003264:	2204      	movs	r2, #4
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d026      	beq.n	80032be <HAL_DMA_IRQHandler+0x7a>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d021      	beq.n	80032be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	f003 021c 	and.w	r2, r3, #28
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2104      	movs	r1, #4
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d071      	beq.n	8003398 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032bc:	e06c      	b.n	8003398 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f003 031c 	and.w	r3, r3, #28
 80032c6:	2202      	movs	r2, #2
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02e      	beq.n	8003330 <HAL_DMA_IRQHandler+0xec>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d029      	beq.n	8003330 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 020a 	bic.w	r2, r2, #10
 80032f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 021c 	and.w	r2, r3, #28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	2102      	movs	r1, #2
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d038      	beq.n	8003398 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800332e:	e033      	b.n	8003398 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003334:	f003 031c 	and.w	r3, r3, #28
 8003338:	2208      	movs	r2, #8
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02a      	beq.n	800339a <HAL_DMA_IRQHandler+0x156>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d025      	beq.n	800339a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 020e 	bic.w	r2, r2, #14
 800335c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f003 021c 	and.w	r2, r3, #28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003398:	bf00      	nop
 800339a:	bf00      	nop
}
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b2:	e17f      	b.n	80036b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8171 	beq.w	80036ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d005      	beq.n	80033e4 <HAL_GPIO_Init+0x40>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b03      	cmp	r3, #3
 8003450:	d118      	bne.n	8003484 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0201 	and.w	r2, r3, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b03      	cmp	r3, #3
 800348e:	d017      	beq.n	80034c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d123      	bne.n	8003514 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	6939      	ldr	r1, [r7, #16]
 8003510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80ac 	beq.w	80036ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_GPIO_Init+0x330>)
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_GPIO_Init+0x330>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6613      	str	r3, [r2, #96]	@ 0x60
 8003562:	4b5c      	ldr	r3, [pc, #368]	@ (80036d4 <HAL_GPIO_Init+0x330>)
 8003564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800356e:	4a5a      	ldr	r2, [pc, #360]	@ (80036d8 <HAL_GPIO_Init+0x334>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003598:	d025      	beq.n	80035e6 <HAL_GPIO_Init+0x242>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4f      	ldr	r2, [pc, #316]	@ (80036dc <HAL_GPIO_Init+0x338>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <HAL_GPIO_Init+0x23e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	@ (80036e0 <HAL_GPIO_Init+0x33c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x23a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4d      	ldr	r2, [pc, #308]	@ (80036e4 <HAL_GPIO_Init+0x340>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x236>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	@ (80036e8 <HAL_GPIO_Init+0x344>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x232>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	@ (80036ec <HAL_GPIO_Init+0x348>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x22e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	@ (80036f0 <HAL_GPIO_Init+0x34c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x22a>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035e6:	2300      	movs	r3, #0
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035f8:	4937      	ldr	r1, [pc, #220]	@ (80036d8 <HAL_GPIO_Init+0x334>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800362a:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003654:	4a27      	ldr	r2, [pc, #156]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800367e:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036a8:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	3301      	adds	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f47f ae78 	bne.w	80033b4 <HAL_GPIO_Init+0x10>
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000
 80036dc:	48000400 	.word	0x48000400
 80036e0:	48000800 	.word	0x48000800
 80036e4:	48000c00 	.word	0x48000c00
 80036e8:	48001000 	.word	0x48001000
 80036ec:	48001400 	.word	0x48001400
 80036f0:	48001800 	.word	0x48001800
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43d9      	mvns	r1, r3
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	400b      	ands	r3, r1
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	619a      	str	r2, [r3, #24]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e08d      	b.n	800388a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fd80 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	@ 0x24
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	e006      	b.n	80037e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d108      	bne.n	80037fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	e007      	b.n	800380e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800381c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69d9      	ldr	r1, [r3, #28]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1a      	ldr	r2, [r3, #32]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d138      	bne.n	800391a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e032      	b.n	800391c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2224      	movs	r2, #36	@ 0x24
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b20      	cmp	r3, #32
 800393c:	d139      	bne.n	80039b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003948:	2302      	movs	r3, #2
 800394a:	e033      	b.n	80039b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	@ 0x24
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800397a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039c4:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ea:	d130      	bne.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ec:	4b23      	ldr	r3, [pc, #140]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f8:	d038      	beq.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fa:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a02:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2232      	movs	r2, #50	@ 0x32
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	4a1b      	ldr	r2, [pc, #108]	@ (8003a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0c9b      	lsrs	r3, r3, #18
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a20:	e002      	b.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a28:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d102      	bne.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f2      	bne.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a48:	d110      	bne.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e00f      	b.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d007      	beq.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a5c:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a64:	4a05      	ldr	r2, [pc, #20]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	20000000 	.word	0x20000000
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e3ca      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4b97      	ldr	r3, [pc, #604]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa4:	4b94      	ldr	r3, [pc, #592]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80e4 	beq.w	8003c84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f040 808b 	bne.w	8003be0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 8087 	bne.w	8003be0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad2:	4b89      	ldr	r3, [pc, #548]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x62>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e3a2      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	4b82      	ldr	r3, [pc, #520]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_RCC_OscConfig+0x7c>
 8003afa:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b02:	e005      	b.n	8003b10 <HAL_RCC_OscConfig+0x88>
 8003b04:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d223      	bcs.n	8003b5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd87 	bl	800462c <RCC_SetFlashLatencyFromMSIRange>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e383      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b28:	4b73      	ldr	r3, [pc, #460]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a72      	ldr	r2, [pc, #456]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b70      	ldr	r3, [pc, #448]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	496d      	ldr	r1, [pc, #436]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b46:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	4968      	ldr	r1, [pc, #416]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	e025      	b.n	8003ba8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5c:	4b66      	ldr	r3, [pc, #408]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a65      	ldr	r2, [pc, #404]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b62:	f043 0308 	orr.w	r3, r3, #8
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b63      	ldr	r3, [pc, #396]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4960      	ldr	r1, [pc, #384]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	495b      	ldr	r1, [pc, #364]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd47 	bl	800462c <RCC_SetFlashLatencyFromMSIRange>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e343      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba8:	f000 fc4a 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b52      	ldr	r3, [pc, #328]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	4950      	ldr	r1, [pc, #320]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d00 <HAL_RCC_OscConfig+0x278>)
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8003d04 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fd63 	bl	8001698 <HAL_InitTick>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d052      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	e327      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d032      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003be8:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a42      	ldr	r2, [pc, #264]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd ff3a 	bl	8001a6c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bfc:	f7fd ff36 	bl	8001a6c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e310      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1a:	4b37      	ldr	r3, [pc, #220]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a36      	ldr	r2, [pc, #216]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4931      	ldr	r1, [pc, #196]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c38:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	492c      	ldr	r1, [pc, #176]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	e01a      	b.n	8003c84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a29      	ldr	r2, [pc, #164]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5a:	f7fd ff07 	bl	8001a6c <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c62:	f7fd ff03 	bl	8001a6c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e2dd      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c74:	4b20      	ldr	r3, [pc, #128]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x1da>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d074      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d005      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x21a>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d10e      	bne.n	8003cba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca2:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d064      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d160      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e2ba      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x24a>
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e026      	b.n	8003d20 <HAL_RCC_OscConfig+0x298>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cda:	d115      	bne.n	8003d08 <HAL_RCC_OscConfig+0x280>
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a05      	ldr	r2, [pc, #20]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a02      	ldr	r2, [pc, #8]	@ (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e014      	b.n	8003d20 <HAL_RCC_OscConfig+0x298>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08008364 	.word	0x08008364
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004
 8003d08:	4ba0      	ldr	r3, [pc, #640]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a9f      	ldr	r2, [pc, #636]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b9d      	ldr	r3, [pc, #628]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a9c      	ldr	r2, [pc, #624]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd fea0 	bl	8001a6c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fe9c 	bl	8001a6c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e276      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d42:	4b92      	ldr	r3, [pc, #584]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2a8>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd fe8c 	bl	8001a6c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd fe88 	bl	8001a6c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e262      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d6a:	4b88      	ldr	r3, [pc, #544]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2d0>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d060      	beq.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x310>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d116      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d98:	4b7c      	ldr	r3, [pc, #496]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_OscConfig+0x328>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e23f      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b76      	ldr	r3, [pc, #472]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	4973      	ldr	r1, [pc, #460]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	e040      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d023      	beq.n	8003e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dce:	4b6f      	ldr	r3, [pc, #444]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fe47 	bl	8001a6c <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fd fe43 	bl	8001a6c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e21d      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df4:	4b65      	ldr	r3, [pc, #404]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b62      	ldr	r3, [pc, #392]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	495f      	ldr	r1, [pc, #380]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	e018      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b5d      	ldr	r3, [pc, #372]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd fe23 	bl	8001a6c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fd fe1f 	bl	8001a6c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1f9      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e3c:	4b53      	ldr	r3, [pc, #332]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03c      	beq.n	8003ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e62:	4a4a      	ldr	r2, [pc, #296]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fdfe 	bl	8001a6c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd fdfa 	bl	8001a6c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1d4      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e86:	4b41      	ldr	r3, [pc, #260]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCC_OscConfig+0x3ec>
 8003e94:	e01b      	b.n	8003ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e96:	4b3d      	ldr	r3, [pc, #244]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fde1 	bl	8001a6c <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fd fddd 	bl	8001a6c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1b7      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec0:	4b32      	ldr	r3, [pc, #200]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ef      	bne.n	8003eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80a6 	beq.w	8004028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	4a26      	ldr	r2, [pc, #152]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef8:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7fd fda4 	bl	8001a6c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd fda0 	bl	8001a6c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e17a      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3a:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f54:	4a0d      	ldr	r2, [pc, #52]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f5e:	e029      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d115      	bne.n	8003f94 <HAL_RCC_OscConfig+0x50c>
 8003f68:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	4a07      	ldr	r2, [pc, #28]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f78:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	4a03      	ldr	r2, [pc, #12]	@ (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f88:	e014      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
 8003f94:	4b9c      	ldr	r3, [pc, #624]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9a:	4a9b      	ldr	r2, [pc, #620]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fa4:	4b98      	ldr	r3, [pc, #608]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	4a97      	ldr	r2, [pc, #604]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d016      	beq.n	8003fea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd fd56 	bl	8001a6c <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd fd52 	bl	8001a6c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e12a      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fda:	4b8b      	ldr	r3, [pc, #556]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ed      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x53c>
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fd fd3f 	bl	8001a6c <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fd fd3b 	bl	8001a6c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e113      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004008:	4b7f      	ldr	r3, [pc, #508]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ed      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b7a      	ldr	r3, [pc, #488]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	4a79      	ldr	r2, [pc, #484]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80fe 	beq.w	800422e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 80d0 	bne.w	80041dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800403c:	4b72      	ldr	r3, [pc, #456]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d130      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	3b01      	subs	r3, #1
 800405c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d127      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800407c:	2a07      	cmp	r2, #7
 800407e:	bf14      	ite	ne
 8004080:	2201      	movne	r2, #1
 8004082:	2200      	moveq	r2, #0
 8004084:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	3b01      	subs	r3, #1
 8004098:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d06e      	beq.n	8004190 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d069      	beq.n	800418c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040b8:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040c4:	4b50      	ldr	r3, [pc, #320]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0ad      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80040da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e0:	f7fd fcc4 	bl	8001a6c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fcc0 	bl	8001a6c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e09a      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040fa:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004106:	4b40      	ldr	r3, [pc, #256]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b40      	ldr	r3, [pc, #256]	@ (800420c <HAL_RCC_OscConfig+0x784>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004116:	3a01      	subs	r2, #1
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004120:	0212      	lsls	r2, r2, #8
 8004122:	4311      	orrs	r1, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004128:	0852      	lsrs	r2, r2, #1
 800412a:	3a01      	subs	r2, #1
 800412c:	0552      	lsls	r2, r2, #21
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004134:	0852      	lsrs	r2, r2, #1
 8004136:	3a01      	subs	r2, #1
 8004138:	0652      	lsls	r2, r2, #25
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004140:	0912      	lsrs	r2, r2, #4
 8004142:	0452      	lsls	r2, r2, #17
 8004144:	430a      	orrs	r2, r1
 8004146:	4930      	ldr	r1, [pc, #192]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8004148:	4313      	orrs	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2d      	ldr	r2, [pc, #180]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004158:	4b2b      	ldr	r3, [pc, #172]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004164:	f7fd fc82 	bl	8001a6c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd fc7e 	bl	8001a6c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e058      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417e:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418a:	e050      	b.n	800422e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e04f      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004190:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d148      	bne.n	800422e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800419c:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80041a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a8:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a16      	ldr	r2, [pc, #88]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b4:	f7fd fc5a 	bl	8001a6c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fc56 	bl	8001a6c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e030      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x734>
 80041da:	e028      	b.n	800422e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d023      	beq.n	800422a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a08      	ldr	r2, [pc, #32]	@ (8004208 <HAL_RCC_OscConfig+0x780>)
 80041e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fc3d 	bl	8001a6c <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f4:	e00c      	b.n	8004210 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fd fc39 	bl	8001a6c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d905      	bls.n	8004210 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e013      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
 8004208:	40021000 	.word	0x40021000
 800420c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004210:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_OscConfig+0x7b0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ec      	bne.n	80041f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_RCC_OscConfig+0x7b0>)
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4905      	ldr	r1, [pc, #20]	@ (8004238 <HAL_RCC_OscConfig+0x7b0>)
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_RCC_OscConfig+0x7b4>)
 8004224:	4013      	ands	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
 8004228:	e001      	b.n	800422e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	feeefffc 	.word	0xfeeefffc

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0e7      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b75      	ldr	r3, [pc, #468]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b72      	ldr	r3, [pc, #456]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4970      	ldr	r1, [pc, #448]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b6e      	ldr	r3, [pc, #440]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0cf      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b66      	ldr	r3, [pc, #408]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800429c:	429a      	cmp	r2, r3
 800429e:	d908      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b63      	ldr	r3, [pc, #396]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4960      	ldr	r1, [pc, #384]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04c      	beq.n	8004358 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d121      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0a6      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042de:	4b54      	ldr	r3, [pc, #336]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d115      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e09a      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e08e      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004306:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e086      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b46      	ldr	r3, [pc, #280]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4943      	ldr	r1, [pc, #268]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fd fba0 	bl	8001a6c <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd fb9c 	bl	8001a6c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e06e      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004370:	429a      	cmp	r2, r3
 8004372:	d208      	bcs.n	8004386 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b2e      	ldr	r3, [pc, #184]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	492b      	ldr	r1, [pc, #172]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004386:	4b29      	ldr	r3, [pc, #164]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d210      	bcs.n	80043b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 0207 	bic.w	r2, r3, #7
 800439c:	4923      	ldr	r1, [pc, #140]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a4:	4b21      	ldr	r3, [pc, #132]	@ (800442c <HAL_RCC_ClockConfig+0x1ec>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e036      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4918      	ldr	r1, [pc, #96]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e0:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4910      	ldr	r1, [pc, #64]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f4:	f000 f824 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	490b      	ldr	r1, [pc, #44]	@ (8004434 <HAL_RCC_ClockConfig+0x1f4>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a09      	ldr	r2, [pc, #36]	@ (8004438 <HAL_RCC_ClockConfig+0x1f8>)
 8004412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004414:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_ClockConfig+0x1fc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd f93d 	bl	8001698 <HAL_InitTick>
 800441e:	4603      	mov	r3, r0
 8004420:	72fb      	strb	r3, [r7, #11]

  return status;
 8004422:	7afb      	ldrb	r3, [r7, #11]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40022000 	.word	0x40022000
 8004430:	40021000 	.word	0x40021000
 8004434:	08008364 	.word	0x08008364
 8004438:	20000000 	.word	0x20000000
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	@ 0x24
 8004444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444e:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004458:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x34>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d11e      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004474:	4b34      	ldr	r3, [pc, #208]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004480:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e005      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004490:	4b2d      	ldr	r3, [pc, #180]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800449c:	4a2b      	ldr	r2, [pc, #172]	@ (800454c <HAL_RCC_GetSysClockFreq+0x10c>)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d102      	bne.n	80044be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044b8:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	e004      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044c4:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x114>)
 80044c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d134      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d003      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0xac>
 80044e4:	e005      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x110>)
 80044e8:	617b      	str	r3, [r7, #20]
      break;
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ee:	617b      	str	r3, [r7, #20]
      break;
 80044f0:	e002      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	617b      	str	r3, [r7, #20]
      break;
 80044f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f8:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	3301      	adds	r3, #1
 8004504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004506:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	fb03 f202 	mul.w	r2, r3, r2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800451e:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	0e5b      	lsrs	r3, r3, #25
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	3301      	adds	r3, #1
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004538:	69bb      	ldr	r3, [r7, #24]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3724      	adds	r7, #36	@ 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	0800837c 	.word	0x0800837c
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200

08004558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08008374 	.word	0x08008374

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045a0:	f7ff ffda 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0adb      	lsrs	r3, r3, #11
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08008374 	.word	0x08008374

080045c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	220f      	movs	r2, #15
 80045d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045d8:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0203 	and.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800460a:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <HAL_RCC_GetClockConfig+0x60>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0207 	and.w	r2, r3, #7
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	40022000 	.word	0x40022000

0800462c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004638:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004644:	f7ff f9bc 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 8004648:	6178      	str	r0, [r7, #20]
 800464a:	e014      	b.n	8004676 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004650:	4a24      	ldr	r2, [pc, #144]	@ (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004656:	6593      	str	r3, [r2, #88]	@ 0x58
 8004658:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004664:	f7ff f9ac 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 8004668:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800466a:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466e:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004674:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800467c:	d10b      	bne.n	8004696 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b80      	cmp	r3, #128	@ 0x80
 8004682:	d919      	bls.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2ba0      	cmp	r3, #160	@ 0xa0
 8004688:	d902      	bls.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800468a:	2302      	movs	r3, #2
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	e013      	b.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004690:	2301      	movs	r3, #1
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e010      	b.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d902      	bls.n	80046a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800469c:	2303      	movs	r3, #3
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e00a      	b.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b80      	cmp	r3, #128	@ 0x80
 80046a6:	d102      	bne.n	80046ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046a8:	2302      	movs	r3, #2
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	e004      	b.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b70      	cmp	r3, #112	@ 0x70
 80046b2:	d101      	bne.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046b4:	2301      	movs	r3, #1
 80046b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 0207 	bic.w	r2, r3, #7
 80046c0:	4909      	ldr	r1, [pc, #36]	@ (80046e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046c8:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d001      	beq.n	80046da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40022000 	.word	0x40022000

080046ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f4:	2300      	movs	r3, #0
 80046f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f8:	2300      	movs	r3, #0
 80046fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004704:	2b00      	cmp	r3, #0
 8004706:	d041      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800470c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004710:	d02a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004712:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004716:	d824      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004718:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800471c:	d008      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800471e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004722:	d81e      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800472c:	d010      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800472e:	e018      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004730:	4b86      	ldr	r3, [pc, #536]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a85      	ldr	r2, [pc, #532]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473c:	e015      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fabb 	bl	8004cc0 <RCCEx_PLLSAI1_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800474e:	e00c      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3320      	adds	r3, #32
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fba6 	bl	8004ea8 <RCCEx_PLLSAI2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	74fb      	strb	r3, [r7, #19]
      break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004770:	4b76      	ldr	r3, [pc, #472]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004776:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800477e:	4973      	ldr	r1, [pc, #460]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004786:	e001      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d041      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800479c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047a0:	d02a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047a6:	d824      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047ac:	d008      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047b2:	d81e      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047bc:	d010      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047be:	e018      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047c0:	4b62      	ldr	r3, [pc, #392]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a61      	ldr	r2, [pc, #388]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047cc:	e015      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fa73 	bl	8004cc0 <RCCEx_PLLSAI1_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047de:	e00c      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3320      	adds	r3, #32
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fb5e 	bl	8004ea8 <RCCEx_PLLSAI2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	74fb      	strb	r3, [r7, #19]
      break;
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004800:	4b52      	ldr	r3, [pc, #328]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800480e:	494f      	ldr	r1, [pc, #316]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a0 	beq.w	800496a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b41      	ldr	r3, [pc, #260]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	4a40      	ldr	r2, [pc, #256]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800484e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004850:	4b3e      	ldr	r3, [pc, #248]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485c:	2301      	movs	r3, #1
 800485e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004860:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3a      	ldr	r2, [pc, #232]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800486a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800486c:	f7fd f8fe 	bl	8001a6c <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004872:	e009      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004874:	f7fd f8fa 	bl	8001a6c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d902      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	74fb      	strb	r3, [r7, #19]
        break;
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004888:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ef      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d15c      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800489a:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01f      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d019      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048b8:	4b24      	ldr	r3, [pc, #144]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048c4:	4b21      	ldr	r3, [pc, #132]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ca:	4a20      	ldr	r2, [pc, #128]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	4a1c      	ldr	r2, [pc, #112]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048e4:	4a19      	ldr	r2, [pc, #100]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fd f8b9 	bl	8001a6c <HAL_GetTick>
 80048fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fc:	e00b      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fd f8b5 	bl	8001a6c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d902      	bls.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	74fb      	strb	r3, [r7, #19]
            break;
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ec      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493a:	4904      	ldr	r1, [pc, #16]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004942:	e009      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000
 8004950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004958:	7c7b      	ldrb	r3, [r7, #17]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	4b9e      	ldr	r3, [pc, #632]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	4a9d      	ldr	r2, [pc, #628]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004968:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004976:	4b98      	ldr	r3, [pc, #608]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497c:	f023 0203 	bic.w	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	4994      	ldr	r1, [pc, #592]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004998:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499e:	f023 020c 	bic.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a6:	498c      	ldr	r1, [pc, #560]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ba:	4b87      	ldr	r3, [pc, #540]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	4983      	ldr	r1, [pc, #524]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049dc:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	497b      	ldr	r1, [pc, #492]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049fe:	4b76      	ldr	r3, [pc, #472]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0c:	4972      	ldr	r1, [pc, #456]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a20:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2e:	496a      	ldr	r1, [pc, #424]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a42:	4b65      	ldr	r3, [pc, #404]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	4961      	ldr	r1, [pc, #388]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a64:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a72:	4959      	ldr	r1, [pc, #356]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a86:	4b54      	ldr	r3, [pc, #336]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a94:	4950      	ldr	r1, [pc, #320]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	4948      	ldr	r1, [pc, #288]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aca:	4b43      	ldr	r3, [pc, #268]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad8:	493f      	ldr	r1, [pc, #252]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d028      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aec:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afa:	4937      	ldr	r1, [pc, #220]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b32      	ldr	r3, [pc, #200]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a31      	ldr	r2, [pc, #196]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
 8004b18:	e011      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b22:	d10c      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f8c8 	bl	8004cc0 <RCCEx_PLLSAI1_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d028      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b4a:	4b23      	ldr	r3, [pc, #140]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	491f      	ldr	r1, [pc, #124]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b74:	60d3      	str	r3, [r2, #12]
 8004b76:	e011      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f899 	bl	8004cc0 <RCCEx_PLLSAI1_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02b      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb6:	4908      	ldr	r1, [pc, #32]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b03      	ldr	r3, [pc, #12]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a02      	ldr	r2, [pc, #8]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
 8004bd4:	e014      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3304      	adds	r3, #4
 8004bea:	2101      	movs	r1, #1
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f867 	bl	8004cc0 <RCCEx_PLLSAI1_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bf6:	7cfb      	ldrb	r3, [r7, #19]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02f      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c1a:	4928      	ldr	r1, [pc, #160]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c2a:	d10d      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	2102      	movs	r1, #2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f844 	bl	8004cc0 <RCCEx_PLLSAI1_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d014      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	74bb      	strb	r3, [r7, #18]
 8004c46:	e011      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3320      	adds	r3, #32
 8004c56:	2102      	movs	r1, #2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f925 	bl	8004ea8 <RCCEx_PLLSAI2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c78:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c86:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c9a:	4b08      	ldr	r3, [pc, #32]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004caa:	4904      	ldr	r1, [pc, #16]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000

08004cc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cce:	4b75      	ldr	r3, [pc, #468]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d018      	beq.n	8004d0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cda:	4b72      	ldr	r3, [pc, #456]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0203 	and.w	r2, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d10d      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
       ||
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
       ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d047      	beq.n	8004d96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e044      	b.n	8004d96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d018      	beq.n	8004d46 <RCCEx_PLLSAI1_Config+0x86>
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d825      	bhi.n	8004d64 <RCCEx_PLLSAI1_Config+0xa4>
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d002      	beq.n	8004d22 <RCCEx_PLLSAI1_Config+0x62>
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d009      	beq.n	8004d34 <RCCEx_PLLSAI1_Config+0x74>
 8004d20:	e020      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d22:	4b60      	ldr	r3, [pc, #384]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d11d      	bne.n	8004d6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d32:	e01a      	b.n	8004d6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d34:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d116      	bne.n	8004d6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d44:	e013      	b.n	8004d6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d46:	4b57      	ldr	r3, [pc, #348]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d52:	4b54      	ldr	r3, [pc, #336]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d62:	e006      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e004      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d72:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	4944      	ldr	r1, [pc, #272]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d17d      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a40      	ldr	r2, [pc, #256]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da8:	f7fc fe60 	bl	8001a6c <HAL_GetTick>
 8004dac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dae:	e009      	b.n	8004dc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004db0:	f7fc fe5c 	bl	8001a6c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d902      	bls.n	8004dc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	73fb      	strb	r3, [r7, #15]
        break;
 8004dc2:	e005      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dc4:	4b37      	ldr	r3, [pc, #220]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ef      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d160      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d111      	bne.n	8004e00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ddc:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6892      	ldr	r2, [r2, #8]
 8004dec:	0211      	lsls	r1, r2, #8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68d2      	ldr	r2, [r2, #12]
 8004df2:	0912      	lsrs	r2, r2, #4
 8004df4:	0452      	lsls	r2, r2, #17
 8004df6:	430a      	orrs	r2, r1
 8004df8:	492a      	ldr	r1, [pc, #168]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	610b      	str	r3, [r1, #16]
 8004dfe:	e027      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d112      	bne.n	8004e2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e06:	4b27      	ldr	r3, [pc, #156]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6892      	ldr	r2, [r2, #8]
 8004e16:	0211      	lsls	r1, r2, #8
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6912      	ldr	r2, [r2, #16]
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	0552      	lsls	r2, r2, #21
 8004e22:	430a      	orrs	r2, r1
 8004e24:	491f      	ldr	r1, [pc, #124]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	610b      	str	r3, [r1, #16]
 8004e2a:	e011      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	0211      	lsls	r1, r2, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6952      	ldr	r2, [r2, #20]
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0652      	lsls	r2, r2, #25
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	4916      	ldr	r1, [pc, #88]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e50:	4b14      	ldr	r3, [pc, #80]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fc fe06 	bl	8001a6c <HAL_GetTick>
 8004e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e62:	e009      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e64:	f7fc fe02 	bl	8001a6c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d902      	bls.n	8004e78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	73fb      	strb	r3, [r7, #15]
          break;
 8004e76:	e005      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0ef      	beq.n	8004e64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	4904      	ldr	r1, [pc, #16]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ec2:	4b67      	ldr	r3, [pc, #412]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0203 	and.w	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d10d      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eda:	4b61      	ldr	r3, [pc, #388]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d047      	beq.n	8004f7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e044      	b.n	8004f7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d018      	beq.n	8004f2e <RCCEx_PLLSAI2_Config+0x86>
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d825      	bhi.n	8004f4c <RCCEx_PLLSAI2_Config+0xa4>
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d002      	beq.n	8004f0a <RCCEx_PLLSAI2_Config+0x62>
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d009      	beq.n	8004f1c <RCCEx_PLLSAI2_Config+0x74>
 8004f08:	e020      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f0a:	4b55      	ldr	r3, [pc, #340]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d11d      	bne.n	8004f52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1a:	e01a      	b.n	8004f52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f1c:	4b50      	ldr	r3, [pc, #320]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2c:	e013      	b.n	8004f56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10f      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f3a:	4b49      	ldr	r3, [pc, #292]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f4a:	e006      	b.n	8004f5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f50:	e004      	b.n	8004f5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f62:	4b3f      	ldr	r3, [pc, #252]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6819      	ldr	r1, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	430b      	orrs	r3, r1
 8004f78:	4939      	ldr	r1, [pc, #228]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d167      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f84:	4b36      	ldr	r3, [pc, #216]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a35      	ldr	r2, [pc, #212]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f90:	f7fc fd6c 	bl	8001a6c <HAL_GetTick>
 8004f94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f96:	e009      	b.n	8004fac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f98:	f7fc fd68 	bl	8001a6c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d902      	bls.n	8004fac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	73fb      	strb	r3, [r7, #15]
        break;
 8004faa:	e005      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fac:	4b2c      	ldr	r3, [pc, #176]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ef      	bne.n	8004f98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d14a      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d111      	bne.n	8004fe8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fc4:	4b26      	ldr	r3, [pc, #152]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6892      	ldr	r2, [r2, #8]
 8004fd4:	0211      	lsls	r1, r2, #8
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68d2      	ldr	r2, [r2, #12]
 8004fda:	0912      	lsrs	r2, r2, #4
 8004fdc:	0452      	lsls	r2, r2, #17
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	491f      	ldr	r1, [pc, #124]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	614b      	str	r3, [r1, #20]
 8004fe6:	e011      	b.n	800500c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ff0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
 8004ff8:	0211      	lsls	r1, r2, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6912      	ldr	r2, [r2, #16]
 8004ffe:	0852      	lsrs	r2, r2, #1
 8005000:	3a01      	subs	r2, #1
 8005002:	0652      	lsls	r2, r2, #25
 8005004:	430a      	orrs	r2, r1
 8005006:	4916      	ldr	r1, [pc, #88]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800500c:	4b14      	ldr	r3, [pc, #80]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fc fd28 	bl	8001a6c <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005020:	f7fc fd24 	bl	8001a6c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
          break;
 8005032:	e005      	b.n	8005040 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4904      	ldr	r1, [pc, #16]	@ (8005060 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005050:	4313      	orrs	r3, r2
 8005052:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000

08005064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e049      	b.n	800510a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc f98e 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 fbae 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e04f      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a23      	ldr	r2, [pc, #140]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01d      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x76>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005156:	d018      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x76>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1f      	ldr	r2, [pc, #124]	@ (80051dc <HAL_TIM_Base_Start_IT+0xc8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x76>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x76>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1c      	ldr	r2, [pc, #112]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x76>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1b      	ldr	r2, [pc, #108]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIM_Base_Start_IT+0x76>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d115      	bne.n	80051b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	4b17      	ldr	r3, [pc, #92]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005192:	4013      	ands	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b06      	cmp	r3, #6
 800519a:	d015      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0xb4>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a2:	d011      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b4:	e008      	b.n	80051c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0201 	orr.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e000      	b.n	80051ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	00010007 	.word	0x00010007

080051f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e049      	b.n	800529a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc f892 	bl	8001344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fae6 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <HAL_TIM_PWM_Start+0x24>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e03c      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d109      	bne.n	80052e2 <HAL_TIM_PWM_Start+0x3e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	e02f      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d109      	bne.n	80052fc <HAL_TIM_PWM_Start+0x58>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e022      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d109      	bne.n	8005316 <HAL_TIM_PWM_Start+0x72>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	bf14      	ite	ne
 800530e:	2301      	movne	r3, #1
 8005310:	2300      	moveq	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	e015      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b10      	cmp	r3, #16
 800531a:	d109      	bne.n	8005330 <HAL_TIM_PWM_Start+0x8c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e008      	b.n	8005342 <HAL_TIM_PWM_Start+0x9e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e09c      	b.n	8005484 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Start+0xb6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005358:	e023      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b04      	cmp	r3, #4
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0xc6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005368:	e01b      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xd6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005378:	e013      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xe6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005388:	e00b      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b10      	cmp	r3, #16
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xf6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005398:	e003      	b.n	80053a2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fd9a 	bl	8005ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a35      	ldr	r2, [pc, #212]	@ (800548c <HAL_TIM_PWM_Start+0x1e8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x13e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a34      	ldr	r2, [pc, #208]	@ (8005490 <HAL_TIM_PWM_Start+0x1ec>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x13e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a32      	ldr	r2, [pc, #200]	@ (8005494 <HAL_TIM_PWM_Start+0x1f0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d009      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x13e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a31      	ldr	r2, [pc, #196]	@ (8005498 <HAL_TIM_PWM_Start+0x1f4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x13e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2f      	ldr	r2, [pc, #188]	@ (800549c <HAL_TIM_PWM_Start+0x1f8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_PWM_Start+0x142>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <HAL_TIM_PWM_Start+0x144>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a22      	ldr	r2, [pc, #136]	@ (800548c <HAL_TIM_PWM_Start+0x1e8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01d      	beq.n	8005442 <HAL_TIM_PWM_Start+0x19e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540e:	d018      	beq.n	8005442 <HAL_TIM_PWM_Start+0x19e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a22      	ldr	r2, [pc, #136]	@ (80054a0 <HAL_TIM_PWM_Start+0x1fc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_TIM_PWM_Start+0x19e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a21      	ldr	r2, [pc, #132]	@ (80054a4 <HAL_TIM_PWM_Start+0x200>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_PWM_Start+0x19e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <HAL_TIM_PWM_Start+0x204>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_PWM_Start+0x19e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a17      	ldr	r2, [pc, #92]	@ (8005490 <HAL_TIM_PWM_Start+0x1ec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_PWM_Start+0x19e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a15      	ldr	r2, [pc, #84]	@ (8005494 <HAL_TIM_PWM_Start+0x1f0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d115      	bne.n	800546e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b18      	ldr	r3, [pc, #96]	@ (80054ac <HAL_TIM_PWM_Start+0x208>)
 800544a:	4013      	ands	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d015      	beq.n	8005480 <HAL_TIM_PWM_Start+0x1dc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545a:	d011      	beq.n	8005480 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	e008      	b.n	8005480 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e000      	b.n	8005482 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	00010007 	.word	0x00010007

080054b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2200      	movs	r2, #0
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fd0e 	bl	8005ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3e      	ldr	r2, [pc, #248]	@ (80055c8 <HAL_TIM_PWM_Stop+0x118>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3d      	ldr	r2, [pc, #244]	@ (80055cc <HAL_TIM_PWM_Stop+0x11c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3b      	ldr	r2, [pc, #236]	@ (80055d0 <HAL_TIM_PWM_Stop+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3a      	ldr	r2, [pc, #232]	@ (80055d4 <HAL_TIM_PWM_Stop+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIM_PWM_Stop+0x4a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a38      	ldr	r2, [pc, #224]	@ (80055d8 <HAL_TIM_PWM_Stop+0x128>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_Stop+0x4e>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_TIM_PWM_Stop+0x50>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d017      	beq.n	8005534 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <HAL_TIM_PWM_Stop+0x84>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	f240 4344 	movw	r3, #1092	@ 0x444
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_TIM_PWM_Stop+0x84>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005532:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a1a      	ldr	r2, [r3, #32]
 800553a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10f      	bne.n	8005564 <HAL_TIM_PWM_Stop+0xb4>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f240 4344 	movw	r3, #1092	@ 0x444
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_TIM_PWM_Stop+0xb4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <HAL_TIM_PWM_Stop+0xc4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005572:	e023      	b.n	80055bc <HAL_TIM_PWM_Stop+0x10c>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b04      	cmp	r3, #4
 8005578:	d104      	bne.n	8005584 <HAL_TIM_PWM_Stop+0xd4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005582:	e01b      	b.n	80055bc <HAL_TIM_PWM_Stop+0x10c>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b08      	cmp	r3, #8
 8005588:	d104      	bne.n	8005594 <HAL_TIM_PWM_Stop+0xe4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005592:	e013      	b.n	80055bc <HAL_TIM_PWM_Stop+0x10c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_PWM_Stop+0xf4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055a2:	e00b      	b.n	80055bc <HAL_TIM_PWM_Stop+0x10c>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_PWM_Stop+0x104>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b2:	e003      	b.n	80055bc <HAL_TIM_PWM_Stop+0x10c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40013400 	.word	0x40013400
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800

080055dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0ff      	b.n	80057fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b14      	cmp	r3, #20
 8005606:	f200 80f0 	bhi.w	80057ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800560a:	a201      	add	r2, pc, #4	@ (adr r2, 8005610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005665 	.word	0x08005665
 8005614:	080057eb 	.word	0x080057eb
 8005618:	080057eb 	.word	0x080057eb
 800561c:	080057eb 	.word	0x080057eb
 8005620:	080056a5 	.word	0x080056a5
 8005624:	080057eb 	.word	0x080057eb
 8005628:	080057eb 	.word	0x080057eb
 800562c:	080057eb 	.word	0x080057eb
 8005630:	080056e7 	.word	0x080056e7
 8005634:	080057eb 	.word	0x080057eb
 8005638:	080057eb 	.word	0x080057eb
 800563c:	080057eb 	.word	0x080057eb
 8005640:	08005727 	.word	0x08005727
 8005644:	080057eb 	.word	0x080057eb
 8005648:	080057eb 	.word	0x080057eb
 800564c:	080057eb 	.word	0x080057eb
 8005650:	08005769 	.word	0x08005769
 8005654:	080057eb 	.word	0x080057eb
 8005658:	080057eb 	.word	0x080057eb
 800565c:	080057eb 	.word	0x080057eb
 8005660:	080057a9 	.word	0x080057a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f964 	bl	8005938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	619a      	str	r2, [r3, #24]
      break;
 80056a2:	e0a5      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f9d4 	bl	8005a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	619a      	str	r2, [r3, #24]
      break;
 80056e4:	e084      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fa3d 	bl	8005b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0208 	orr.w	r2, r2, #8
 8005700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0204 	bic.w	r2, r2, #4
 8005710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69d9      	ldr	r1, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	61da      	str	r2, [r3, #28]
      break;
 8005724:	e064      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 faa5 	bl	8005c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	61da      	str	r2, [r3, #28]
      break;
 8005766:	e043      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 faee 	bl	8005d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057a6:	e023      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fb32 	bl	8005e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057e8:	e002      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
      break;
 80057ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop

08005804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a40      	ldr	r2, [pc, #256]	@ (8005918 <TIM_Base_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d00f      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3d      	ldr	r2, [pc, #244]	@ (800591c <TIM_Base_SetConfig+0x118>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3c      	ldr	r2, [pc, #240]	@ (8005920 <TIM_Base_SetConfig+0x11c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a3b      	ldr	r2, [pc, #236]	@ (8005924 <TIM_Base_SetConfig+0x120>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3a      	ldr	r2, [pc, #232]	@ (8005928 <TIM_Base_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2f      	ldr	r2, [pc, #188]	@ (8005918 <TIM_Base_SetConfig+0x114>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01f      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005864:	d01b      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2c      	ldr	r2, [pc, #176]	@ (800591c <TIM_Base_SetConfig+0x118>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d017      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2b      	ldr	r2, [pc, #172]	@ (8005920 <TIM_Base_SetConfig+0x11c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2a      	ldr	r2, [pc, #168]	@ (8005924 <TIM_Base_SetConfig+0x120>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00f      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a29      	ldr	r2, [pc, #164]	@ (8005928 <TIM_Base_SetConfig+0x124>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a28      	ldr	r2, [pc, #160]	@ (800592c <TIM_Base_SetConfig+0x128>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a27      	ldr	r2, [pc, #156]	@ (8005930 <TIM_Base_SetConfig+0x12c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_Base_SetConfig+0x9a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <TIM_Base_SetConfig+0x130>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a10      	ldr	r2, [pc, #64]	@ (8005918 <TIM_Base_SetConfig+0x114>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00f      	beq.n	80058fc <TIM_Base_SetConfig+0xf8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a12      	ldr	r2, [pc, #72]	@ (8005928 <TIM_Base_SetConfig+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00b      	beq.n	80058fc <TIM_Base_SetConfig+0xf8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a11      	ldr	r2, [pc, #68]	@ (800592c <TIM_Base_SetConfig+0x128>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <TIM_Base_SetConfig+0xf8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a10      	ldr	r2, [pc, #64]	@ (8005930 <TIM_Base_SetConfig+0x12c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0xf8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005934 <TIM_Base_SetConfig+0x130>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d103      	bne.n	8005904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	615a      	str	r2, [r3, #20]
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40013400 	.word	0x40013400
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800

08005938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f023 0201 	bic.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0302 	bic.w	r3, r3, #2
 8005984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2c      	ldr	r2, [pc, #176]	@ (8005a44 <TIM_OC1_SetConfig+0x10c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_OC1_SetConfig+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a48 <TIM_OC1_SetConfig+0x110>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_OC1_SetConfig+0x80>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a4c <TIM_OC1_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC1_SetConfig+0x80>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a29      	ldr	r2, [pc, #164]	@ (8005a50 <TIM_OC1_SetConfig+0x118>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC1_SetConfig+0x80>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a28      	ldr	r2, [pc, #160]	@ (8005a54 <TIM_OC1_SetConfig+0x11c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d10c      	bne.n	80059d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0308 	bic.w	r3, r3, #8
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f023 0304 	bic.w	r3, r3, #4
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <TIM_OC1_SetConfig+0x10c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00f      	beq.n	80059fa <TIM_OC1_SetConfig+0xc2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <TIM_OC1_SetConfig+0x110>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00b      	beq.n	80059fa <TIM_OC1_SetConfig+0xc2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <TIM_OC1_SetConfig+0x114>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_OC1_SetConfig+0xc2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <TIM_OC1_SetConfig+0x118>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC1_SetConfig+0xc2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <TIM_OC1_SetConfig+0x11c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d111      	bne.n	8005a1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f023 0210 	bic.w	r2, r3, #16
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0320 	bic.w	r3, r3, #32
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a28      	ldr	r2, [pc, #160]	@ (8005b58 <TIM_OC2_SetConfig+0x100>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC2_SetConfig+0x6c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a27      	ldr	r2, [pc, #156]	@ (8005b5c <TIM_OC2_SetConfig+0x104>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10d      	bne.n	8005ae0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b58 <TIM_OC2_SetConfig+0x100>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <TIM_OC2_SetConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1c      	ldr	r2, [pc, #112]	@ (8005b5c <TIM_OC2_SetConfig+0x104>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00b      	beq.n	8005b08 <TIM_OC2_SetConfig+0xb0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b60 <TIM_OC2_SetConfig+0x108>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_OC2_SetConfig+0xb0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1a      	ldr	r2, [pc, #104]	@ (8005b64 <TIM_OC2_SetConfig+0x10c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC2_SetConfig+0xb0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a19      	ldr	r2, [pc, #100]	@ (8005b68 <TIM_OC2_SetConfig+0x110>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d113      	bne.n	8005b30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40013400 	.word	0x40013400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800

08005b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a27      	ldr	r2, [pc, #156]	@ (8005c68 <TIM_OC3_SetConfig+0xfc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_OC3_SetConfig+0x6a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	@ (8005c6c <TIM_OC3_SetConfig+0x100>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10d      	bne.n	8005bf2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c68 <TIM_OC3_SetConfig+0xfc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00f      	beq.n	8005c1a <TIM_OC3_SetConfig+0xae>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <TIM_OC3_SetConfig+0x100>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_OC3_SetConfig+0xae>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <TIM_OC3_SetConfig+0x104>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_OC3_SetConfig+0xae>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	@ (8005c74 <TIM_OC3_SetConfig+0x108>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC3_SetConfig+0xae>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a18      	ldr	r2, [pc, #96]	@ (8005c78 <TIM_OC3_SetConfig+0x10c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d113      	bne.n	8005c42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	621a      	str	r2, [r3, #32]
}
 8005c5c:	bf00      	nop
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40013400 	.word	0x40013400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <TIM_OC4_SetConfig+0xc0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00f      	beq.n	8005d00 <TIM_OC4_SetConfig+0x84>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a17      	ldr	r2, [pc, #92]	@ (8005d40 <TIM_OC4_SetConfig+0xc4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_OC4_SetConfig+0x84>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a16      	ldr	r2, [pc, #88]	@ (8005d44 <TIM_OC4_SetConfig+0xc8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_OC4_SetConfig+0x84>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a15      	ldr	r2, [pc, #84]	@ (8005d48 <TIM_OC4_SetConfig+0xcc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC4_SetConfig+0x84>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a14      	ldr	r2, [pc, #80]	@ (8005d4c <TIM_OC4_SetConfig+0xd0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d109      	bne.n	8005d14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a17      	ldr	r2, [pc, #92]	@ (8005e04 <TIM_OC5_SetConfig+0xb4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00f      	beq.n	8005dca <TIM_OC5_SetConfig+0x7a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a16      	ldr	r2, [pc, #88]	@ (8005e08 <TIM_OC5_SetConfig+0xb8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_OC5_SetConfig+0x7a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <TIM_OC5_SetConfig+0xbc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_OC5_SetConfig+0x7a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a14      	ldr	r2, [pc, #80]	@ (8005e10 <TIM_OC5_SetConfig+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC5_SetConfig+0x7a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	@ (8005e14 <TIM_OC5_SetConfig+0xc4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d109      	bne.n	8005dde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	621a      	str	r2, [r3, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800

08005e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	051b      	lsls	r3, r3, #20
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <TIM_OC6_SetConfig+0xb8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <TIM_OC6_SetConfig+0x7c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a17      	ldr	r2, [pc, #92]	@ (8005ed4 <TIM_OC6_SetConfig+0xbc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_OC6_SetConfig+0x7c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a16      	ldr	r2, [pc, #88]	@ (8005ed8 <TIM_OC6_SetConfig+0xc0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_OC6_SetConfig+0x7c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <TIM_OC6_SetConfig+0xc4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC6_SetConfig+0x7c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <TIM_OC6_SetConfig+0xc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d109      	bne.n	8005ea8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	40013400 	.word	0x40013400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1a      	ldr	r2, [r3, #32]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	43db      	mvns	r3, r3
 8005f06:	401a      	ands	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e068      	b.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2d      	ldr	r2, [pc, #180]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01d      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fba:	d018      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a13      	ldr	r2, [pc, #76]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a14      	ldr	r2, [pc, #80]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10c      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40014000 	.word	0x40014000

08006040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006058:	2302      	movs	r3, #2
 800605a:	e065      	b.n	8006128 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	041b      	lsls	r3, r3, #16
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a16      	ldr	r2, [pc, #88]	@ (8006134 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d115      	bne.n	8006116 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	051b      	lsls	r3, r3, #20
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40013400 	.word	0x40013400

0800613c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e040      	b.n	80061d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fb f9f8 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	@ 0x24
 8006168:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fc32 	bl	80069ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f977 	bl	800647c <UART_SetConfig>
 800618e:	4603      	mov	r3, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e01b      	b.n	80061d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fcb1 	bl	8006b30 <UART_CheckIdleState>
 80061ce:	4603      	mov	r3, r0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	@ 0x28
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d177      	bne.n	80062e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_UART_Transmit+0x24>
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e070      	b.n	80062e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2221      	movs	r2, #33	@ 0x21
 800620c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800620e:	f7fb fc2d 	bl	8001a6c <HAL_GetTick>
 8006212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622c:	d108      	bne.n	8006240 <HAL_UART_Transmit+0x68>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e003      	b.n	8006248 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006248:	e02f      	b.n	80062aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	2180      	movs	r1, #128	@ 0x80
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fd13 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e03b      	b.n	80062e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800627c:	b292      	uxth	r2, r2
 800627e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	3302      	adds	r3, #2
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e007      	b.n	8006298 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1c9      	bne.n	800624a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	2140      	movs	r1, #64	@ 0x40
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fcdd 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e005      	b.n	80062e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
  }
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b08a      	sub	sp, #40	@ 0x28
 80062ee:	af02      	add	r7, sp, #8
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006300:	2b20      	cmp	r3, #32
 8006302:	f040 80b6 	bne.w	8006472 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_UART_Receive+0x28>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e0ae      	b.n	8006474 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2222      	movs	r2, #34	@ 0x22
 8006322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632c:	f7fb fb9e 	bl	8001a6c <HAL_GetTick>
 8006330:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634a:	d10e      	bne.n	800636a <HAL_UART_Receive+0x80>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <HAL_UART_Receive+0x76>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800635a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800635e:	e02d      	b.n	80063bc <HAL_UART_Receive+0xd2>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	22ff      	movs	r2, #255	@ 0xff
 8006364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006368:	e028      	b.n	80063bc <HAL_UART_Receive+0xd2>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <HAL_UART_Receive+0xa4>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <HAL_UART_Receive+0x9a>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	22ff      	movs	r2, #255	@ 0xff
 800637e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006382:	e01b      	b.n	80063bc <HAL_UART_Receive+0xd2>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	227f      	movs	r2, #127	@ 0x7f
 8006388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800638c:	e016      	b.n	80063bc <HAL_UART_Receive+0xd2>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006396:	d10d      	bne.n	80063b4 <HAL_UART_Receive+0xca>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <HAL_UART_Receive+0xc0>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	227f      	movs	r2, #127	@ 0x7f
 80063a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063a8:	e008      	b.n	80063bc <HAL_UART_Receive+0xd2>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	223f      	movs	r2, #63	@ 0x3f
 80063ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063b2:	e003      	b.n	80063bc <HAL_UART_Receive+0xd2>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063cc:	d108      	bne.n	80063e0 <HAL_UART_Receive+0xf6>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e003      	b.n	80063e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063e8:	e037      	b.n	800645a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2200      	movs	r2, #0
 80063f2:	2120      	movs	r1, #32
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fc43 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e033      	b.n	8006474 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10c      	bne.n	800642c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006418:	b29a      	uxth	r2, r3
 800641a:	8a7b      	ldrh	r3, [r7, #18]
 800641c:	4013      	ands	r3, r2
 800641e:	b29a      	uxth	r2, r3
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	3302      	adds	r3, #2
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e00d      	b.n	8006448 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006432:	b29b      	uxth	r3, r3
 8006434:	b2da      	uxtb	r2, r3
 8006436:	8a7b      	ldrh	r3, [r7, #18]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	4013      	ands	r3, r2
 800643c:	b2da      	uxtb	r2, r3
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1c1      	bne.n	80063ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800647c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006480:	b08a      	sub	sp, #40	@ 0x28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	431a      	orrs	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	431a      	orrs	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4ba4      	ldr	r3, [pc, #656]	@ (800673c <UART_SetConfig+0x2c0>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a99      	ldr	r2, [pc, #612]	@ (8006740 <UART_SetConfig+0x2c4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e4:	4313      	orrs	r3, r2
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f8:	430a      	orrs	r2, r1
 80064fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a90      	ldr	r2, [pc, #576]	@ (8006744 <UART_SetConfig+0x2c8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d126      	bne.n	8006554 <UART_SetConfig+0xd8>
 8006506:	4b90      	ldr	r3, [pc, #576]	@ (8006748 <UART_SetConfig+0x2cc>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	2b03      	cmp	r3, #3
 8006512:	d81b      	bhi.n	800654c <UART_SetConfig+0xd0>
 8006514:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0xa0>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	0800652d 	.word	0x0800652d
 8006520:	0800653d 	.word	0x0800653d
 8006524:	08006535 	.word	0x08006535
 8006528:	08006545 	.word	0x08006545
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006532:	e116      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653a:	e112      	b.n	8006762 <UART_SetConfig+0x2e6>
 800653c:	2304      	movs	r3, #4
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006542:	e10e      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654a:	e10a      	b.n	8006762 <UART_SetConfig+0x2e6>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006552:	e106      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a7c      	ldr	r2, [pc, #496]	@ (800674c <UART_SetConfig+0x2d0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d138      	bne.n	80065d0 <UART_SetConfig+0x154>
 800655e:	4b7a      	ldr	r3, [pc, #488]	@ (8006748 <UART_SetConfig+0x2cc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006564:	f003 030c 	and.w	r3, r3, #12
 8006568:	2b0c      	cmp	r3, #12
 800656a:	d82d      	bhi.n	80065c8 <UART_SetConfig+0x14c>
 800656c:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <UART_SetConfig+0xf8>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065c9 	.word	0x080065c9
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065b9 	.word	0x080065b9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065c1 	.word	0x080065c1
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ae:	e0d8      	b.n	8006762 <UART_SetConfig+0x2e6>
 80065b0:	2302      	movs	r3, #2
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b6:	e0d4      	b.n	8006762 <UART_SetConfig+0x2e6>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065be:	e0d0      	b.n	8006762 <UART_SetConfig+0x2e6>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c6:	e0cc      	b.n	8006762 <UART_SetConfig+0x2e6>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ce:	e0c8      	b.n	8006762 <UART_SetConfig+0x2e6>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006750 <UART_SetConfig+0x2d4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d125      	bne.n	8006626 <UART_SetConfig+0x1aa>
 80065da:	4b5b      	ldr	r3, [pc, #364]	@ (8006748 <UART_SetConfig+0x2cc>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065e4:	2b30      	cmp	r3, #48	@ 0x30
 80065e6:	d016      	beq.n	8006616 <UART_SetConfig+0x19a>
 80065e8:	2b30      	cmp	r3, #48	@ 0x30
 80065ea:	d818      	bhi.n	800661e <UART_SetConfig+0x1a2>
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d00a      	beq.n	8006606 <UART_SetConfig+0x18a>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d814      	bhi.n	800661e <UART_SetConfig+0x1a2>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <UART_SetConfig+0x182>
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	d008      	beq.n	800660e <UART_SetConfig+0x192>
 80065fc:	e00f      	b.n	800661e <UART_SetConfig+0x1a2>
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006604:	e0ad      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006606:	2302      	movs	r3, #2
 8006608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660c:	e0a9      	b.n	8006762 <UART_SetConfig+0x2e6>
 800660e:	2304      	movs	r3, #4
 8006610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006614:	e0a5      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006616:	2308      	movs	r3, #8
 8006618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661c:	e0a1      	b.n	8006762 <UART_SetConfig+0x2e6>
 800661e:	2310      	movs	r3, #16
 8006620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006624:	e09d      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4a      	ldr	r2, [pc, #296]	@ (8006754 <UART_SetConfig+0x2d8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d125      	bne.n	800667c <UART_SetConfig+0x200>
 8006630:	4b45      	ldr	r3, [pc, #276]	@ (8006748 <UART_SetConfig+0x2cc>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006636:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800663a:	2bc0      	cmp	r3, #192	@ 0xc0
 800663c:	d016      	beq.n	800666c <UART_SetConfig+0x1f0>
 800663e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006640:	d818      	bhi.n	8006674 <UART_SetConfig+0x1f8>
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	d00a      	beq.n	800665c <UART_SetConfig+0x1e0>
 8006646:	2b80      	cmp	r3, #128	@ 0x80
 8006648:	d814      	bhi.n	8006674 <UART_SetConfig+0x1f8>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <UART_SetConfig+0x1d8>
 800664e:	2b40      	cmp	r3, #64	@ 0x40
 8006650:	d008      	beq.n	8006664 <UART_SetConfig+0x1e8>
 8006652:	e00f      	b.n	8006674 <UART_SetConfig+0x1f8>
 8006654:	2300      	movs	r3, #0
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e082      	b.n	8006762 <UART_SetConfig+0x2e6>
 800665c:	2302      	movs	r3, #2
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e07e      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e07a      	b.n	8006762 <UART_SetConfig+0x2e6>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e076      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667a:	e072      	b.n	8006762 <UART_SetConfig+0x2e6>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a35      	ldr	r2, [pc, #212]	@ (8006758 <UART_SetConfig+0x2dc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d12a      	bne.n	80066dc <UART_SetConfig+0x260>
 8006686:	4b30      	ldr	r3, [pc, #192]	@ (8006748 <UART_SetConfig+0x2cc>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006694:	d01a      	beq.n	80066cc <UART_SetConfig+0x250>
 8006696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800669a:	d81b      	bhi.n	80066d4 <UART_SetConfig+0x258>
 800669c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a0:	d00c      	beq.n	80066bc <UART_SetConfig+0x240>
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a6:	d815      	bhi.n	80066d4 <UART_SetConfig+0x258>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <UART_SetConfig+0x238>
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b0:	d008      	beq.n	80066c4 <UART_SetConfig+0x248>
 80066b2:	e00f      	b.n	80066d4 <UART_SetConfig+0x258>
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ba:	e052      	b.n	8006762 <UART_SetConfig+0x2e6>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c2:	e04e      	b.n	8006762 <UART_SetConfig+0x2e6>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e04a      	b.n	8006762 <UART_SetConfig+0x2e6>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d2:	e046      	b.n	8006762 <UART_SetConfig+0x2e6>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066da:	e042      	b.n	8006762 <UART_SetConfig+0x2e6>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <UART_SetConfig+0x2c4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d13a      	bne.n	800675c <UART_SetConfig+0x2e0>
 80066e6:	4b18      	ldr	r3, [pc, #96]	@ (8006748 <UART_SetConfig+0x2cc>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066f4:	d01a      	beq.n	800672c <UART_SetConfig+0x2b0>
 80066f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066fa:	d81b      	bhi.n	8006734 <UART_SetConfig+0x2b8>
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006700:	d00c      	beq.n	800671c <UART_SetConfig+0x2a0>
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006706:	d815      	bhi.n	8006734 <UART_SetConfig+0x2b8>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <UART_SetConfig+0x298>
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006710:	d008      	beq.n	8006724 <UART_SetConfig+0x2a8>
 8006712:	e00f      	b.n	8006734 <UART_SetConfig+0x2b8>
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800671a:	e022      	b.n	8006762 <UART_SetConfig+0x2e6>
 800671c:	2302      	movs	r3, #2
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006722:	e01e      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006724:	2304      	movs	r3, #4
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672a:	e01a      	b.n	8006762 <UART_SetConfig+0x2e6>
 800672c:	2308      	movs	r3, #8
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006732:	e016      	b.n	8006762 <UART_SetConfig+0x2e6>
 8006734:	2310      	movs	r3, #16
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800673a:	e012      	b.n	8006762 <UART_SetConfig+0x2e6>
 800673c:	efff69f3 	.word	0xefff69f3
 8006740:	40008000 	.word	0x40008000
 8006744:	40013800 	.word	0x40013800
 8006748:	40021000 	.word	0x40021000
 800674c:	40004400 	.word	0x40004400
 8006750:	40004800 	.word	0x40004800
 8006754:	40004c00 	.word	0x40004c00
 8006758:	40005000 	.word	0x40005000
 800675c:	2310      	movs	r3, #16
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a9f      	ldr	r2, [pc, #636]	@ (80069e4 <UART_SetConfig+0x568>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d17a      	bne.n	8006862 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800676c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006770:	2b08      	cmp	r3, #8
 8006772:	d824      	bhi.n	80067be <UART_SetConfig+0x342>
 8006774:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <UART_SetConfig+0x300>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067bf 	.word	0x080067bf
 8006784:	080067a9 	.word	0x080067a9
 8006788:	080067bf 	.word	0x080067bf
 800678c:	080067af 	.word	0x080067af
 8006790:	080067bf 	.word	0x080067bf
 8006794:	080067bf 	.word	0x080067bf
 8006798:	080067bf 	.word	0x080067bf
 800679c:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a0:	f7fd fee6 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80067a4:	61f8      	str	r0, [r7, #28]
        break;
 80067a6:	e010      	b.n	80067ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b8f      	ldr	r3, [pc, #572]	@ (80069e8 <UART_SetConfig+0x56c>)
 80067aa:	61fb      	str	r3, [r7, #28]
        break;
 80067ac:	e00d      	b.n	80067ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fd fe47 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80067b2:	61f8      	str	r0, [r7, #28]
        break;
 80067b4:	e009      	b.n	80067ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ba:	61fb      	str	r3, [r7, #28]
        break;
 80067bc:	e005      	b.n	80067ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80fb 	beq.w	80069c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	4413      	add	r3, r2
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d305      	bcc.n	80067ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d903      	bls.n	80067f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067f4:	e0e8      	b.n	80069c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2200      	movs	r2, #0
 80067fa:	461c      	mov	r4, r3
 80067fc:	4615      	mov	r5, r2
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	022b      	lsls	r3, r5, #8
 8006808:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800680c:	0222      	lsls	r2, r4, #8
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	6849      	ldr	r1, [r1, #4]
 8006812:	0849      	lsrs	r1, r1, #1
 8006814:	2000      	movs	r0, #0
 8006816:	4688      	mov	r8, r1
 8006818:	4681      	mov	r9, r0
 800681a:	eb12 0a08 	adds.w	sl, r2, r8
 800681e:	eb43 0b09 	adc.w	fp, r3, r9
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	f7f9 fd24 	bl	8000280 <__aeabi_uldivmod>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4613      	mov	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006846:	d308      	bcc.n	800685a <UART_SetConfig+0x3de>
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800684e:	d204      	bcs.n	800685a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e0b6      	b.n	80069c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006860:	e0b2      	b.n	80069c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800686a:	d15e      	bne.n	800692a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800686c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006870:	2b08      	cmp	r3, #8
 8006872:	d828      	bhi.n	80068c6 <UART_SetConfig+0x44a>
 8006874:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <UART_SetConfig+0x400>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068b1 	.word	0x080068b1
 8006888:	080068c7 	.word	0x080068c7
 800688c:	080068b7 	.word	0x080068b7
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068c7 	.word	0x080068c7
 8006898:	080068c7 	.word	0x080068c7
 800689c:	080068bf 	.word	0x080068bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fd fe66 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80068a4:	61f8      	str	r0, [r7, #28]
        break;
 80068a6:	e014      	b.n	80068d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fd fe78 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 80068ac:	61f8      	str	r0, [r7, #28]
        break;
 80068ae:	e010      	b.n	80068d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b0:	4b4d      	ldr	r3, [pc, #308]	@ (80069e8 <UART_SetConfig+0x56c>)
 80068b2:	61fb      	str	r3, [r7, #28]
        break;
 80068b4:	e00d      	b.n	80068d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068b6:	f7fd fdc3 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80068ba:	61f8      	str	r0, [r7, #28]
        break;
 80068bc:	e009      	b.n	80068d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c2:	61fb      	str	r3, [r7, #28]
        break;
 80068c4:	e005      	b.n	80068d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d077      	beq.n	80069c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	005a      	lsls	r2, r3, #1
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	441a      	add	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b0f      	cmp	r3, #15
 80068f2:	d916      	bls.n	8006922 <UART_SetConfig+0x4a6>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068fa:	d212      	bcs.n	8006922 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f023 030f 	bic.w	r3, r3, #15
 8006904:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	b29b      	uxth	r3, r3
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	b29a      	uxth	r2, r3
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	4313      	orrs	r3, r2
 8006916:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	8afa      	ldrh	r2, [r7, #22]
 800691e:	60da      	str	r2, [r3, #12]
 8006920:	e052      	b.n	80069c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006928:	e04e      	b.n	80069c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800692a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800692e:	2b08      	cmp	r3, #8
 8006930:	d827      	bhi.n	8006982 <UART_SetConfig+0x506>
 8006932:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <UART_SetConfig+0x4bc>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006965 	.word	0x08006965
 8006940:	0800696d 	.word	0x0800696d
 8006944:	08006983 	.word	0x08006983
 8006948:	08006973 	.word	0x08006973
 800694c:	08006983 	.word	0x08006983
 8006950:	08006983 	.word	0x08006983
 8006954:	08006983 	.word	0x08006983
 8006958:	0800697b 	.word	0x0800697b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fd fe08 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8006960:	61f8      	str	r0, [r7, #28]
        break;
 8006962:	e014      	b.n	800698e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006964:	f7fd fe1a 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8006968:	61f8      	str	r0, [r7, #28]
        break;
 800696a:	e010      	b.n	800698e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800696c:	4b1e      	ldr	r3, [pc, #120]	@ (80069e8 <UART_SetConfig+0x56c>)
 800696e:	61fb      	str	r3, [r7, #28]
        break;
 8006970:	e00d      	b.n	800698e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006972:	f7fd fd65 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006976:	61f8      	str	r0, [r7, #28]
        break;
 8006978:	e009      	b.n	800698e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800697e:	61fb      	str	r3, [r7, #28]
        break;
 8006980:	e005      	b.n	800698e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800698c:	bf00      	nop
    }

    if (pclk != 0U)
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d019      	beq.n	80069c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	085a      	lsrs	r2, r3, #1
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	441a      	add	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	d909      	bls.n	80069c2 <UART_SetConfig+0x546>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b4:	d205      	bcs.n	80069c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60da      	str	r2, [r3, #12]
 80069c0:	e002      	b.n	80069c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3728      	adds	r7, #40	@ 0x28
 80069dc:	46bd      	mov	sp, r7
 80069de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e2:	bf00      	nop
 80069e4:	40008000 	.word	0x40008000
 80069e8:	00f42400 	.word	0x00f42400

080069ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01a      	beq.n	8006b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aea:	d10a      	bne.n	8006b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
  }
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b098      	sub	sp, #96	@ 0x60
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b40:	f7fa ff94 	bl	8001a6c <HAL_GetTick>
 8006b44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d12e      	bne.n	8006bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f88c 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d021      	beq.n	8006bb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e062      	b.n	8006c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d149      	bne.n	8006c54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f856 	bl	8006c80 <UART_WaitOnFlagUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d03c      	beq.n	8006c54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	623b      	str	r3, [r7, #32]
   return(result);
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e6      	bne.n	8006bda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c2c:	61fa      	str	r2, [r7, #28]
 8006c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	617b      	str	r3, [r7, #20]
   return(result);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e011      	b.n	8006c78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3758      	adds	r7, #88	@ 0x58
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	e049      	b.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c98:	d045      	beq.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9a:	f7fa fee7 	bl	8001a6c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e048      	b.n	8006d46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d031      	beq.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d110      	bne.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f838 	bl	8006d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e029      	b.n	8006d46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d00:	d111      	bne.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 f81e 	bl	8006d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e00f      	b.n	8006d46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	bf0c      	ite	eq
 8006d36:	2301      	moveq	r3, #1
 8006d38:	2300      	movne	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d0a6      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b095      	sub	sp, #84	@ 0x54
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e6      	bne.n	8006d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d118      	bne.n	8006df6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f023 0310 	bic.w	r3, r3, #16
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6979      	ldr	r1, [r7, #20]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	613b      	str	r3, [r7, #16]
   return(result);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e0a:	bf00      	nop
 8006e0c:	3754      	adds	r7, #84	@ 0x54
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <atoi>:
 8006e16:	220a      	movs	r2, #10
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f000 b93f 	b.w	800709c <strtol>
	...

08006e20 <siprintf>:
 8006e20:	b40e      	push	{r1, r2, r3}
 8006e22:	b500      	push	{lr}
 8006e24:	b09c      	sub	sp, #112	@ 0x70
 8006e26:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e28:	9002      	str	r0, [sp, #8]
 8006e2a:	9006      	str	r0, [sp, #24]
 8006e2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e30:	4809      	ldr	r0, [pc, #36]	@ (8006e58 <siprintf+0x38>)
 8006e32:	9107      	str	r1, [sp, #28]
 8006e34:	9104      	str	r1, [sp, #16]
 8006e36:	4909      	ldr	r1, [pc, #36]	@ (8006e5c <siprintf+0x3c>)
 8006e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3c:	9105      	str	r1, [sp, #20]
 8006e3e:	6800      	ldr	r0, [r0, #0]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	a902      	add	r1, sp, #8
 8006e44:	f000 fa66 	bl	8007314 <_svfiprintf_r>
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	b01c      	add	sp, #112	@ 0x70
 8006e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e54:	b003      	add	sp, #12
 8006e56:	4770      	bx	lr
 8006e58:	20000018 	.word	0x20000018
 8006e5c:	ffff0208 	.word	0xffff0208

08006e60 <std>:
 8006e60:	2300      	movs	r3, #0
 8006e62:	b510      	push	{r4, lr}
 8006e64:	4604      	mov	r4, r0
 8006e66:	e9c0 3300 	strd	r3, r3, [r0]
 8006e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e6e:	6083      	str	r3, [r0, #8]
 8006e70:	8181      	strh	r1, [r0, #12]
 8006e72:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e74:	81c2      	strh	r2, [r0, #14]
 8006e76:	6183      	str	r3, [r0, #24]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	305c      	adds	r0, #92	@ 0x5c
 8006e7e:	f000 f991 	bl	80071a4 <memset>
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <std+0x58>)
 8006e84:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e86:	4b0d      	ldr	r3, [pc, #52]	@ (8006ebc <std+0x5c>)
 8006e88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <std+0x60>)
 8006e8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <std+0x64>)
 8006e90:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <std+0x68>)
 8006e94:	6224      	str	r4, [r4, #32]
 8006e96:	429c      	cmp	r4, r3
 8006e98:	d006      	beq.n	8006ea8 <std+0x48>
 8006e9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e9e:	4294      	cmp	r4, r2
 8006ea0:	d002      	beq.n	8006ea8 <std+0x48>
 8006ea2:	33d0      	adds	r3, #208	@ 0xd0
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	d105      	bne.n	8006eb4 <std+0x54>
 8006ea8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb0:	f000 b9aa 	b.w	8007208 <__retarget_lock_init_recursive>
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08007aed 	.word	0x08007aed
 8006ebc:	08007b0f 	.word	0x08007b0f
 8006ec0:	08007b47 	.word	0x08007b47
 8006ec4:	08007b6b 	.word	0x08007b6b
 8006ec8:	20000414 	.word	0x20000414

08006ecc <stdio_exit_handler>:
 8006ecc:	4a02      	ldr	r2, [pc, #8]	@ (8006ed8 <stdio_exit_handler+0xc>)
 8006ece:	4903      	ldr	r1, [pc, #12]	@ (8006edc <stdio_exit_handler+0x10>)
 8006ed0:	4803      	ldr	r0, [pc, #12]	@ (8006ee0 <stdio_exit_handler+0x14>)
 8006ed2:	f000 b8ed 	b.w	80070b0 <_fwalk_sglue>
 8006ed6:	bf00      	nop
 8006ed8:	2000000c 	.word	0x2000000c
 8006edc:	08007a85 	.word	0x08007a85
 8006ee0:	2000001c 	.word	0x2000001c

08006ee4 <cleanup_stdio>:
 8006ee4:	6841      	ldr	r1, [r0, #4]
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <cleanup_stdio+0x34>)
 8006ee8:	4299      	cmp	r1, r3
 8006eea:	b510      	push	{r4, lr}
 8006eec:	4604      	mov	r4, r0
 8006eee:	d001      	beq.n	8006ef4 <cleanup_stdio+0x10>
 8006ef0:	f000 fdc8 	bl	8007a84 <_fflush_r>
 8006ef4:	68a1      	ldr	r1, [r4, #8]
 8006ef6:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <cleanup_stdio+0x38>)
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d002      	beq.n	8006f02 <cleanup_stdio+0x1e>
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 fdc1 	bl	8007a84 <_fflush_r>
 8006f02:	68e1      	ldr	r1, [r4, #12]
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <cleanup_stdio+0x3c>)
 8006f06:	4299      	cmp	r1, r3
 8006f08:	d004      	beq.n	8006f14 <cleanup_stdio+0x30>
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f10:	f000 bdb8 	b.w	8007a84 <_fflush_r>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	bf00      	nop
 8006f18:	20000414 	.word	0x20000414
 8006f1c:	2000047c 	.word	0x2000047c
 8006f20:	200004e4 	.word	0x200004e4

08006f24 <global_stdio_init.part.0>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <global_stdio_init.part.0+0x30>)
 8006f28:	4c0b      	ldr	r4, [pc, #44]	@ (8006f58 <global_stdio_init.part.0+0x34>)
 8006f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f5c <global_stdio_init.part.0+0x38>)
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	2200      	movs	r2, #0
 8006f32:	2104      	movs	r1, #4
 8006f34:	f7ff ff94 	bl	8006e60 <std>
 8006f38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	2109      	movs	r1, #9
 8006f40:	f7ff ff8e 	bl	8006e60 <std>
 8006f44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f48:	2202      	movs	r2, #2
 8006f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4e:	2112      	movs	r1, #18
 8006f50:	f7ff bf86 	b.w	8006e60 <std>
 8006f54:	2000054c 	.word	0x2000054c
 8006f58:	20000414 	.word	0x20000414
 8006f5c:	08006ecd 	.word	0x08006ecd

08006f60 <__sfp_lock_acquire>:
 8006f60:	4801      	ldr	r0, [pc, #4]	@ (8006f68 <__sfp_lock_acquire+0x8>)
 8006f62:	f000 b952 	b.w	800720a <__retarget_lock_acquire_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000551 	.word	0x20000551

08006f6c <__sfp_lock_release>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__sfp_lock_release+0x8>)
 8006f6e:	f000 b94d 	b.w	800720c <__retarget_lock_release_recursive>
 8006f72:	bf00      	nop
 8006f74:	20000551 	.word	0x20000551

08006f78 <__sinit>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	f7ff fff0 	bl	8006f60 <__sfp_lock_acquire>
 8006f80:	6a23      	ldr	r3, [r4, #32]
 8006f82:	b11b      	cbz	r3, 8006f8c <__sinit+0x14>
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f88:	f7ff bff0 	b.w	8006f6c <__sfp_lock_release>
 8006f8c:	4b04      	ldr	r3, [pc, #16]	@ (8006fa0 <__sinit+0x28>)
 8006f8e:	6223      	str	r3, [r4, #32]
 8006f90:	4b04      	ldr	r3, [pc, #16]	@ (8006fa4 <__sinit+0x2c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f5      	bne.n	8006f84 <__sinit+0xc>
 8006f98:	f7ff ffc4 	bl	8006f24 <global_stdio_init.part.0>
 8006f9c:	e7f2      	b.n	8006f84 <__sinit+0xc>
 8006f9e:	bf00      	nop
 8006fa0:	08006ee5 	.word	0x08006ee5
 8006fa4:	2000054c 	.word	0x2000054c

08006fa8 <_strtol_l.constprop.0>:
 8006fa8:	2b24      	cmp	r3, #36	@ 0x24
 8006faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fae:	4686      	mov	lr, r0
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	d801      	bhi.n	8006fb8 <_strtol_l.constprop.0+0x10>
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d106      	bne.n	8006fc6 <_strtol_l.constprop.0+0x1e>
 8006fb8:	f000 f8fc 	bl	80071b4 <__errno>
 8006fbc:	2316      	movs	r3, #22
 8006fbe:	6003      	str	r3, [r0, #0]
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	4834      	ldr	r0, [pc, #208]	@ (8007098 <_strtol_l.constprop.0+0xf0>)
 8006fc8:	460d      	mov	r5, r1
 8006fca:	462a      	mov	r2, r5
 8006fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fd0:	5d06      	ldrb	r6, [r0, r4]
 8006fd2:	f016 0608 	ands.w	r6, r6, #8
 8006fd6:	d1f8      	bne.n	8006fca <_strtol_l.constprop.0+0x22>
 8006fd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006fda:	d12d      	bne.n	8007038 <_strtol_l.constprop.0+0x90>
 8006fdc:	782c      	ldrb	r4, [r5, #0]
 8006fde:	2601      	movs	r6, #1
 8006fe0:	1c95      	adds	r5, r2, #2
 8006fe2:	f033 0210 	bics.w	r2, r3, #16
 8006fe6:	d109      	bne.n	8006ffc <_strtol_l.constprop.0+0x54>
 8006fe8:	2c30      	cmp	r4, #48	@ 0x30
 8006fea:	d12a      	bne.n	8007042 <_strtol_l.constprop.0+0x9a>
 8006fec:	782a      	ldrb	r2, [r5, #0]
 8006fee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ff2:	2a58      	cmp	r2, #88	@ 0x58
 8006ff4:	d125      	bne.n	8007042 <_strtol_l.constprop.0+0x9a>
 8006ff6:	786c      	ldrb	r4, [r5, #1]
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	3502      	adds	r5, #2
 8006ffc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007000:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007004:	2200      	movs	r2, #0
 8007006:	fbbc f9f3 	udiv	r9, ip, r3
 800700a:	4610      	mov	r0, r2
 800700c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007010:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007014:	2f09      	cmp	r7, #9
 8007016:	d81b      	bhi.n	8007050 <_strtol_l.constprop.0+0xa8>
 8007018:	463c      	mov	r4, r7
 800701a:	42a3      	cmp	r3, r4
 800701c:	dd27      	ble.n	800706e <_strtol_l.constprop.0+0xc6>
 800701e:	1c57      	adds	r7, r2, #1
 8007020:	d007      	beq.n	8007032 <_strtol_l.constprop.0+0x8a>
 8007022:	4581      	cmp	r9, r0
 8007024:	d320      	bcc.n	8007068 <_strtol_l.constprop.0+0xc0>
 8007026:	d101      	bne.n	800702c <_strtol_l.constprop.0+0x84>
 8007028:	45a2      	cmp	sl, r4
 800702a:	db1d      	blt.n	8007068 <_strtol_l.constprop.0+0xc0>
 800702c:	fb00 4003 	mla	r0, r0, r3, r4
 8007030:	2201      	movs	r2, #1
 8007032:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007036:	e7eb      	b.n	8007010 <_strtol_l.constprop.0+0x68>
 8007038:	2c2b      	cmp	r4, #43	@ 0x2b
 800703a:	bf04      	itt	eq
 800703c:	782c      	ldrbeq	r4, [r5, #0]
 800703e:	1c95      	addeq	r5, r2, #2
 8007040:	e7cf      	b.n	8006fe2 <_strtol_l.constprop.0+0x3a>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1da      	bne.n	8006ffc <_strtol_l.constprop.0+0x54>
 8007046:	2c30      	cmp	r4, #48	@ 0x30
 8007048:	bf0c      	ite	eq
 800704a:	2308      	moveq	r3, #8
 800704c:	230a      	movne	r3, #10
 800704e:	e7d5      	b.n	8006ffc <_strtol_l.constprop.0+0x54>
 8007050:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007054:	2f19      	cmp	r7, #25
 8007056:	d801      	bhi.n	800705c <_strtol_l.constprop.0+0xb4>
 8007058:	3c37      	subs	r4, #55	@ 0x37
 800705a:	e7de      	b.n	800701a <_strtol_l.constprop.0+0x72>
 800705c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007060:	2f19      	cmp	r7, #25
 8007062:	d804      	bhi.n	800706e <_strtol_l.constprop.0+0xc6>
 8007064:	3c57      	subs	r4, #87	@ 0x57
 8007066:	e7d8      	b.n	800701a <_strtol_l.constprop.0+0x72>
 8007068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800706c:	e7e1      	b.n	8007032 <_strtol_l.constprop.0+0x8a>
 800706e:	1c53      	adds	r3, r2, #1
 8007070:	d108      	bne.n	8007084 <_strtol_l.constprop.0+0xdc>
 8007072:	2322      	movs	r3, #34	@ 0x22
 8007074:	f8ce 3000 	str.w	r3, [lr]
 8007078:	4660      	mov	r0, ip
 800707a:	f1b8 0f00 	cmp.w	r8, #0
 800707e:	d0a0      	beq.n	8006fc2 <_strtol_l.constprop.0+0x1a>
 8007080:	1e69      	subs	r1, r5, #1
 8007082:	e006      	b.n	8007092 <_strtol_l.constprop.0+0xea>
 8007084:	b106      	cbz	r6, 8007088 <_strtol_l.constprop.0+0xe0>
 8007086:	4240      	negs	r0, r0
 8007088:	f1b8 0f00 	cmp.w	r8, #0
 800708c:	d099      	beq.n	8006fc2 <_strtol_l.constprop.0+0x1a>
 800708e:	2a00      	cmp	r2, #0
 8007090:	d1f6      	bne.n	8007080 <_strtol_l.constprop.0+0xd8>
 8007092:	f8c8 1000 	str.w	r1, [r8]
 8007096:	e794      	b.n	8006fc2 <_strtol_l.constprop.0+0x1a>
 8007098:	0800841e 	.word	0x0800841e

0800709c <strtol>:
 800709c:	4613      	mov	r3, r2
 800709e:	460a      	mov	r2, r1
 80070a0:	4601      	mov	r1, r0
 80070a2:	4802      	ldr	r0, [pc, #8]	@ (80070ac <strtol+0x10>)
 80070a4:	6800      	ldr	r0, [r0, #0]
 80070a6:	f7ff bf7f 	b.w	8006fa8 <_strtol_l.constprop.0>
 80070aa:	bf00      	nop
 80070ac:	20000018 	.word	0x20000018

080070b0 <_fwalk_sglue>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4607      	mov	r7, r0
 80070b6:	4688      	mov	r8, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	2600      	movs	r6, #0
 80070bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c0:	f1b9 0901 	subs.w	r9, r9, #1
 80070c4:	d505      	bpl.n	80070d2 <_fwalk_sglue+0x22>
 80070c6:	6824      	ldr	r4, [r4, #0]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d1f7      	bne.n	80070bc <_fwalk_sglue+0xc>
 80070cc:	4630      	mov	r0, r6
 80070ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d907      	bls.n	80070e8 <_fwalk_sglue+0x38>
 80070d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070dc:	3301      	adds	r3, #1
 80070de:	d003      	beq.n	80070e8 <_fwalk_sglue+0x38>
 80070e0:	4629      	mov	r1, r5
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c0      	blx	r8
 80070e6:	4306      	orrs	r6, r0
 80070e8:	3568      	adds	r5, #104	@ 0x68
 80070ea:	e7e9      	b.n	80070c0 <_fwalk_sglue+0x10>

080070ec <strtok>:
 80070ec:	4b16      	ldr	r3, [pc, #88]	@ (8007148 <strtok+0x5c>)
 80070ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f2:	681f      	ldr	r7, [r3, #0]
 80070f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80070f6:	4605      	mov	r5, r0
 80070f8:	460e      	mov	r6, r1
 80070fa:	b9ec      	cbnz	r4, 8007138 <strtok+0x4c>
 80070fc:	2050      	movs	r0, #80	@ 0x50
 80070fe:	f000 fa05 	bl	800750c <malloc>
 8007102:	4602      	mov	r2, r0
 8007104:	6478      	str	r0, [r7, #68]	@ 0x44
 8007106:	b920      	cbnz	r0, 8007112 <strtok+0x26>
 8007108:	4b10      	ldr	r3, [pc, #64]	@ (800714c <strtok+0x60>)
 800710a:	4811      	ldr	r0, [pc, #68]	@ (8007150 <strtok+0x64>)
 800710c:	215b      	movs	r1, #91	@ 0x5b
 800710e:	f000 f887 	bl	8007220 <__assert_func>
 8007112:	e9c0 4400 	strd	r4, r4, [r0]
 8007116:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800711a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800711e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007122:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007126:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800712a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800712e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007132:	6184      	str	r4, [r0, #24]
 8007134:	7704      	strb	r4, [r0, #28]
 8007136:	6244      	str	r4, [r0, #36]	@ 0x24
 8007138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	2301      	movs	r3, #1
 8007140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	f000 b806 	b.w	8007154 <__strtok_r>
 8007148:	20000018 	.word	0x20000018
 800714c:	080083ac 	.word	0x080083ac
 8007150:	080083c3 	.word	0x080083c3

08007154 <__strtok_r>:
 8007154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007156:	4604      	mov	r4, r0
 8007158:	b908      	cbnz	r0, 800715e <__strtok_r+0xa>
 800715a:	6814      	ldr	r4, [r2, #0]
 800715c:	b144      	cbz	r4, 8007170 <__strtok_r+0x1c>
 800715e:	4620      	mov	r0, r4
 8007160:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007164:	460f      	mov	r7, r1
 8007166:	f817 6b01 	ldrb.w	r6, [r7], #1
 800716a:	b91e      	cbnz	r6, 8007174 <__strtok_r+0x20>
 800716c:	b965      	cbnz	r5, 8007188 <__strtok_r+0x34>
 800716e:	6015      	str	r5, [r2, #0]
 8007170:	2000      	movs	r0, #0
 8007172:	e005      	b.n	8007180 <__strtok_r+0x2c>
 8007174:	42b5      	cmp	r5, r6
 8007176:	d1f6      	bne.n	8007166 <__strtok_r+0x12>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f0      	bne.n	800715e <__strtok_r+0xa>
 800717c:	6014      	str	r4, [r2, #0]
 800717e:	7003      	strb	r3, [r0, #0]
 8007180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007182:	461c      	mov	r4, r3
 8007184:	e00c      	b.n	80071a0 <__strtok_r+0x4c>
 8007186:	b915      	cbnz	r5, 800718e <__strtok_r+0x3a>
 8007188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800718c:	460e      	mov	r6, r1
 800718e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007192:	42ab      	cmp	r3, r5
 8007194:	d1f7      	bne.n	8007186 <__strtok_r+0x32>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f3      	beq.n	8007182 <__strtok_r+0x2e>
 800719a:	2300      	movs	r3, #0
 800719c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80071a0:	6014      	str	r4, [r2, #0]
 80071a2:	e7ed      	b.n	8007180 <__strtok_r+0x2c>

080071a4 <memset>:
 80071a4:	4402      	add	r2, r0
 80071a6:	4603      	mov	r3, r0
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d100      	bne.n	80071ae <memset+0xa>
 80071ac:	4770      	bx	lr
 80071ae:	f803 1b01 	strb.w	r1, [r3], #1
 80071b2:	e7f9      	b.n	80071a8 <memset+0x4>

080071b4 <__errno>:
 80071b4:	4b01      	ldr	r3, [pc, #4]	@ (80071bc <__errno+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000018 	.word	0x20000018

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4d0d      	ldr	r5, [pc, #52]	@ (80071f8 <__libc_init_array+0x38>)
 80071c4:	4c0d      	ldr	r4, [pc, #52]	@ (80071fc <__libc_init_array+0x3c>)
 80071c6:	1b64      	subs	r4, r4, r5
 80071c8:	10a4      	asrs	r4, r4, #2
 80071ca:	2600      	movs	r6, #0
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007200 <__libc_init_array+0x40>)
 80071d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007204 <__libc_init_array+0x44>)
 80071d4:	f001 f884 	bl	80082e0 <_init>
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	2600      	movs	r6, #0
 80071de:	42a6      	cmp	r6, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e8:	4798      	blx	r3
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f2:	4798      	blx	r3
 80071f4:	3601      	adds	r6, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	08008598 	.word	0x08008598
 80071fc:	08008598 	.word	0x08008598
 8007200:	08008598 	.word	0x08008598
 8007204:	0800859c 	.word	0x0800859c

08007208 <__retarget_lock_init_recursive>:
 8007208:	4770      	bx	lr

0800720a <__retarget_lock_acquire_recursive>:
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_release_recursive>:
 800720c:	4770      	bx	lr

0800720e <strcpy>:
 800720e:	4603      	mov	r3, r0
 8007210:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007214:	f803 2b01 	strb.w	r2, [r3], #1
 8007218:	2a00      	cmp	r2, #0
 800721a:	d1f9      	bne.n	8007210 <strcpy+0x2>
 800721c:	4770      	bx	lr
	...

08007220 <__assert_func>:
 8007220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007222:	4614      	mov	r4, r2
 8007224:	461a      	mov	r2, r3
 8007226:	4b09      	ldr	r3, [pc, #36]	@ (800724c <__assert_func+0x2c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4605      	mov	r5, r0
 800722c:	68d8      	ldr	r0, [r3, #12]
 800722e:	b954      	cbnz	r4, 8007246 <__assert_func+0x26>
 8007230:	4b07      	ldr	r3, [pc, #28]	@ (8007250 <__assert_func+0x30>)
 8007232:	461c      	mov	r4, r3
 8007234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007238:	9100      	str	r1, [sp, #0]
 800723a:	462b      	mov	r3, r5
 800723c:	4905      	ldr	r1, [pc, #20]	@ (8007254 <__assert_func+0x34>)
 800723e:	f000 fc99 	bl	8007b74 <fiprintf>
 8007242:	f000 fd55 	bl	8007cf0 <abort>
 8007246:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <__assert_func+0x38>)
 8007248:	e7f4      	b.n	8007234 <__assert_func+0x14>
 800724a:	bf00      	nop
 800724c:	20000018 	.word	0x20000018
 8007250:	08008559 	.word	0x08008559
 8007254:	0800852b 	.word	0x0800852b
 8007258:	0800851e 	.word	0x0800851e

0800725c <__ssputs_r>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	688e      	ldr	r6, [r1, #8]
 8007262:	461f      	mov	r7, r3
 8007264:	42be      	cmp	r6, r7
 8007266:	680b      	ldr	r3, [r1, #0]
 8007268:	4682      	mov	sl, r0
 800726a:	460c      	mov	r4, r1
 800726c:	4690      	mov	r8, r2
 800726e:	d82d      	bhi.n	80072cc <__ssputs_r+0x70>
 8007270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007278:	d026      	beq.n	80072c8 <__ssputs_r+0x6c>
 800727a:	6965      	ldr	r5, [r4, #20]
 800727c:	6909      	ldr	r1, [r1, #16]
 800727e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007282:	eba3 0901 	sub.w	r9, r3, r1
 8007286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800728a:	1c7b      	adds	r3, r7, #1
 800728c:	444b      	add	r3, r9
 800728e:	106d      	asrs	r5, r5, #1
 8007290:	429d      	cmp	r5, r3
 8007292:	bf38      	it	cc
 8007294:	461d      	movcc	r5, r3
 8007296:	0553      	lsls	r3, r2, #21
 8007298:	d527      	bpl.n	80072ea <__ssputs_r+0x8e>
 800729a:	4629      	mov	r1, r5
 800729c:	f000 f960 	bl	8007560 <_malloc_r>
 80072a0:	4606      	mov	r6, r0
 80072a2:	b360      	cbz	r0, 80072fe <__ssputs_r+0xa2>
 80072a4:	6921      	ldr	r1, [r4, #16]
 80072a6:	464a      	mov	r2, r9
 80072a8:	f000 fd14 	bl	8007cd4 <memcpy>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	6126      	str	r6, [r4, #16]
 80072ba:	6165      	str	r5, [r4, #20]
 80072bc:	444e      	add	r6, r9
 80072be:	eba5 0509 	sub.w	r5, r5, r9
 80072c2:	6026      	str	r6, [r4, #0]
 80072c4:	60a5      	str	r5, [r4, #8]
 80072c6:	463e      	mov	r6, r7
 80072c8:	42be      	cmp	r6, r7
 80072ca:	d900      	bls.n	80072ce <__ssputs_r+0x72>
 80072cc:	463e      	mov	r6, r7
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	4632      	mov	r2, r6
 80072d2:	4641      	mov	r1, r8
 80072d4:	f000 fc8e 	bl	8007bf4 <memmove>
 80072d8:	68a3      	ldr	r3, [r4, #8]
 80072da:	1b9b      	subs	r3, r3, r6
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	4433      	add	r3, r6
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	2000      	movs	r0, #0
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	462a      	mov	r2, r5
 80072ec:	f000 fc54 	bl	8007b98 <_realloc_r>
 80072f0:	4606      	mov	r6, r0
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1e0      	bne.n	80072b8 <__ssputs_r+0x5c>
 80072f6:	6921      	ldr	r1, [r4, #16]
 80072f8:	4650      	mov	r0, sl
 80072fa:	f000 fd01 	bl	8007d00 <_free_r>
 80072fe:	230c      	movs	r3, #12
 8007300:	f8ca 3000 	str.w	r3, [sl]
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007310:	e7e9      	b.n	80072e6 <__ssputs_r+0x8a>
	...

08007314 <_svfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4698      	mov	r8, r3
 800731a:	898b      	ldrh	r3, [r1, #12]
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	b09d      	sub	sp, #116	@ 0x74
 8007320:	4607      	mov	r7, r0
 8007322:	460d      	mov	r5, r1
 8007324:	4614      	mov	r4, r2
 8007326:	d510      	bpl.n	800734a <_svfiprintf_r+0x36>
 8007328:	690b      	ldr	r3, [r1, #16]
 800732a:	b973      	cbnz	r3, 800734a <_svfiprintf_r+0x36>
 800732c:	2140      	movs	r1, #64	@ 0x40
 800732e:	f000 f917 	bl	8007560 <_malloc_r>
 8007332:	6028      	str	r0, [r5, #0]
 8007334:	6128      	str	r0, [r5, #16]
 8007336:	b930      	cbnz	r0, 8007346 <_svfiprintf_r+0x32>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007340:	b01d      	add	sp, #116	@ 0x74
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	2340      	movs	r3, #64	@ 0x40
 8007348:	616b      	str	r3, [r5, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	9309      	str	r3, [sp, #36]	@ 0x24
 800734e:	2320      	movs	r3, #32
 8007350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007354:	f8cd 800c 	str.w	r8, [sp, #12]
 8007358:	2330      	movs	r3, #48	@ 0x30
 800735a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074f8 <_svfiprintf_r+0x1e4>
 800735e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007362:	f04f 0901 	mov.w	r9, #1
 8007366:	4623      	mov	r3, r4
 8007368:	469a      	mov	sl, r3
 800736a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736e:	b10a      	cbz	r2, 8007374 <_svfiprintf_r+0x60>
 8007370:	2a25      	cmp	r2, #37	@ 0x25
 8007372:	d1f9      	bne.n	8007368 <_svfiprintf_r+0x54>
 8007374:	ebba 0b04 	subs.w	fp, sl, r4
 8007378:	d00b      	beq.n	8007392 <_svfiprintf_r+0x7e>
 800737a:	465b      	mov	r3, fp
 800737c:	4622      	mov	r2, r4
 800737e:	4629      	mov	r1, r5
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ff6b 	bl	800725c <__ssputs_r>
 8007386:	3001      	adds	r0, #1
 8007388:	f000 80a7 	beq.w	80074da <_svfiprintf_r+0x1c6>
 800738c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800738e:	445a      	add	r2, fp
 8007390:	9209      	str	r2, [sp, #36]	@ 0x24
 8007392:	f89a 3000 	ldrb.w	r3, [sl]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 809f 	beq.w	80074da <_svfiprintf_r+0x1c6>
 800739c:	2300      	movs	r3, #0
 800739e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a6:	f10a 0a01 	add.w	sl, sl, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073b4:	4654      	mov	r4, sl
 80073b6:	2205      	movs	r2, #5
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	484e      	ldr	r0, [pc, #312]	@ (80074f8 <_svfiprintf_r+0x1e4>)
 80073be:	f7f8 ff0f 	bl	80001e0 <memchr>
 80073c2:	9a04      	ldr	r2, [sp, #16]
 80073c4:	b9d8      	cbnz	r0, 80073fe <_svfiprintf_r+0xea>
 80073c6:	06d0      	lsls	r0, r2, #27
 80073c8:	bf44      	itt	mi
 80073ca:	2320      	movmi	r3, #32
 80073cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d0:	0711      	lsls	r1, r2, #28
 80073d2:	bf44      	itt	mi
 80073d4:	232b      	movmi	r3, #43	@ 0x2b
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073da:	f89a 3000 	ldrb.w	r3, [sl]
 80073de:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e0:	d015      	beq.n	800740e <_svfiprintf_r+0xfa>
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	4654      	mov	r4, sl
 80073e6:	2000      	movs	r0, #0
 80073e8:	f04f 0c0a 	mov.w	ip, #10
 80073ec:	4621      	mov	r1, r4
 80073ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f2:	3b30      	subs	r3, #48	@ 0x30
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d94b      	bls.n	8007490 <_svfiprintf_r+0x17c>
 80073f8:	b1b0      	cbz	r0, 8007428 <_svfiprintf_r+0x114>
 80073fa:	9207      	str	r2, [sp, #28]
 80073fc:	e014      	b.n	8007428 <_svfiprintf_r+0x114>
 80073fe:	eba0 0308 	sub.w	r3, r0, r8
 8007402:	fa09 f303 	lsl.w	r3, r9, r3
 8007406:	4313      	orrs	r3, r2
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	46a2      	mov	sl, r4
 800740c:	e7d2      	b.n	80073b4 <_svfiprintf_r+0xa0>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9103      	str	r1, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfbb      	ittet	lt
 800741a:	425b      	neglt	r3, r3
 800741c:	f042 0202 	orrlt.w	r2, r2, #2
 8007420:	9307      	strge	r3, [sp, #28]
 8007422:	9307      	strlt	r3, [sp, #28]
 8007424:	bfb8      	it	lt
 8007426:	9204      	strlt	r2, [sp, #16]
 8007428:	7823      	ldrb	r3, [r4, #0]
 800742a:	2b2e      	cmp	r3, #46	@ 0x2e
 800742c:	d10a      	bne.n	8007444 <_svfiprintf_r+0x130>
 800742e:	7863      	ldrb	r3, [r4, #1]
 8007430:	2b2a      	cmp	r3, #42	@ 0x2a
 8007432:	d132      	bne.n	800749a <_svfiprintf_r+0x186>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9203      	str	r2, [sp, #12]
 800743c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007440:	3402      	adds	r4, #2
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007508 <_svfiprintf_r+0x1f4>
 8007448:	7821      	ldrb	r1, [r4, #0]
 800744a:	2203      	movs	r2, #3
 800744c:	4650      	mov	r0, sl
 800744e:	f7f8 fec7 	bl	80001e0 <memchr>
 8007452:	b138      	cbz	r0, 8007464 <_svfiprintf_r+0x150>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	eba0 000a 	sub.w	r0, r0, sl
 800745a:	2240      	movs	r2, #64	@ 0x40
 800745c:	4082      	lsls	r2, r0
 800745e:	4313      	orrs	r3, r2
 8007460:	3401      	adds	r4, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	4824      	ldr	r0, [pc, #144]	@ (80074fc <_svfiprintf_r+0x1e8>)
 800746a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800746e:	2206      	movs	r2, #6
 8007470:	f7f8 feb6 	bl	80001e0 <memchr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d036      	beq.n	80074e6 <_svfiprintf_r+0x1d2>
 8007478:	4b21      	ldr	r3, [pc, #132]	@ (8007500 <_svfiprintf_r+0x1ec>)
 800747a:	bb1b      	cbnz	r3, 80074c4 <_svfiprintf_r+0x1b0>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	3307      	adds	r3, #7
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	3308      	adds	r3, #8
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748a:	4433      	add	r3, r6
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	e76a      	b.n	8007366 <_svfiprintf_r+0x52>
 8007490:	fb0c 3202 	mla	r2, ip, r2, r3
 8007494:	460c      	mov	r4, r1
 8007496:	2001      	movs	r0, #1
 8007498:	e7a8      	b.n	80073ec <_svfiprintf_r+0xd8>
 800749a:	2300      	movs	r3, #0
 800749c:	3401      	adds	r4, #1
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	4619      	mov	r1, r3
 80074a2:	f04f 0c0a 	mov.w	ip, #10
 80074a6:	4620      	mov	r0, r4
 80074a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ac:	3a30      	subs	r2, #48	@ 0x30
 80074ae:	2a09      	cmp	r2, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x1a6>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c6      	beq.n	8007444 <_svfiprintf_r+0x130>
 80074b6:	9105      	str	r1, [sp, #20]
 80074b8:	e7c4      	b.n	8007444 <_svfiprintf_r+0x130>
 80074ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80074be:	4604      	mov	r4, r0
 80074c0:	2301      	movs	r3, #1
 80074c2:	e7f0      	b.n	80074a6 <_svfiprintf_r+0x192>
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	462a      	mov	r2, r5
 80074ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <_svfiprintf_r+0x1f0>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	4638      	mov	r0, r7
 80074d0:	f3af 8000 	nop.w
 80074d4:	1c42      	adds	r2, r0, #1
 80074d6:	4606      	mov	r6, r0
 80074d8:	d1d6      	bne.n	8007488 <_svfiprintf_r+0x174>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	065b      	lsls	r3, r3, #25
 80074de:	f53f af2d 	bmi.w	800733c <_svfiprintf_r+0x28>
 80074e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074e4:	e72c      	b.n	8007340 <_svfiprintf_r+0x2c>
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	462a      	mov	r2, r5
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <_svfiprintf_r+0x1f0>)
 80074ee:	a904      	add	r1, sp, #16
 80074f0:	4638      	mov	r0, r7
 80074f2:	f000 f923 	bl	800773c <_printf_i>
 80074f6:	e7ed      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074f8:	0800855a 	.word	0x0800855a
 80074fc:	08008564 	.word	0x08008564
 8007500:	00000000 	.word	0x00000000
 8007504:	0800725d 	.word	0x0800725d
 8007508:	08008560 	.word	0x08008560

0800750c <malloc>:
 800750c:	4b02      	ldr	r3, [pc, #8]	@ (8007518 <malloc+0xc>)
 800750e:	4601      	mov	r1, r0
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f000 b825 	b.w	8007560 <_malloc_r>
 8007516:	bf00      	nop
 8007518:	20000018 	.word	0x20000018

0800751c <sbrk_aligned>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4e0f      	ldr	r6, [pc, #60]	@ (800755c <sbrk_aligned+0x40>)
 8007520:	460c      	mov	r4, r1
 8007522:	6831      	ldr	r1, [r6, #0]
 8007524:	4605      	mov	r5, r0
 8007526:	b911      	cbnz	r1, 800752e <sbrk_aligned+0x12>
 8007528:	f000 fbb2 	bl	8007c90 <_sbrk_r>
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 fbad 	bl	8007c90 <_sbrk_r>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d103      	bne.n	8007542 <sbrk_aligned+0x26>
 800753a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800753e:	4620      	mov	r0, r4
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	1cc4      	adds	r4, r0, #3
 8007544:	f024 0403 	bic.w	r4, r4, #3
 8007548:	42a0      	cmp	r0, r4
 800754a:	d0f8      	beq.n	800753e <sbrk_aligned+0x22>
 800754c:	1a21      	subs	r1, r4, r0
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fb9e 	bl	8007c90 <_sbrk_r>
 8007554:	3001      	adds	r0, #1
 8007556:	d1f2      	bne.n	800753e <sbrk_aligned+0x22>
 8007558:	e7ef      	b.n	800753a <sbrk_aligned+0x1e>
 800755a:	bf00      	nop
 800755c:	20000554 	.word	0x20000554

08007560 <_malloc_r>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	1ccd      	adds	r5, r1, #3
 8007566:	f025 0503 	bic.w	r5, r5, #3
 800756a:	3508      	adds	r5, #8
 800756c:	2d0c      	cmp	r5, #12
 800756e:	bf38      	it	cc
 8007570:	250c      	movcc	r5, #12
 8007572:	2d00      	cmp	r5, #0
 8007574:	4606      	mov	r6, r0
 8007576:	db01      	blt.n	800757c <_malloc_r+0x1c>
 8007578:	42a9      	cmp	r1, r5
 800757a:	d904      	bls.n	8007586 <_malloc_r+0x26>
 800757c:	230c      	movs	r3, #12
 800757e:	6033      	str	r3, [r6, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007586:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800765c <_malloc_r+0xfc>
 800758a:	f000 faa3 	bl	8007ad4 <__malloc_lock>
 800758e:	f8d8 3000 	ldr.w	r3, [r8]
 8007592:	461c      	mov	r4, r3
 8007594:	bb44      	cbnz	r4, 80075e8 <_malloc_r+0x88>
 8007596:	4629      	mov	r1, r5
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ffbf 	bl	800751c <sbrk_aligned>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	4604      	mov	r4, r0
 80075a2:	d158      	bne.n	8007656 <_malloc_r+0xf6>
 80075a4:	f8d8 4000 	ldr.w	r4, [r8]
 80075a8:	4627      	mov	r7, r4
 80075aa:	2f00      	cmp	r7, #0
 80075ac:	d143      	bne.n	8007636 <_malloc_r+0xd6>
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	d04b      	beq.n	800764a <_malloc_r+0xea>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	4639      	mov	r1, r7
 80075b6:	4630      	mov	r0, r6
 80075b8:	eb04 0903 	add.w	r9, r4, r3
 80075bc:	f000 fb68 	bl	8007c90 <_sbrk_r>
 80075c0:	4581      	cmp	r9, r0
 80075c2:	d142      	bne.n	800764a <_malloc_r+0xea>
 80075c4:	6821      	ldr	r1, [r4, #0]
 80075c6:	1a6d      	subs	r5, r5, r1
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ffa6 	bl	800751c <sbrk_aligned>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d03a      	beq.n	800764a <_malloc_r+0xea>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	442b      	add	r3, r5
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	f8d8 3000 	ldr.w	r3, [r8]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	bb62      	cbnz	r2, 800763c <_malloc_r+0xdc>
 80075e2:	f8c8 7000 	str.w	r7, [r8]
 80075e6:	e00f      	b.n	8007608 <_malloc_r+0xa8>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	1b52      	subs	r2, r2, r5
 80075ec:	d420      	bmi.n	8007630 <_malloc_r+0xd0>
 80075ee:	2a0b      	cmp	r2, #11
 80075f0:	d917      	bls.n	8007622 <_malloc_r+0xc2>
 80075f2:	1961      	adds	r1, r4, r5
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	6025      	str	r5, [r4, #0]
 80075f8:	bf18      	it	ne
 80075fa:	6059      	strne	r1, [r3, #4]
 80075fc:	6863      	ldr	r3, [r4, #4]
 80075fe:	bf08      	it	eq
 8007600:	f8c8 1000 	streq.w	r1, [r8]
 8007604:	5162      	str	r2, [r4, r5]
 8007606:	604b      	str	r3, [r1, #4]
 8007608:	4630      	mov	r0, r6
 800760a:	f000 fa69 	bl	8007ae0 <__malloc_unlock>
 800760e:	f104 000b 	add.w	r0, r4, #11
 8007612:	1d23      	adds	r3, r4, #4
 8007614:	f020 0007 	bic.w	r0, r0, #7
 8007618:	1ac2      	subs	r2, r0, r3
 800761a:	bf1c      	itt	ne
 800761c:	1a1b      	subne	r3, r3, r0
 800761e:	50a3      	strne	r3, [r4, r2]
 8007620:	e7af      	b.n	8007582 <_malloc_r+0x22>
 8007622:	6862      	ldr	r2, [r4, #4]
 8007624:	42a3      	cmp	r3, r4
 8007626:	bf0c      	ite	eq
 8007628:	f8c8 2000 	streq.w	r2, [r8]
 800762c:	605a      	strne	r2, [r3, #4]
 800762e:	e7eb      	b.n	8007608 <_malloc_r+0xa8>
 8007630:	4623      	mov	r3, r4
 8007632:	6864      	ldr	r4, [r4, #4]
 8007634:	e7ae      	b.n	8007594 <_malloc_r+0x34>
 8007636:	463c      	mov	r4, r7
 8007638:	687f      	ldr	r7, [r7, #4]
 800763a:	e7b6      	b.n	80075aa <_malloc_r+0x4a>
 800763c:	461a      	mov	r2, r3
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	42a3      	cmp	r3, r4
 8007642:	d1fb      	bne.n	800763c <_malloc_r+0xdc>
 8007644:	2300      	movs	r3, #0
 8007646:	6053      	str	r3, [r2, #4]
 8007648:	e7de      	b.n	8007608 <_malloc_r+0xa8>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	4630      	mov	r0, r6
 8007650:	f000 fa46 	bl	8007ae0 <__malloc_unlock>
 8007654:	e794      	b.n	8007580 <_malloc_r+0x20>
 8007656:	6005      	str	r5, [r0, #0]
 8007658:	e7d6      	b.n	8007608 <_malloc_r+0xa8>
 800765a:	bf00      	nop
 800765c:	20000558 	.word	0x20000558

08007660 <_printf_common>:
 8007660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007664:	4616      	mov	r6, r2
 8007666:	4698      	mov	r8, r3
 8007668:	688a      	ldr	r2, [r1, #8]
 800766a:	690b      	ldr	r3, [r1, #16]
 800766c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007670:	4293      	cmp	r3, r2
 8007672:	bfb8      	it	lt
 8007674:	4613      	movlt	r3, r2
 8007676:	6033      	str	r3, [r6, #0]
 8007678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800767c:	4607      	mov	r7, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b10a      	cbz	r2, 8007686 <_printf_common+0x26>
 8007682:	3301      	adds	r3, #1
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	0699      	lsls	r1, r3, #26
 800768a:	bf42      	ittt	mi
 800768c:	6833      	ldrmi	r3, [r6, #0]
 800768e:	3302      	addmi	r3, #2
 8007690:	6033      	strmi	r3, [r6, #0]
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	f015 0506 	ands.w	r5, r5, #6
 8007698:	d106      	bne.n	80076a8 <_printf_common+0x48>
 800769a:	f104 0a19 	add.w	sl, r4, #25
 800769e:	68e3      	ldr	r3, [r4, #12]
 80076a0:	6832      	ldr	r2, [r6, #0]
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	42ab      	cmp	r3, r5
 80076a6:	dc26      	bgt.n	80076f6 <_printf_common+0x96>
 80076a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	3b00      	subs	r3, #0
 80076b0:	bf18      	it	ne
 80076b2:	2301      	movne	r3, #1
 80076b4:	0692      	lsls	r2, r2, #26
 80076b6:	d42b      	bmi.n	8007710 <_printf_common+0xb0>
 80076b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076bc:	4641      	mov	r1, r8
 80076be:	4638      	mov	r0, r7
 80076c0:	47c8      	blx	r9
 80076c2:	3001      	adds	r0, #1
 80076c4:	d01e      	beq.n	8007704 <_printf_common+0xa4>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	6922      	ldr	r2, [r4, #16]
 80076ca:	f003 0306 	and.w	r3, r3, #6
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	bf02      	ittt	eq
 80076d2:	68e5      	ldreq	r5, [r4, #12]
 80076d4:	6833      	ldreq	r3, [r6, #0]
 80076d6:	1aed      	subeq	r5, r5, r3
 80076d8:	68a3      	ldr	r3, [r4, #8]
 80076da:	bf0c      	ite	eq
 80076dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e0:	2500      	movne	r5, #0
 80076e2:	4293      	cmp	r3, r2
 80076e4:	bfc4      	itt	gt
 80076e6:	1a9b      	subgt	r3, r3, r2
 80076e8:	18ed      	addgt	r5, r5, r3
 80076ea:	2600      	movs	r6, #0
 80076ec:	341a      	adds	r4, #26
 80076ee:	42b5      	cmp	r5, r6
 80076f0:	d11a      	bne.n	8007728 <_printf_common+0xc8>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e008      	b.n	8007708 <_printf_common+0xa8>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4652      	mov	r2, sl
 80076fa:	4641      	mov	r1, r8
 80076fc:	4638      	mov	r0, r7
 80076fe:	47c8      	blx	r9
 8007700:	3001      	adds	r0, #1
 8007702:	d103      	bne.n	800770c <_printf_common+0xac>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770c:	3501      	adds	r5, #1
 800770e:	e7c6      	b.n	800769e <_printf_common+0x3e>
 8007710:	18e1      	adds	r1, r4, r3
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	2030      	movs	r0, #48	@ 0x30
 8007716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800771a:	4422      	add	r2, r4
 800771c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007724:	3302      	adds	r3, #2
 8007726:	e7c7      	b.n	80076b8 <_printf_common+0x58>
 8007728:	2301      	movs	r3, #1
 800772a:	4622      	mov	r2, r4
 800772c:	4641      	mov	r1, r8
 800772e:	4638      	mov	r0, r7
 8007730:	47c8      	blx	r9
 8007732:	3001      	adds	r0, #1
 8007734:	d0e6      	beq.n	8007704 <_printf_common+0xa4>
 8007736:	3601      	adds	r6, #1
 8007738:	e7d9      	b.n	80076ee <_printf_common+0x8e>
	...

0800773c <_printf_i>:
 800773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	7e0f      	ldrb	r7, [r1, #24]
 8007742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007744:	2f78      	cmp	r7, #120	@ 0x78
 8007746:	4691      	mov	r9, r2
 8007748:	4680      	mov	r8, r0
 800774a:	460c      	mov	r4, r1
 800774c:	469a      	mov	sl, r3
 800774e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007752:	d807      	bhi.n	8007764 <_printf_i+0x28>
 8007754:	2f62      	cmp	r7, #98	@ 0x62
 8007756:	d80a      	bhi.n	800776e <_printf_i+0x32>
 8007758:	2f00      	cmp	r7, #0
 800775a:	f000 80d2 	beq.w	8007902 <_printf_i+0x1c6>
 800775e:	2f58      	cmp	r7, #88	@ 0x58
 8007760:	f000 80b9 	beq.w	80078d6 <_printf_i+0x19a>
 8007764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800776c:	e03a      	b.n	80077e4 <_printf_i+0xa8>
 800776e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007772:	2b15      	cmp	r3, #21
 8007774:	d8f6      	bhi.n	8007764 <_printf_i+0x28>
 8007776:	a101      	add	r1, pc, #4	@ (adr r1, 800777c <_printf_i+0x40>)
 8007778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077e9 	.word	0x080077e9
 8007784:	08007765 	.word	0x08007765
 8007788:	08007765 	.word	0x08007765
 800778c:	08007765 	.word	0x08007765
 8007790:	08007765 	.word	0x08007765
 8007794:	080077e9 	.word	0x080077e9
 8007798:	08007765 	.word	0x08007765
 800779c:	08007765 	.word	0x08007765
 80077a0:	08007765 	.word	0x08007765
 80077a4:	08007765 	.word	0x08007765
 80077a8:	080078e9 	.word	0x080078e9
 80077ac:	08007813 	.word	0x08007813
 80077b0:	080078a3 	.word	0x080078a3
 80077b4:	08007765 	.word	0x08007765
 80077b8:	08007765 	.word	0x08007765
 80077bc:	0800790b 	.word	0x0800790b
 80077c0:	08007765 	.word	0x08007765
 80077c4:	08007813 	.word	0x08007813
 80077c8:	08007765 	.word	0x08007765
 80077cc:	08007765 	.word	0x08007765
 80077d0:	080078ab 	.word	0x080078ab
 80077d4:	6833      	ldr	r3, [r6, #0]
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6032      	str	r2, [r6, #0]
 80077dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077e4:	2301      	movs	r3, #1
 80077e6:	e09d      	b.n	8007924 <_printf_i+0x1e8>
 80077e8:	6833      	ldr	r3, [r6, #0]
 80077ea:	6820      	ldr	r0, [r4, #0]
 80077ec:	1d19      	adds	r1, r3, #4
 80077ee:	6031      	str	r1, [r6, #0]
 80077f0:	0606      	lsls	r6, r0, #24
 80077f2:	d501      	bpl.n	80077f8 <_printf_i+0xbc>
 80077f4:	681d      	ldr	r5, [r3, #0]
 80077f6:	e003      	b.n	8007800 <_printf_i+0xc4>
 80077f8:	0645      	lsls	r5, r0, #25
 80077fa:	d5fb      	bpl.n	80077f4 <_printf_i+0xb8>
 80077fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007800:	2d00      	cmp	r5, #0
 8007802:	da03      	bge.n	800780c <_printf_i+0xd0>
 8007804:	232d      	movs	r3, #45	@ 0x2d
 8007806:	426d      	negs	r5, r5
 8007808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800780c:	4859      	ldr	r0, [pc, #356]	@ (8007974 <_printf_i+0x238>)
 800780e:	230a      	movs	r3, #10
 8007810:	e011      	b.n	8007836 <_printf_i+0xfa>
 8007812:	6821      	ldr	r1, [r4, #0]
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	0608      	lsls	r0, r1, #24
 8007818:	f853 5b04 	ldr.w	r5, [r3], #4
 800781c:	d402      	bmi.n	8007824 <_printf_i+0xe8>
 800781e:	0649      	lsls	r1, r1, #25
 8007820:	bf48      	it	mi
 8007822:	b2ad      	uxthmi	r5, r5
 8007824:	2f6f      	cmp	r7, #111	@ 0x6f
 8007826:	4853      	ldr	r0, [pc, #332]	@ (8007974 <_printf_i+0x238>)
 8007828:	6033      	str	r3, [r6, #0]
 800782a:	bf14      	ite	ne
 800782c:	230a      	movne	r3, #10
 800782e:	2308      	moveq	r3, #8
 8007830:	2100      	movs	r1, #0
 8007832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007836:	6866      	ldr	r6, [r4, #4]
 8007838:	60a6      	str	r6, [r4, #8]
 800783a:	2e00      	cmp	r6, #0
 800783c:	bfa2      	ittt	ge
 800783e:	6821      	ldrge	r1, [r4, #0]
 8007840:	f021 0104 	bicge.w	r1, r1, #4
 8007844:	6021      	strge	r1, [r4, #0]
 8007846:	b90d      	cbnz	r5, 800784c <_printf_i+0x110>
 8007848:	2e00      	cmp	r6, #0
 800784a:	d04b      	beq.n	80078e4 <_printf_i+0x1a8>
 800784c:	4616      	mov	r6, r2
 800784e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007852:	fb03 5711 	mls	r7, r3, r1, r5
 8007856:	5dc7      	ldrb	r7, [r0, r7]
 8007858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800785c:	462f      	mov	r7, r5
 800785e:	42bb      	cmp	r3, r7
 8007860:	460d      	mov	r5, r1
 8007862:	d9f4      	bls.n	800784e <_printf_i+0x112>
 8007864:	2b08      	cmp	r3, #8
 8007866:	d10b      	bne.n	8007880 <_printf_i+0x144>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	07df      	lsls	r7, r3, #31
 800786c:	d508      	bpl.n	8007880 <_printf_i+0x144>
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	6861      	ldr	r1, [r4, #4]
 8007872:	4299      	cmp	r1, r3
 8007874:	bfde      	ittt	le
 8007876:	2330      	movle	r3, #48	@ 0x30
 8007878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800787c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007880:	1b92      	subs	r2, r2, r6
 8007882:	6122      	str	r2, [r4, #16]
 8007884:	f8cd a000 	str.w	sl, [sp]
 8007888:	464b      	mov	r3, r9
 800788a:	aa03      	add	r2, sp, #12
 800788c:	4621      	mov	r1, r4
 800788e:	4640      	mov	r0, r8
 8007890:	f7ff fee6 	bl	8007660 <_printf_common>
 8007894:	3001      	adds	r0, #1
 8007896:	d14a      	bne.n	800792e <_printf_i+0x1f2>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800789c:	b004      	add	sp, #16
 800789e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f043 0320 	orr.w	r3, r3, #32
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	4833      	ldr	r0, [pc, #204]	@ (8007978 <_printf_i+0x23c>)
 80078ac:	2778      	movs	r7, #120	@ 0x78
 80078ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	6831      	ldr	r1, [r6, #0]
 80078b6:	061f      	lsls	r7, r3, #24
 80078b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80078bc:	d402      	bmi.n	80078c4 <_printf_i+0x188>
 80078be:	065f      	lsls	r7, r3, #25
 80078c0:	bf48      	it	mi
 80078c2:	b2ad      	uxthmi	r5, r5
 80078c4:	6031      	str	r1, [r6, #0]
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	bf44      	itt	mi
 80078ca:	f043 0320 	orrmi.w	r3, r3, #32
 80078ce:	6023      	strmi	r3, [r4, #0]
 80078d0:	b11d      	cbz	r5, 80078da <_printf_i+0x19e>
 80078d2:	2310      	movs	r3, #16
 80078d4:	e7ac      	b.n	8007830 <_printf_i+0xf4>
 80078d6:	4827      	ldr	r0, [pc, #156]	@ (8007974 <_printf_i+0x238>)
 80078d8:	e7e9      	b.n	80078ae <_printf_i+0x172>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f023 0320 	bic.w	r3, r3, #32
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	e7f6      	b.n	80078d2 <_printf_i+0x196>
 80078e4:	4616      	mov	r6, r2
 80078e6:	e7bd      	b.n	8007864 <_printf_i+0x128>
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	6825      	ldr	r5, [r4, #0]
 80078ec:	6961      	ldr	r1, [r4, #20]
 80078ee:	1d18      	adds	r0, r3, #4
 80078f0:	6030      	str	r0, [r6, #0]
 80078f2:	062e      	lsls	r6, r5, #24
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0x1c0>
 80078f8:	6019      	str	r1, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0x1c6>
 80078fc:	0668      	lsls	r0, r5, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0x1bc>
 8007900:	8019      	strh	r1, [r3, #0]
 8007902:	2300      	movs	r3, #0
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	4616      	mov	r6, r2
 8007908:	e7bc      	b.n	8007884 <_printf_i+0x148>
 800790a:	6833      	ldr	r3, [r6, #0]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	6032      	str	r2, [r6, #0]
 8007910:	681e      	ldr	r6, [r3, #0]
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	2100      	movs	r1, #0
 8007916:	4630      	mov	r0, r6
 8007918:	f7f8 fc62 	bl	80001e0 <memchr>
 800791c:	b108      	cbz	r0, 8007922 <_printf_i+0x1e6>
 800791e:	1b80      	subs	r0, r0, r6
 8007920:	6060      	str	r0, [r4, #4]
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	2300      	movs	r3, #0
 8007928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800792c:	e7aa      	b.n	8007884 <_printf_i+0x148>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	4632      	mov	r2, r6
 8007932:	4649      	mov	r1, r9
 8007934:	4640      	mov	r0, r8
 8007936:	47d0      	blx	sl
 8007938:	3001      	adds	r0, #1
 800793a:	d0ad      	beq.n	8007898 <_printf_i+0x15c>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	079b      	lsls	r3, r3, #30
 8007940:	d413      	bmi.n	800796a <_printf_i+0x22e>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	4298      	cmp	r0, r3
 8007948:	bfb8      	it	lt
 800794a:	4618      	movlt	r0, r3
 800794c:	e7a6      	b.n	800789c <_printf_i+0x160>
 800794e:	2301      	movs	r3, #1
 8007950:	4632      	mov	r2, r6
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	47d0      	blx	sl
 8007958:	3001      	adds	r0, #1
 800795a:	d09d      	beq.n	8007898 <_printf_i+0x15c>
 800795c:	3501      	adds	r5, #1
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	9903      	ldr	r1, [sp, #12]
 8007962:	1a5b      	subs	r3, r3, r1
 8007964:	42ab      	cmp	r3, r5
 8007966:	dcf2      	bgt.n	800794e <_printf_i+0x212>
 8007968:	e7eb      	b.n	8007942 <_printf_i+0x206>
 800796a:	2500      	movs	r5, #0
 800796c:	f104 0619 	add.w	r6, r4, #25
 8007970:	e7f5      	b.n	800795e <_printf_i+0x222>
 8007972:	bf00      	nop
 8007974:	0800856b 	.word	0x0800856b
 8007978:	0800857c 	.word	0x0800857c

0800797c <__sflush_r>:
 800797c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007984:	0716      	lsls	r6, r2, #28
 8007986:	4605      	mov	r5, r0
 8007988:	460c      	mov	r4, r1
 800798a:	d454      	bmi.n	8007a36 <__sflush_r+0xba>
 800798c:	684b      	ldr	r3, [r1, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dc02      	bgt.n	8007998 <__sflush_r+0x1c>
 8007992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	dd48      	ble.n	8007a2a <__sflush_r+0xae>
 8007998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800799a:	2e00      	cmp	r6, #0
 800799c:	d045      	beq.n	8007a2a <__sflush_r+0xae>
 800799e:	2300      	movs	r3, #0
 80079a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079a4:	682f      	ldr	r7, [r5, #0]
 80079a6:	6a21      	ldr	r1, [r4, #32]
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	d030      	beq.n	8007a0e <__sflush_r+0x92>
 80079ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	0759      	lsls	r1, r3, #29
 80079b2:	d505      	bpl.n	80079c0 <__sflush_r+0x44>
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079ba:	b10b      	cbz	r3, 80079c0 <__sflush_r+0x44>
 80079bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	2300      	movs	r3, #0
 80079c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079c4:	6a21      	ldr	r1, [r4, #32]
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b0      	blx	r6
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	d106      	bne.n	80079de <__sflush_r+0x62>
 80079d0:	6829      	ldr	r1, [r5, #0]
 80079d2:	291d      	cmp	r1, #29
 80079d4:	d82b      	bhi.n	8007a2e <__sflush_r+0xb2>
 80079d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a80 <__sflush_r+0x104>)
 80079d8:	410a      	asrs	r2, r1
 80079da:	07d6      	lsls	r6, r2, #31
 80079dc:	d427      	bmi.n	8007a2e <__sflush_r+0xb2>
 80079de:	2200      	movs	r2, #0
 80079e0:	6062      	str	r2, [r4, #4]
 80079e2:	04d9      	lsls	r1, r3, #19
 80079e4:	6922      	ldr	r2, [r4, #16]
 80079e6:	6022      	str	r2, [r4, #0]
 80079e8:	d504      	bpl.n	80079f4 <__sflush_r+0x78>
 80079ea:	1c42      	adds	r2, r0, #1
 80079ec:	d101      	bne.n	80079f2 <__sflush_r+0x76>
 80079ee:	682b      	ldr	r3, [r5, #0]
 80079f0:	b903      	cbnz	r3, 80079f4 <__sflush_r+0x78>
 80079f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80079f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079f6:	602f      	str	r7, [r5, #0]
 80079f8:	b1b9      	cbz	r1, 8007a2a <__sflush_r+0xae>
 80079fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079fe:	4299      	cmp	r1, r3
 8007a00:	d002      	beq.n	8007a08 <__sflush_r+0x8c>
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f97c 	bl	8007d00 <_free_r>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a0c:	e00d      	b.n	8007a2a <__sflush_r+0xae>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b0      	blx	r6
 8007a14:	4602      	mov	r2, r0
 8007a16:	1c50      	adds	r0, r2, #1
 8007a18:	d1c9      	bne.n	80079ae <__sflush_r+0x32>
 8007a1a:	682b      	ldr	r3, [r5, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0c6      	beq.n	80079ae <__sflush_r+0x32>
 8007a20:	2b1d      	cmp	r3, #29
 8007a22:	d001      	beq.n	8007a28 <__sflush_r+0xac>
 8007a24:	2b16      	cmp	r3, #22
 8007a26:	d11e      	bne.n	8007a66 <__sflush_r+0xea>
 8007a28:	602f      	str	r7, [r5, #0]
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e022      	b.n	8007a74 <__sflush_r+0xf8>
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a32:	b21b      	sxth	r3, r3
 8007a34:	e01b      	b.n	8007a6e <__sflush_r+0xf2>
 8007a36:	690f      	ldr	r7, [r1, #16]
 8007a38:	2f00      	cmp	r7, #0
 8007a3a:	d0f6      	beq.n	8007a2a <__sflush_r+0xae>
 8007a3c:	0793      	lsls	r3, r2, #30
 8007a3e:	680e      	ldr	r6, [r1, #0]
 8007a40:	bf08      	it	eq
 8007a42:	694b      	ldreq	r3, [r1, #20]
 8007a44:	600f      	str	r7, [r1, #0]
 8007a46:	bf18      	it	ne
 8007a48:	2300      	movne	r3, #0
 8007a4a:	eba6 0807 	sub.w	r8, r6, r7
 8007a4e:	608b      	str	r3, [r1, #8]
 8007a50:	f1b8 0f00 	cmp.w	r8, #0
 8007a54:	dde9      	ble.n	8007a2a <__sflush_r+0xae>
 8007a56:	6a21      	ldr	r1, [r4, #32]
 8007a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a5a:	4643      	mov	r3, r8
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b0      	blx	r6
 8007a62:	2800      	cmp	r0, #0
 8007a64:	dc08      	bgt.n	8007a78 <__sflush_r+0xfc>
 8007a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	4407      	add	r7, r0
 8007a7a:	eba8 0800 	sub.w	r8, r8, r0
 8007a7e:	e7e7      	b.n	8007a50 <__sflush_r+0xd4>
 8007a80:	dfbffffe 	.word	0xdfbffffe

08007a84 <_fflush_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	690b      	ldr	r3, [r1, #16]
 8007a88:	4605      	mov	r5, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b913      	cbnz	r3, 8007a94 <_fflush_r+0x10>
 8007a8e:	2500      	movs	r5, #0
 8007a90:	4628      	mov	r0, r5
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	b118      	cbz	r0, 8007a9e <_fflush_r+0x1a>
 8007a96:	6a03      	ldr	r3, [r0, #32]
 8007a98:	b90b      	cbnz	r3, 8007a9e <_fflush_r+0x1a>
 8007a9a:	f7ff fa6d 	bl	8006f78 <__sinit>
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0f3      	beq.n	8007a8e <_fflush_r+0xa>
 8007aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007aa8:	07d0      	lsls	r0, r2, #31
 8007aaa:	d404      	bmi.n	8007ab6 <_fflush_r+0x32>
 8007aac:	0599      	lsls	r1, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_fflush_r+0x32>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab2:	f7ff fbaa 	bl	800720a <__retarget_lock_acquire_recursive>
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	4621      	mov	r1, r4
 8007aba:	f7ff ff5f 	bl	800797c <__sflush_r>
 8007abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ac0:	07da      	lsls	r2, r3, #31
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	d4e4      	bmi.n	8007a90 <_fflush_r+0xc>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	059b      	lsls	r3, r3, #22
 8007aca:	d4e1      	bmi.n	8007a90 <_fflush_r+0xc>
 8007acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ace:	f7ff fb9d 	bl	800720c <__retarget_lock_release_recursive>
 8007ad2:	e7dd      	b.n	8007a90 <_fflush_r+0xc>

08007ad4 <__malloc_lock>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	@ (8007adc <__malloc_lock+0x8>)
 8007ad6:	f7ff bb98 	b.w	800720a <__retarget_lock_acquire_recursive>
 8007ada:	bf00      	nop
 8007adc:	20000550 	.word	0x20000550

08007ae0 <__malloc_unlock>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	@ (8007ae8 <__malloc_unlock+0x8>)
 8007ae2:	f7ff bb93 	b.w	800720c <__retarget_lock_release_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	20000550 	.word	0x20000550

08007aec <__sread>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	f000 f8ba 	bl	8007c6c <_read_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	bfab      	itete	ge
 8007afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007afe:	89a3      	ldrhlt	r3, [r4, #12]
 8007b00:	181b      	addge	r3, r3, r0
 8007b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b06:	bfac      	ite	ge
 8007b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b0a:	81a3      	strhlt	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__swrite>:
 8007b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	461f      	mov	r7, r3
 8007b14:	898b      	ldrh	r3, [r1, #12]
 8007b16:	05db      	lsls	r3, r3, #23
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	d505      	bpl.n	8007b2c <__swrite+0x1e>
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	2302      	movs	r3, #2
 8007b26:	2200      	movs	r2, #0
 8007b28:	f000 f88e 	bl	8007c48 <_lseek_r>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	f000 b8b5 	b.w	8007cb0 <_write_r>

08007b46 <__sseek>:
 8007b46:	b510      	push	{r4, lr}
 8007b48:	460c      	mov	r4, r1
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 f87b 	bl	8007c48 <_lseek_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	bf15      	itete	ne
 8007b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b62:	81a3      	strheq	r3, [r4, #12]
 8007b64:	bf18      	it	ne
 8007b66:	81a3      	strhne	r3, [r4, #12]
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <__sclose>:
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 b85b 	b.w	8007c28 <_close_r>
	...

08007b74 <fiprintf>:
 8007b74:	b40e      	push	{r1, r2, r3}
 8007b76:	b503      	push	{r0, r1, lr}
 8007b78:	4601      	mov	r1, r0
 8007b7a:	ab03      	add	r3, sp, #12
 8007b7c:	4805      	ldr	r0, [pc, #20]	@ (8007b94 <fiprintf+0x20>)
 8007b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b82:	6800      	ldr	r0, [r0, #0]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	f000 f92f 	bl	8007de8 <_vfiprintf_r>
 8007b8a:	b002      	add	sp, #8
 8007b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b90:	b003      	add	sp, #12
 8007b92:	4770      	bx	lr
 8007b94:	20000018 	.word	0x20000018

08007b98 <_realloc_r>:
 8007b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	4615      	mov	r5, r2
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	b921      	cbnz	r1, 8007bae <_realloc_r+0x16>
 8007ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	4611      	mov	r1, r2
 8007baa:	f7ff bcd9 	b.w	8007560 <_malloc_r>
 8007bae:	b92a      	cbnz	r2, 8007bbc <_realloc_r+0x24>
 8007bb0:	f000 f8a6 	bl	8007d00 <_free_r>
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	f000 fa2c 	bl	8008018 <_malloc_usable_size_r>
 8007bc0:	4285      	cmp	r5, r0
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	d802      	bhi.n	8007bcc <_realloc_r+0x34>
 8007bc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bca:	d8f4      	bhi.n	8007bb6 <_realloc_r+0x1e>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff fcc6 	bl	8007560 <_malloc_r>
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d0ec      	beq.n	8007bb4 <_realloc_r+0x1c>
 8007bda:	42b5      	cmp	r5, r6
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4621      	mov	r1, r4
 8007be0:	bf28      	it	cs
 8007be2:	4632      	movcs	r2, r6
 8007be4:	f000 f876 	bl	8007cd4 <memcpy>
 8007be8:	4621      	mov	r1, r4
 8007bea:	4640      	mov	r0, r8
 8007bec:	f000 f888 	bl	8007d00 <_free_r>
 8007bf0:	463c      	mov	r4, r7
 8007bf2:	e7e0      	b.n	8007bb6 <_realloc_r+0x1e>

08007bf4 <memmove>:
 8007bf4:	4288      	cmp	r0, r1
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	eb01 0402 	add.w	r4, r1, r2
 8007bfc:	d902      	bls.n	8007c04 <memmove+0x10>
 8007bfe:	4284      	cmp	r4, r0
 8007c00:	4623      	mov	r3, r4
 8007c02:	d807      	bhi.n	8007c14 <memmove+0x20>
 8007c04:	1e43      	subs	r3, r0, #1
 8007c06:	42a1      	cmp	r1, r4
 8007c08:	d008      	beq.n	8007c1c <memmove+0x28>
 8007c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c12:	e7f8      	b.n	8007c06 <memmove+0x12>
 8007c14:	4402      	add	r2, r0
 8007c16:	4601      	mov	r1, r0
 8007c18:	428a      	cmp	r2, r1
 8007c1a:	d100      	bne.n	8007c1e <memmove+0x2a>
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c26:	e7f7      	b.n	8007c18 <memmove+0x24>

08007c28 <_close_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d06      	ldr	r5, [pc, #24]	@ (8007c44 <_close_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7f9 fe40 	bl	80018b8 <_close>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_close_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_close_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	2000055c 	.word	0x2000055c

08007c48 <_lseek_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d07      	ldr	r5, [pc, #28]	@ (8007c68 <_lseek_r+0x20>)
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4611      	mov	r1, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f7f9 fe55 	bl	8001906 <_lseek>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_lseek_r+0x1e>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_lseek_r+0x1e>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	2000055c 	.word	0x2000055c

08007c6c <_read_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d07      	ldr	r5, [pc, #28]	@ (8007c8c <_read_r+0x20>)
 8007c70:	4604      	mov	r4, r0
 8007c72:	4608      	mov	r0, r1
 8007c74:	4611      	mov	r1, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	602a      	str	r2, [r5, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f7f9 fde3 	bl	8001846 <_read>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_read_r+0x1e>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_read_r+0x1e>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	2000055c 	.word	0x2000055c

08007c90 <_sbrk_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4d06      	ldr	r5, [pc, #24]	@ (8007cac <_sbrk_r+0x1c>)
 8007c94:	2300      	movs	r3, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	f7f9 fe40 	bl	8001920 <_sbrk>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_sbrk_r+0x1a>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_sbrk_r+0x1a>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	2000055c 	.word	0x2000055c

08007cb0 <_write_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	@ (8007cd0 <_write_r+0x20>)
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	602a      	str	r2, [r5, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f7f9 fdde 	bl	8001880 <_write>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_write_r+0x1e>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_write_r+0x1e>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	2000055c 	.word	0x2000055c

08007cd4 <memcpy>:
 8007cd4:	440a      	add	r2, r1
 8007cd6:	4291      	cmp	r1, r2
 8007cd8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007cdc:	d100      	bne.n	8007ce0 <memcpy+0xc>
 8007cde:	4770      	bx	lr
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cea:	4291      	cmp	r1, r2
 8007cec:	d1f9      	bne.n	8007ce2 <memcpy+0xe>
 8007cee:	bd10      	pop	{r4, pc}

08007cf0 <abort>:
 8007cf0:	b508      	push	{r3, lr}
 8007cf2:	2006      	movs	r0, #6
 8007cf4:	f000 fad8 	bl	80082a8 <raise>
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	f7f9 fd99 	bl	8001830 <_exit>
	...

08007d00 <_free_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4605      	mov	r5, r0
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d041      	beq.n	8007d8c <_free_r+0x8c>
 8007d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d0c:	1f0c      	subs	r4, r1, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfb8      	it	lt
 8007d12:	18e4      	addlt	r4, r4, r3
 8007d14:	f7ff fede 	bl	8007ad4 <__malloc_lock>
 8007d18:	4a1d      	ldr	r2, [pc, #116]	@ (8007d90 <_free_r+0x90>)
 8007d1a:	6813      	ldr	r3, [r2, #0]
 8007d1c:	b933      	cbnz	r3, 8007d2c <_free_r+0x2c>
 8007d1e:	6063      	str	r3, [r4, #4]
 8007d20:	6014      	str	r4, [r2, #0]
 8007d22:	4628      	mov	r0, r5
 8007d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d28:	f7ff beda 	b.w	8007ae0 <__malloc_unlock>
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	d908      	bls.n	8007d42 <_free_r+0x42>
 8007d30:	6820      	ldr	r0, [r4, #0]
 8007d32:	1821      	adds	r1, r4, r0
 8007d34:	428b      	cmp	r3, r1
 8007d36:	bf01      	itttt	eq
 8007d38:	6819      	ldreq	r1, [r3, #0]
 8007d3a:	685b      	ldreq	r3, [r3, #4]
 8007d3c:	1809      	addeq	r1, r1, r0
 8007d3e:	6021      	streq	r1, [r4, #0]
 8007d40:	e7ed      	b.n	8007d1e <_free_r+0x1e>
 8007d42:	461a      	mov	r2, r3
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b10b      	cbz	r3, 8007d4c <_free_r+0x4c>
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d9fa      	bls.n	8007d42 <_free_r+0x42>
 8007d4c:	6811      	ldr	r1, [r2, #0]
 8007d4e:	1850      	adds	r0, r2, r1
 8007d50:	42a0      	cmp	r0, r4
 8007d52:	d10b      	bne.n	8007d6c <_free_r+0x6c>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	4401      	add	r1, r0
 8007d58:	1850      	adds	r0, r2, r1
 8007d5a:	4283      	cmp	r3, r0
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	d1e0      	bne.n	8007d22 <_free_r+0x22>
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	6053      	str	r3, [r2, #4]
 8007d66:	4408      	add	r0, r1
 8007d68:	6010      	str	r0, [r2, #0]
 8007d6a:	e7da      	b.n	8007d22 <_free_r+0x22>
 8007d6c:	d902      	bls.n	8007d74 <_free_r+0x74>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	e7d6      	b.n	8007d22 <_free_r+0x22>
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	1821      	adds	r1, r4, r0
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	bf04      	itt	eq
 8007d7c:	6819      	ldreq	r1, [r3, #0]
 8007d7e:	685b      	ldreq	r3, [r3, #4]
 8007d80:	6063      	str	r3, [r4, #4]
 8007d82:	bf04      	itt	eq
 8007d84:	1809      	addeq	r1, r1, r0
 8007d86:	6021      	streq	r1, [r4, #0]
 8007d88:	6054      	str	r4, [r2, #4]
 8007d8a:	e7ca      	b.n	8007d22 <_free_r+0x22>
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000558 	.word	0x20000558

08007d94 <__sfputc_r>:
 8007d94:	6893      	ldr	r3, [r2, #8]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	b410      	push	{r4}
 8007d9c:	6093      	str	r3, [r2, #8]
 8007d9e:	da08      	bge.n	8007db2 <__sfputc_r+0x1e>
 8007da0:	6994      	ldr	r4, [r2, #24]
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	db01      	blt.n	8007daa <__sfputc_r+0x16>
 8007da6:	290a      	cmp	r1, #10
 8007da8:	d103      	bne.n	8007db2 <__sfputc_r+0x1e>
 8007daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dae:	f000 b93b 	b.w	8008028 <__swbuf_r>
 8007db2:	6813      	ldr	r3, [r2, #0]
 8007db4:	1c58      	adds	r0, r3, #1
 8007db6:	6010      	str	r0, [r2, #0]
 8007db8:	7019      	strb	r1, [r3, #0]
 8007dba:	4608      	mov	r0, r1
 8007dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <__sfputs_r>:
 8007dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	18d5      	adds	r5, r2, r3
 8007dcc:	42ac      	cmp	r4, r5
 8007dce:	d101      	bne.n	8007dd4 <__sfputs_r+0x12>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e007      	b.n	8007de4 <__sfputs_r+0x22>
 8007dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ffda 	bl	8007d94 <__sfputc_r>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d1f3      	bne.n	8007dcc <__sfputs_r+0xa>
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007de8 <_vfiprintf_r>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	460d      	mov	r5, r1
 8007dee:	b09d      	sub	sp, #116	@ 0x74
 8007df0:	4614      	mov	r4, r2
 8007df2:	4698      	mov	r8, r3
 8007df4:	4606      	mov	r6, r0
 8007df6:	b118      	cbz	r0, 8007e00 <_vfiprintf_r+0x18>
 8007df8:	6a03      	ldr	r3, [r0, #32]
 8007dfa:	b90b      	cbnz	r3, 8007e00 <_vfiprintf_r+0x18>
 8007dfc:	f7ff f8bc 	bl	8006f78 <__sinit>
 8007e00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e02:	07d9      	lsls	r1, r3, #31
 8007e04:	d405      	bmi.n	8007e12 <_vfiprintf_r+0x2a>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	059a      	lsls	r2, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_vfiprintf_r+0x2a>
 8007e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e0e:	f7ff f9fc 	bl	800720a <__retarget_lock_acquire_recursive>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	071b      	lsls	r3, r3, #28
 8007e16:	d501      	bpl.n	8007e1c <_vfiprintf_r+0x34>
 8007e18:	692b      	ldr	r3, [r5, #16]
 8007e1a:	b99b      	cbnz	r3, 8007e44 <_vfiprintf_r+0x5c>
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f000 f940 	bl	80080a4 <__swsetup_r>
 8007e24:	b170      	cbz	r0, 8007e44 <_vfiprintf_r+0x5c>
 8007e26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e28:	07dc      	lsls	r4, r3, #31
 8007e2a:	d504      	bpl.n	8007e36 <_vfiprintf_r+0x4e>
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e30:	b01d      	add	sp, #116	@ 0x74
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	89ab      	ldrh	r3, [r5, #12]
 8007e38:	0598      	lsls	r0, r3, #22
 8007e3a:	d4f7      	bmi.n	8007e2c <_vfiprintf_r+0x44>
 8007e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e3e:	f7ff f9e5 	bl	800720c <__retarget_lock_release_recursive>
 8007e42:	e7f3      	b.n	8007e2c <_vfiprintf_r+0x44>
 8007e44:	2300      	movs	r3, #0
 8007e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e48:	2320      	movs	r3, #32
 8007e4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e52:	2330      	movs	r3, #48	@ 0x30
 8007e54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008004 <_vfiprintf_r+0x21c>
 8007e58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e5c:	f04f 0901 	mov.w	r9, #1
 8007e60:	4623      	mov	r3, r4
 8007e62:	469a      	mov	sl, r3
 8007e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e68:	b10a      	cbz	r2, 8007e6e <_vfiprintf_r+0x86>
 8007e6a:	2a25      	cmp	r2, #37	@ 0x25
 8007e6c:	d1f9      	bne.n	8007e62 <_vfiprintf_r+0x7a>
 8007e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e72:	d00b      	beq.n	8007e8c <_vfiprintf_r+0xa4>
 8007e74:	465b      	mov	r3, fp
 8007e76:	4622      	mov	r2, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ffa1 	bl	8007dc2 <__sfputs_r>
 8007e80:	3001      	adds	r0, #1
 8007e82:	f000 80a7 	beq.w	8007fd4 <_vfiprintf_r+0x1ec>
 8007e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e88:	445a      	add	r2, fp
 8007e8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 809f 	beq.w	8007fd4 <_vfiprintf_r+0x1ec>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea0:	f10a 0a01 	add.w	sl, sl, #1
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	9307      	str	r3, [sp, #28]
 8007ea8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eac:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eae:	4654      	mov	r4, sl
 8007eb0:	2205      	movs	r2, #5
 8007eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb6:	4853      	ldr	r0, [pc, #332]	@ (8008004 <_vfiprintf_r+0x21c>)
 8007eb8:	f7f8 f992 	bl	80001e0 <memchr>
 8007ebc:	9a04      	ldr	r2, [sp, #16]
 8007ebe:	b9d8      	cbnz	r0, 8007ef8 <_vfiprintf_r+0x110>
 8007ec0:	06d1      	lsls	r1, r2, #27
 8007ec2:	bf44      	itt	mi
 8007ec4:	2320      	movmi	r3, #32
 8007ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eca:	0713      	lsls	r3, r2, #28
 8007ecc:	bf44      	itt	mi
 8007ece:	232b      	movmi	r3, #43	@ 0x2b
 8007ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eda:	d015      	beq.n	8007f08 <_vfiprintf_r+0x120>
 8007edc:	9a07      	ldr	r2, [sp, #28]
 8007ede:	4654      	mov	r4, sl
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	f04f 0c0a 	mov.w	ip, #10
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eec:	3b30      	subs	r3, #48	@ 0x30
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d94b      	bls.n	8007f8a <_vfiprintf_r+0x1a2>
 8007ef2:	b1b0      	cbz	r0, 8007f22 <_vfiprintf_r+0x13a>
 8007ef4:	9207      	str	r2, [sp, #28]
 8007ef6:	e014      	b.n	8007f22 <_vfiprintf_r+0x13a>
 8007ef8:	eba0 0308 	sub.w	r3, r0, r8
 8007efc:	fa09 f303 	lsl.w	r3, r9, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	46a2      	mov	sl, r4
 8007f06:	e7d2      	b.n	8007eae <_vfiprintf_r+0xc6>
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	1d19      	adds	r1, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	9103      	str	r1, [sp, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bfbb      	ittet	lt
 8007f14:	425b      	neglt	r3, r3
 8007f16:	f042 0202 	orrlt.w	r2, r2, #2
 8007f1a:	9307      	strge	r3, [sp, #28]
 8007f1c:	9307      	strlt	r3, [sp, #28]
 8007f1e:	bfb8      	it	lt
 8007f20:	9204      	strlt	r2, [sp, #16]
 8007f22:	7823      	ldrb	r3, [r4, #0]
 8007f24:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f26:	d10a      	bne.n	8007f3e <_vfiprintf_r+0x156>
 8007f28:	7863      	ldrb	r3, [r4, #1]
 8007f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f2c:	d132      	bne.n	8007f94 <_vfiprintf_r+0x1ac>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	1d1a      	adds	r2, r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	9203      	str	r2, [sp, #12]
 8007f36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f3a:	3402      	adds	r4, #2
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008014 <_vfiprintf_r+0x22c>
 8007f42:	7821      	ldrb	r1, [r4, #0]
 8007f44:	2203      	movs	r2, #3
 8007f46:	4650      	mov	r0, sl
 8007f48:	f7f8 f94a 	bl	80001e0 <memchr>
 8007f4c:	b138      	cbz	r0, 8007f5e <_vfiprintf_r+0x176>
 8007f4e:	9b04      	ldr	r3, [sp, #16]
 8007f50:	eba0 000a 	sub.w	r0, r0, sl
 8007f54:	2240      	movs	r2, #64	@ 0x40
 8007f56:	4082      	lsls	r2, r0
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	3401      	adds	r4, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f62:	4829      	ldr	r0, [pc, #164]	@ (8008008 <_vfiprintf_r+0x220>)
 8007f64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f68:	2206      	movs	r2, #6
 8007f6a:	f7f8 f939 	bl	80001e0 <memchr>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d03f      	beq.n	8007ff2 <_vfiprintf_r+0x20a>
 8007f72:	4b26      	ldr	r3, [pc, #152]	@ (800800c <_vfiprintf_r+0x224>)
 8007f74:	bb1b      	cbnz	r3, 8007fbe <_vfiprintf_r+0x1d6>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	3307      	adds	r3, #7
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	3308      	adds	r3, #8
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f84:	443b      	add	r3, r7
 8007f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f88:	e76a      	b.n	8007e60 <_vfiprintf_r+0x78>
 8007f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8e:	460c      	mov	r4, r1
 8007f90:	2001      	movs	r0, #1
 8007f92:	e7a8      	b.n	8007ee6 <_vfiprintf_r+0xfe>
 8007f94:	2300      	movs	r3, #0
 8007f96:	3401      	adds	r4, #1
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f04f 0c0a 	mov.w	ip, #10
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa6:	3a30      	subs	r2, #48	@ 0x30
 8007fa8:	2a09      	cmp	r2, #9
 8007faa:	d903      	bls.n	8007fb4 <_vfiprintf_r+0x1cc>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0c6      	beq.n	8007f3e <_vfiprintf_r+0x156>
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	e7c4      	b.n	8007f3e <_vfiprintf_r+0x156>
 8007fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb8:	4604      	mov	r4, r0
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e7f0      	b.n	8007fa0 <_vfiprintf_r+0x1b8>
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4b12      	ldr	r3, [pc, #72]	@ (8008010 <_vfiprintf_r+0x228>)
 8007fc6:	a904      	add	r1, sp, #16
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f3af 8000 	nop.w
 8007fce:	4607      	mov	r7, r0
 8007fd0:	1c78      	adds	r0, r7, #1
 8007fd2:	d1d6      	bne.n	8007f82 <_vfiprintf_r+0x19a>
 8007fd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd6:	07d9      	lsls	r1, r3, #31
 8007fd8:	d405      	bmi.n	8007fe6 <_vfiprintf_r+0x1fe>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	059a      	lsls	r2, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <_vfiprintf_r+0x1fe>
 8007fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fe2:	f7ff f913 	bl	800720c <__retarget_lock_release_recursive>
 8007fe6:	89ab      	ldrh	r3, [r5, #12]
 8007fe8:	065b      	lsls	r3, r3, #25
 8007fea:	f53f af1f 	bmi.w	8007e2c <_vfiprintf_r+0x44>
 8007fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ff0:	e71e      	b.n	8007e30 <_vfiprintf_r+0x48>
 8007ff2:	ab03      	add	r3, sp, #12
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	4b05      	ldr	r3, [pc, #20]	@ (8008010 <_vfiprintf_r+0x228>)
 8007ffa:	a904      	add	r1, sp, #16
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff fb9d 	bl	800773c <_printf_i>
 8008002:	e7e4      	b.n	8007fce <_vfiprintf_r+0x1e6>
 8008004:	0800855a 	.word	0x0800855a
 8008008:	08008564 	.word	0x08008564
 800800c:	00000000 	.word	0x00000000
 8008010:	08007dc3 	.word	0x08007dc3
 8008014:	08008560 	.word	0x08008560

08008018 <_malloc_usable_size_r>:
 8008018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800801c:	1f18      	subs	r0, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	bfbc      	itt	lt
 8008022:	580b      	ldrlt	r3, [r1, r0]
 8008024:	18c0      	addlt	r0, r0, r3
 8008026:	4770      	bx	lr

08008028 <__swbuf_r>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	460e      	mov	r6, r1
 800802c:	4614      	mov	r4, r2
 800802e:	4605      	mov	r5, r0
 8008030:	b118      	cbz	r0, 800803a <__swbuf_r+0x12>
 8008032:	6a03      	ldr	r3, [r0, #32]
 8008034:	b90b      	cbnz	r3, 800803a <__swbuf_r+0x12>
 8008036:	f7fe ff9f 	bl	8006f78 <__sinit>
 800803a:	69a3      	ldr	r3, [r4, #24]
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	071a      	lsls	r2, r3, #28
 8008042:	d501      	bpl.n	8008048 <__swbuf_r+0x20>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	b943      	cbnz	r3, 800805a <__swbuf_r+0x32>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f82a 	bl	80080a4 <__swsetup_r>
 8008050:	b118      	cbz	r0, 800805a <__swbuf_r+0x32>
 8008052:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008056:	4638      	mov	r0, r7
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	1a98      	subs	r0, r3, r2
 8008060:	6963      	ldr	r3, [r4, #20]
 8008062:	b2f6      	uxtb	r6, r6
 8008064:	4283      	cmp	r3, r0
 8008066:	4637      	mov	r7, r6
 8008068:	dc05      	bgt.n	8008076 <__swbuf_r+0x4e>
 800806a:	4621      	mov	r1, r4
 800806c:	4628      	mov	r0, r5
 800806e:	f7ff fd09 	bl	8007a84 <_fflush_r>
 8008072:	2800      	cmp	r0, #0
 8008074:	d1ed      	bne.n	8008052 <__swbuf_r+0x2a>
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	3b01      	subs	r3, #1
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	6022      	str	r2, [r4, #0]
 8008082:	701e      	strb	r6, [r3, #0]
 8008084:	6962      	ldr	r2, [r4, #20]
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	429a      	cmp	r2, r3
 800808a:	d004      	beq.n	8008096 <__swbuf_r+0x6e>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	07db      	lsls	r3, r3, #31
 8008090:	d5e1      	bpl.n	8008056 <__swbuf_r+0x2e>
 8008092:	2e0a      	cmp	r6, #10
 8008094:	d1df      	bne.n	8008056 <__swbuf_r+0x2e>
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f7ff fcf3 	bl	8007a84 <_fflush_r>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d0d9      	beq.n	8008056 <__swbuf_r+0x2e>
 80080a2:	e7d6      	b.n	8008052 <__swbuf_r+0x2a>

080080a4 <__swsetup_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4b29      	ldr	r3, [pc, #164]	@ (800814c <__swsetup_r+0xa8>)
 80080a8:	4605      	mov	r5, r0
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	460c      	mov	r4, r1
 80080ae:	b118      	cbz	r0, 80080b8 <__swsetup_r+0x14>
 80080b0:	6a03      	ldr	r3, [r0, #32]
 80080b2:	b90b      	cbnz	r3, 80080b8 <__swsetup_r+0x14>
 80080b4:	f7fe ff60 	bl	8006f78 <__sinit>
 80080b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080bc:	0719      	lsls	r1, r3, #28
 80080be:	d422      	bmi.n	8008106 <__swsetup_r+0x62>
 80080c0:	06da      	lsls	r2, r3, #27
 80080c2:	d407      	bmi.n	80080d4 <__swsetup_r+0x30>
 80080c4:	2209      	movs	r2, #9
 80080c6:	602a      	str	r2, [r5, #0]
 80080c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080cc:	81a3      	strh	r3, [r4, #12]
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080d2:	e033      	b.n	800813c <__swsetup_r+0x98>
 80080d4:	0758      	lsls	r0, r3, #29
 80080d6:	d512      	bpl.n	80080fe <__swsetup_r+0x5a>
 80080d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080da:	b141      	cbz	r1, 80080ee <__swsetup_r+0x4a>
 80080dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080e0:	4299      	cmp	r1, r3
 80080e2:	d002      	beq.n	80080ea <__swsetup_r+0x46>
 80080e4:	4628      	mov	r0, r5
 80080e6:	f7ff fe0b 	bl	8007d00 <_free_r>
 80080ea:	2300      	movs	r3, #0
 80080ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	2300      	movs	r3, #0
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	f043 0308 	orr.w	r3, r3, #8
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	b94b      	cbnz	r3, 800811e <__swsetup_r+0x7a>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008114:	d003      	beq.n	800811e <__swsetup_r+0x7a>
 8008116:	4621      	mov	r1, r4
 8008118:	4628      	mov	r0, r5
 800811a:	f000 f83f 	bl	800819c <__smakebuf_r>
 800811e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008122:	f013 0201 	ands.w	r2, r3, #1
 8008126:	d00a      	beq.n	800813e <__swsetup_r+0x9a>
 8008128:	2200      	movs	r2, #0
 800812a:	60a2      	str	r2, [r4, #8]
 800812c:	6962      	ldr	r2, [r4, #20]
 800812e:	4252      	negs	r2, r2
 8008130:	61a2      	str	r2, [r4, #24]
 8008132:	6922      	ldr	r2, [r4, #16]
 8008134:	b942      	cbnz	r2, 8008148 <__swsetup_r+0xa4>
 8008136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800813a:	d1c5      	bne.n	80080c8 <__swsetup_r+0x24>
 800813c:	bd38      	pop	{r3, r4, r5, pc}
 800813e:	0799      	lsls	r1, r3, #30
 8008140:	bf58      	it	pl
 8008142:	6962      	ldrpl	r2, [r4, #20]
 8008144:	60a2      	str	r2, [r4, #8]
 8008146:	e7f4      	b.n	8008132 <__swsetup_r+0x8e>
 8008148:	2000      	movs	r0, #0
 800814a:	e7f7      	b.n	800813c <__swsetup_r+0x98>
 800814c:	20000018 	.word	0x20000018

08008150 <__swhatbuf_r>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	460c      	mov	r4, r1
 8008154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008158:	2900      	cmp	r1, #0
 800815a:	b096      	sub	sp, #88	@ 0x58
 800815c:	4615      	mov	r5, r2
 800815e:	461e      	mov	r6, r3
 8008160:	da0d      	bge.n	800817e <__swhatbuf_r+0x2e>
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008168:	f04f 0100 	mov.w	r1, #0
 800816c:	bf14      	ite	ne
 800816e:	2340      	movne	r3, #64	@ 0x40
 8008170:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008174:	2000      	movs	r0, #0
 8008176:	6031      	str	r1, [r6, #0]
 8008178:	602b      	str	r3, [r5, #0]
 800817a:	b016      	add	sp, #88	@ 0x58
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	466a      	mov	r2, sp
 8008180:	f000 f848 	bl	8008214 <_fstat_r>
 8008184:	2800      	cmp	r0, #0
 8008186:	dbec      	blt.n	8008162 <__swhatbuf_r+0x12>
 8008188:	9901      	ldr	r1, [sp, #4]
 800818a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800818e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008192:	4259      	negs	r1, r3
 8008194:	4159      	adcs	r1, r3
 8008196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800819a:	e7eb      	b.n	8008174 <__swhatbuf_r+0x24>

0800819c <__smakebuf_r>:
 800819c:	898b      	ldrh	r3, [r1, #12]
 800819e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081a0:	079d      	lsls	r5, r3, #30
 80081a2:	4606      	mov	r6, r0
 80081a4:	460c      	mov	r4, r1
 80081a6:	d507      	bpl.n	80081b8 <__smakebuf_r+0x1c>
 80081a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	2301      	movs	r3, #1
 80081b2:	6163      	str	r3, [r4, #20]
 80081b4:	b003      	add	sp, #12
 80081b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b8:	ab01      	add	r3, sp, #4
 80081ba:	466a      	mov	r2, sp
 80081bc:	f7ff ffc8 	bl	8008150 <__swhatbuf_r>
 80081c0:	9f00      	ldr	r7, [sp, #0]
 80081c2:	4605      	mov	r5, r0
 80081c4:	4639      	mov	r1, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff f9ca 	bl	8007560 <_malloc_r>
 80081cc:	b948      	cbnz	r0, 80081e2 <__smakebuf_r+0x46>
 80081ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d2:	059a      	lsls	r2, r3, #22
 80081d4:	d4ee      	bmi.n	80081b4 <__smakebuf_r+0x18>
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	f043 0302 	orr.w	r3, r3, #2
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	e7e2      	b.n	80081a8 <__smakebuf_r+0xc>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	6020      	str	r0, [r4, #0]
 80081e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081f2:	b15b      	cbz	r3, 800820c <__smakebuf_r+0x70>
 80081f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f81d 	bl	8008238 <_isatty_r>
 80081fe:	b128      	cbz	r0, 800820c <__smakebuf_r+0x70>
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	431d      	orrs	r5, r3
 8008210:	81a5      	strh	r5, [r4, #12]
 8008212:	e7cf      	b.n	80081b4 <__smakebuf_r+0x18>

08008214 <_fstat_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	@ (8008234 <_fstat_r+0x20>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	4611      	mov	r1, r2
 8008220:	602b      	str	r3, [r5, #0]
 8008222:	f7f9 fb55 	bl	80018d0 <_fstat>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d102      	bne.n	8008230 <_fstat_r+0x1c>
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	b103      	cbz	r3, 8008230 <_fstat_r+0x1c>
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	bd38      	pop	{r3, r4, r5, pc}
 8008232:	bf00      	nop
 8008234:	2000055c 	.word	0x2000055c

08008238 <_isatty_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d06      	ldr	r5, [pc, #24]	@ (8008254 <_isatty_r+0x1c>)
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	f7f9 fb54 	bl	80018f0 <_isatty>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_isatty_r+0x1a>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_isatty_r+0x1a>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	2000055c 	.word	0x2000055c

08008258 <_raise_r>:
 8008258:	291f      	cmp	r1, #31
 800825a:	b538      	push	{r3, r4, r5, lr}
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	d904      	bls.n	800826c <_raise_r+0x14>
 8008262:	2316      	movs	r3, #22
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800826e:	b112      	cbz	r2, 8008276 <_raise_r+0x1e>
 8008270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008274:	b94b      	cbnz	r3, 800828a <_raise_r+0x32>
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f830 	bl	80082dc <_getpid_r>
 800827c:	4622      	mov	r2, r4
 800827e:	4601      	mov	r1, r0
 8008280:	4628      	mov	r0, r5
 8008282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008286:	f000 b817 	b.w	80082b8 <_kill_r>
 800828a:	2b01      	cmp	r3, #1
 800828c:	d00a      	beq.n	80082a4 <_raise_r+0x4c>
 800828e:	1c59      	adds	r1, r3, #1
 8008290:	d103      	bne.n	800829a <_raise_r+0x42>
 8008292:	2316      	movs	r3, #22
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	2001      	movs	r0, #1
 8008298:	e7e7      	b.n	800826a <_raise_r+0x12>
 800829a:	2100      	movs	r1, #0
 800829c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082a0:	4620      	mov	r0, r4
 80082a2:	4798      	blx	r3
 80082a4:	2000      	movs	r0, #0
 80082a6:	e7e0      	b.n	800826a <_raise_r+0x12>

080082a8 <raise>:
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <raise+0xc>)
 80082aa:	4601      	mov	r1, r0
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	f7ff bfd3 	b.w	8008258 <_raise_r>
 80082b2:	bf00      	nop
 80082b4:	20000018 	.word	0x20000018

080082b8 <_kill_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d07      	ldr	r5, [pc, #28]	@ (80082d8 <_kill_r+0x20>)
 80082bc:	2300      	movs	r3, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	602b      	str	r3, [r5, #0]
 80082c6:	f7f9 faa3 	bl	8001810 <_kill>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	d102      	bne.n	80082d4 <_kill_r+0x1c>
 80082ce:	682b      	ldr	r3, [r5, #0]
 80082d0:	b103      	cbz	r3, 80082d4 <_kill_r+0x1c>
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	bd38      	pop	{r3, r4, r5, pc}
 80082d6:	bf00      	nop
 80082d8:	2000055c 	.word	0x2000055c

080082dc <_getpid_r>:
 80082dc:	f7f9 ba90 	b.w	8001800 <_getpid>

080082e0 <_init>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	bf00      	nop
 80082e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e6:	bc08      	pop	{r3}
 80082e8:	469e      	mov	lr, r3
 80082ea:	4770      	bx	lr

080082ec <_fini>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	bf00      	nop
 80082f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f2:	bc08      	pop	{r3}
 80082f4:	469e      	mov	lr, r3
 80082f6:	4770      	bx	lr
